
conRos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a8  080054a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080054a8  080054a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054a8  080054a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ac  080054ac  000154ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000074  08005524  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005524  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f99  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f6  00000000  00000000  0002a036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b702  00000000  00000000  0002db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfb7  00000000  00000000  00049292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a0b  00000000  00000000  00057249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebc54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  000ebca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08005358 	.word	0x08005358

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08005358 	.word	0x08005358

08000224 <Bsp_Led_Show_State_Handle>:
unsigned char ReceVelMode = 0x00;
short ReceVel = 2000;
// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f002 fedf 	bl	800300a <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000091 	.word	0x20000091
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Can_Init();
 800025c:	f000 f8e4 	bl	8000428 <Can_Init>
	Bsp_Data_Init(&ReceVelMode, &ReceVel);
 8000260:	4906      	ldr	r1, [pc, #24]	; (800027c <Bsp_Init+0x24>)
 8000262:	4807      	ldr	r0, [pc, #28]	; (8000280 <Bsp_Init+0x28>)
 8000264:	f000 f810 	bl	8000288 <Bsp_Data_Init>
	USART1_Init();
 8000268:	f000 fc30 	bl	8000acc <USART1_Init>
	Beep_On_Time(50);
 800026c:	2032      	movs	r0, #50	; 0x32
 800026e:	f000 f879 	bl	8000364 <Beep_On_Time>
	printf("start\n");
 8000272:	4804      	ldr	r0, [pc, #16]	; (8000284 <Bsp_Init+0x2c>)
 8000274:	f004 f8ec 	bl	8004450 <puts>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000000 	.word	0x20000000
 8000280:	20000090 	.word	0x20000090
 8000284:	08005370 	.word	0x08005370

08000288 <Bsp_Data_Init>:

void Bsp_Data_Init(unsigned char* p1, short* p2)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
	USART1_Data_Init(p1, p2);
 8000292:	6839      	ldr	r1, [r7, #0]
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f000 fc27 	bl	8000ae8 <USART1_Data_Init>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <Bsp_Loop>:
// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fbe5 	bl	8000a78 <Key1_State>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d004      	beq.n	80002be <Bsp_Loop+0x1a>
	{
		Beep_On_Time(50);
 80002b4:	2032      	movs	r0, #50	; 0x32
 80002b6:	f000 f855 	bl	8000364 <Beep_On_Time>
		Can_Test_Send();
 80002ba:	f000 f8f5 	bl	80004a8 <Can_Test_Send>
	}

	//HAL_Delay(10);
	USART1_Parse_Speed();
 80002be:	f000 fc81 	bl	8000bc4 <USART1_Parse_Speed>
	Can_Send_VelAndMode(ReceVelMode,100);
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <Bsp_Loop+0x50>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2164      	movs	r1, #100	; 0x64
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f977 	bl	80005bc <Can_Send_VelAndMode>
	HAL_Delay(10);
 80002ce:	200a      	movs	r0, #10
 80002d0:	f001 f976 	bl	80015c0 <HAL_Delay>
	usartSendData1(ReceVelMode,ReceVel);
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <Bsp_Loop+0x50>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <Bsp_Loop+0x54>)
 80002da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80002de:	4611      	mov	r1, r2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fcb3 	bl	8000c4c <usartSendData1>
	Bsp_Led_Show_State_Handle();
 80002e6:	f7ff ff9d 	bl	8000224 <Bsp_Led_Show_State_Handle>
	// The buzzer automatically shuts down when times out   蜂鸣器超时自动关闭
	Beep_Timeout_Close_Handle();
 80002ea:	f000 f87b 	bl	80003e4 <Beep_Timeout_Close_Handle>
	//HAL_Delay(10);

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000000 	.word	0x20000000

080002fc <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <Beep_Set_Time+0x1c>)
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	8013      	strh	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000092 	.word	0x20000092

0800031c <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000320:	4b02      	ldr	r3, [pc, #8]	; (800032c <Beep_Get_Time+0x10>)
 8000322:	881b      	ldrh	r3, [r3, #0]
}
 8000324:	4618      	mov	r0, r3
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000092 	.word	0x20000092

08000330 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800033a:	4a04      	ldr	r2, [pc, #16]	; (800034c <Beep_Set_State+0x1c>)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	7013      	strb	r3, [r2, #0]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	20000094 	.word	0x20000094

08000350 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	return beep_state;
 8000354:	4b02      	ldr	r3, [pc, #8]	; (8000360 <Beep_Get_State+0x10>)
 8000356:	781b      	ldrb	r3, [r3, #0]
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	20000094 	.word	0x20000094

08000364 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d10b      	bne.n	800038c <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000374:	2001      	movs	r0, #1
 8000376:	f7ff ffdb 	bl	8000330 <Beep_Set_State>
		Beep_Set_Time(0);
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ffbe 	bl	80002fc <Beep_Set_Time>
		BEEP_ON();
 8000380:	2201      	movs	r2, #1
 8000382:	2120      	movs	r1, #32
 8000384:	4815      	ldr	r0, [pc, #84]	; (80003dc <Beep_On_Time+0x78>)
 8000386:	f002 fe28 	bl	8002fda <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 800038a:	e022      	b.n	80003d2 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d10b      	bne.n	80003aa <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 8000392:	2000      	movs	r0, #0
 8000394:	f7ff ffcc 	bl	8000330 <Beep_Set_State>
		Beep_Set_Time(0);
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ffaf 	bl	80002fc <Beep_Set_Time>
		BEEP_OFF();
 800039e:	2200      	movs	r2, #0
 80003a0:	2120      	movs	r1, #32
 80003a2:	480e      	ldr	r0, [pc, #56]	; (80003dc <Beep_On_Time+0x78>)
 80003a4:	f002 fe19 	bl	8002fda <HAL_GPIO_WritePin>
}
 80003a8:	e013      	b.n	80003d2 <Beep_On_Time+0x6e>
		if (time >= 10)
 80003aa:	88fb      	ldrh	r3, [r7, #6]
 80003ac:	2b09      	cmp	r3, #9
 80003ae:	d910      	bls.n	80003d2 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 80003b0:	2002      	movs	r0, #2
 80003b2:	f7ff ffbd 	bl	8000330 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 80003b6:	88fb      	ldrh	r3, [r7, #6]
 80003b8:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <Beep_On_Time+0x7c>)
 80003ba:	fba2 2303 	umull	r2, r3, r2, r3
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff9a 	bl	80002fc <Beep_Set_Time>
			BEEP_ON();
 80003c8:	2201      	movs	r2, #1
 80003ca:	2120      	movs	r1, #32
 80003cc:	4803      	ldr	r0, [pc, #12]	; (80003dc <Beep_On_Time+0x78>)
 80003ce:	f002 fe04 	bl	8002fda <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40011000 	.word	0x40011000
 80003e0:	cccccccd 	.word	0xcccccccd

080003e4 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80003e8:	f7ff ffb2 	bl	8000350 <Beep_Get_State>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d113      	bne.n	800041a <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 80003f2:	f7ff ff93 	bl	800031c <Beep_Get_Time>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d006      	beq.n	800040a <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <Beep_Timeout_Close_Handle+0x3c>)
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	b29a      	uxth	r2, r3
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <Beep_Timeout_Close_Handle+0x3c>)
 8000406:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 8000408:	e007      	b.n	800041a <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800040a:	2200      	movs	r2, #0
 800040c:	2120      	movs	r1, #32
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <Beep_Timeout_Close_Handle+0x40>)
 8000410:	f002 fde3 	bl	8002fda <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000414:	2000      	movs	r0, #0
 8000416:	f7ff ff8b 	bl	8000330 <Beep_Set_State>
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000092 	.word	0x20000092
 8000424:	40011000 	.word	0x40011000

08000428 <Can_Init>:
CAN_FilterTypeDef sFilterConfig;


// Initialize the CAN  初始化CAN
void Can_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    sFilterConfig.FilterBank = 0;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <Can_Init+0x78>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <Can_Init+0x78>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <Can_Init+0x78>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <Can_Init+0x78>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <Can_Init+0x78>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <Can_Init+0x78>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <Can_Init+0x78>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <Can_Init+0x78>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
    sFilterConfig.SlaveStartFilterBank = 27;
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <Can_Init+0x78>)
 800045e:	221b      	movs	r2, #27
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
    sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <Can_Init+0x78>)
 8000464:	2201      	movs	r2, #1
 8000466:	621a      	str	r2, [r3, #32]

    // Setting the CAN Filter  设置CAN过滤器
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000468:	490d      	ldr	r1, [pc, #52]	; (80004a0 <Can_Init+0x78>)
 800046a:	480e      	ldr	r0, [pc, #56]	; (80004a4 <Can_Init+0x7c>)
 800046c:	f001 f9c7 	bl	80017fe <HAL_CAN_ConfigFilter>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <Can_Init+0x52>
    {
        Error_Handler();
 8000476:	f000 fe4f 	bl	8001118 <Error_Handler>
    }

    // Start the CAN peripheral  启动CAN
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 800047a:	480a      	ldr	r0, [pc, #40]	; (80004a4 <Can_Init+0x7c>)
 800047c:	f001 fa88 	bl	8001990 <HAL_CAN_Start>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <Can_Init+0x62>
    {
        Error_Handler();
 8000486:	f000 fe47 	bl	8001118 <Error_Handler>
    }

    // Activate CAN RX notification  启动CAN RX通知
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800048a:	2102      	movs	r1, #2
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <Can_Init+0x7c>)
 800048e:	f001 fcae 	bl	8001dee <HAL_CAN_ActivateNotification>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <Can_Init+0x74>
    {
        Error_Handler();
 8000498:	f000 fe3e 	bl	8001118 <Error_Handler>
    }
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000cc 	.word	0x200000cc
 80004a4:	20000118 	.word	0x20000118

080004a8 <Can_Test_Send>:


// The test sends data through CAN  测试通过CAN发送数据
void Can_Test_Send(void)
{
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b08b      	sub	sp, #44	; 0x2c
 80004ac:	af06      	add	r7, sp, #24
	uint8_t TxData[8];
	uint32_t TxMailbox = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
	TxHeader.StdId = 0x000F;
 80004b2:	4b25      	ldr	r3, [pc, #148]	; (8000548 <Can_Test_Send+0xa0>)
 80004b4:	220f      	movs	r2, #15
 80004b6:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x00;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <Can_Test_Send+0xa0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <Can_Test_Send+0xa0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80004c4:	4b20      	ldr	r3, [pc, #128]	; (8000548 <Can_Test_Send+0xa0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80004ca:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <Can_Test_Send+0xa0>)
 80004cc:	2208      	movs	r2, #8
 80004ce:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <Can_Test_Send+0xa0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	751a      	strb	r2, [r3, #20]

	for (int i = 0; i < 8; i++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	e00c      	b.n	80004f6 <Can_Test_Send+0x4e>
	{
		TxData[i] = 1 << i;
 80004dc:	2201      	movs	r2, #1
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	b2d9      	uxtb	r1, r3
 80004e6:	1d3a      	adds	r2, r7, #4
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	460a      	mov	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	3301      	adds	r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	ddef      	ble.n	80004dc <Can_Test_Send+0x34>
	}
	printf("CAN Send:%02X %02X %02X %02X %02X %02X %02X %02X \n",
			TxData[0], TxData[1], TxData[2], TxData[3],
 80004fc:	793b      	ldrb	r3, [r7, #4]
	printf("CAN Send:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 80004fe:	461d      	mov	r5, r3
			TxData[0], TxData[1], TxData[2], TxData[3],
 8000500:	797b      	ldrb	r3, [r7, #5]
	printf("CAN Send:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8000502:	461e      	mov	r6, r3
			TxData[0], TxData[1], TxData[2], TxData[3],
 8000504:	79bb      	ldrb	r3, [r7, #6]
	printf("CAN Send:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8000506:	469c      	mov	ip, r3
			TxData[0], TxData[1], TxData[2], TxData[3],
 8000508:	79fb      	ldrb	r3, [r7, #7]
			TxData[4], TxData[5], TxData[6], TxData[7]);
 800050a:	7a3a      	ldrb	r2, [r7, #8]
 800050c:	7a79      	ldrb	r1, [r7, #9]
 800050e:	7ab8      	ldrb	r0, [r7, #10]
 8000510:	7afc      	ldrb	r4, [r7, #11]
	printf("CAN Send:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8000512:	9404      	str	r4, [sp, #16]
 8000514:	9003      	str	r0, [sp, #12]
 8000516:	9102      	str	r1, [sp, #8]
 8000518:	9201      	str	r2, [sp, #4]
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4663      	mov	r3, ip
 800051e:	4632      	mov	r2, r6
 8000520:	4629      	mov	r1, r5
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <Can_Test_Send+0xa4>)
 8000524:	f003 ff0e 	bl	8004344 <iprintf>
    // Send Data  发送数据
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000528:	463b      	mov	r3, r7
 800052a:	1d3a      	adds	r2, r7, #4
 800052c:	4906      	ldr	r1, [pc, #24]	; (8000548 <Can_Test_Send+0xa0>)
 800052e:	4808      	ldr	r0, [pc, #32]	; (8000550 <Can_Test_Send+0xa8>)
 8000530:	f001 fa72 	bl	8001a18 <HAL_CAN_AddTxMessage>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <Can_Test_Send+0x96>
    {
        Error_Handler();
 800053a:	f000 fded 	bl	8001118 <Error_Handler>
    }
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	bf00      	nop
 8000548:	20000098 	.word	0x20000098
 800054c:	08005378 	.word	0x08005378
 8000550:	20000118 	.word	0x20000118

08000554 <Can_set_RobotMoving_Txheader>:

void Can_set_RobotMoving_Txheader(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	 TxHeader.StdId = 0x00;
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <Can_set_RobotMoving_Txheader+0x30>)
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
	 TxHeader.ExtId = 0x1ff46f00;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <Can_set_RobotMoving_Txheader+0x30>)
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <Can_set_RobotMoving_Txheader+0x34>)
 8000562:	605a      	str	r2, [r3, #4]
	 TxHeader.RTR = CAN_RTR_DATA;
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <Can_set_RobotMoving_Txheader+0x30>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
	 TxHeader.IDE = CAN_ID_EXT;
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <Can_set_RobotMoving_Txheader+0x30>)
 800056c:	2204      	movs	r2, #4
 800056e:	609a      	str	r2, [r3, #8]
	 TxHeader.DLC = 8;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <Can_set_RobotMoving_Txheader+0x30>)
 8000572:	2208      	movs	r2, #8
 8000574:	611a      	str	r2, [r3, #16]
	 TxHeader.TransmitGlobalTime = DISABLE;
 8000576:	4b03      	ldr	r3, [pc, #12]	; (8000584 <Can_set_RobotMoving_Txheader+0x30>)
 8000578:	2200      	movs	r2, #0
 800057a:	751a      	strb	r2, [r3, #20]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	20000098 	.word	0x20000098
 8000588:	1ff46f00 	.word	0x1ff46f00

0800058c <Can_send_Data>:
void Can_send_Data(uint8_t * TxData, uint32_t *pTxMailbox)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, pTxMailbox) != HAL_OK)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4906      	ldr	r1, [pc, #24]	; (80005b4 <Can_send_Data+0x28>)
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <Can_send_Data+0x2c>)
 800059e:	f001 fa3b 	bl	8001a18 <HAL_CAN_AddTxMessage>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <Can_send_Data+0x20>
	    {
	        Error_Handler();
 80005a8:	f000 fdb6 	bl	8001118 <Error_Handler>
	    }
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000098 	.word	0x20000098
 80005b8:	20000118 	.word	0x20000118

080005bc <Can_Send_VelAndMode>:
//mvMode : 0x00 停止， 0x11 前进， 0x22 后退， 0x33 左平移， 0x44 右平移， 0x54 原地左旋转， 0x56 原地右旋转，
//         0x66 左前移动， 0x77 右前移动， 0x88 左后移动， 0x99 右后移动
void Can_Send_VelAndMode(unsigned char mvMode, short vel)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	80bb      	strh	r3, [r7, #4]
	if(mvMode == 0x11)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b11      	cmp	r3, #17
 80005d0:	d105      	bne.n	80005de <Can_Send_VelAndMode+0x22>
	{
		Can_Send_Robot_Forward(vel);
 80005d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f86e 	bl	80006b8 <Can_Send_Robot_Forward>
	}

	else{
		Can_Send_Robot_Stop();
	}
}
 80005dc:	e052      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x22)
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b22      	cmp	r3, #34	; 0x22
 80005e2:	d105      	bne.n	80005f0 <Can_Send_VelAndMode+0x34>
		Can_Send_Robot_Backward(vel);
 80005e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f88e 	bl	800070a <Can_Send_Robot_Backward>
}
 80005ee:	e049      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x33)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b33      	cmp	r3, #51	; 0x33
 80005f4:	d105      	bne.n	8000602 <Can_Send_VelAndMode+0x46>
		Can_Send_Robot_LeftMoving(vel);
 80005f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f8ae 	bl	800075c <Can_Send_Robot_LeftMoving>
}
 8000600:	e040      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x44)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b44      	cmp	r3, #68	; 0x44
 8000606:	d105      	bne.n	8000614 <Can_Send_VelAndMode+0x58>
		Can_Send_Robot_RightMoving(vel);
 8000608:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f8ce 	bl	80007ae <Can_Send_Robot_RightMoving>
}
 8000612:	e037      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x54)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b54      	cmp	r3, #84	; 0x54
 8000618:	d105      	bne.n	8000626 <Can_Send_VelAndMode+0x6a>
		Can_Send_Robot_LeftRotating(vel);
 800061a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f8ee 	bl	8000800 <Can_Send_Robot_LeftRotating>
}
 8000624:	e02e      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x56)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b56      	cmp	r3, #86	; 0x56
 800062a:	d105      	bne.n	8000638 <Can_Send_VelAndMode+0x7c>
		Can_Send_Robot_RightRotating(vel);
 800062c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f90e 	bl	8000852 <Can_Send_Robot_RightRotating>
}
 8000636:	e025      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x66)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b66      	cmp	r3, #102	; 0x66
 800063c:	d105      	bne.n	800064a <Can_Send_VelAndMode+0x8e>
		Can_Send_Robot_ForwadLeftMoving(vel);
 800063e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f92e 	bl	80008a4 <Can_Send_Robot_ForwadLeftMoving>
}
 8000648:	e01c      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x77)
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b77      	cmp	r3, #119	; 0x77
 800064e:	d105      	bne.n	800065c <Can_Send_VelAndMode+0xa0>
		Can_Send_Robot_ForwardRightMoving(vel);
 8000650:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f94e 	bl	80008f6 <Can_Send_Robot_ForwardRightMoving>
}
 800065a:	e013      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x88)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b88      	cmp	r3, #136	; 0x88
 8000660:	d105      	bne.n	800066e <Can_Send_VelAndMode+0xb2>
		Can_Send_Robot_BackwardLeftMoving(vel);
 8000662:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f96e 	bl	8000948 <Can_Send_Robot_BackwardLeftMoving>
}
 800066c:	e00a      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
	else if(mvMode == 0x99)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b99      	cmp	r3, #153	; 0x99
 8000672:	d105      	bne.n	8000680 <Can_Send_VelAndMode+0xc4>
		Can_Send_Robot_BackwardRightMoving(vel);
 8000674:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f98e 	bl	800099a <Can_Send_Robot_BackwardRightMoving>
}
 800067e:	e001      	b.n	8000684 <Can_Send_VelAndMode+0xc8>
		Can_Send_Robot_Stop();
 8000680:	f000 f804 	bl	800068c <Can_Send_Robot_Stop>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <Can_Send_Robot_Stop>:

void Can_Send_Robot_Stop(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
	uint8_t TxData[8] = {0};
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	uint32_t TxMailbox = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
	Can_set_RobotMoving_Txheader();
 800069e:	f7ff ff59 	bl	8000554 <Can_set_RobotMoving_Txheader>
	Can_send_Data(TxData, &TxMailbox);
 80006a2:	1d3a      	adds	r2, r7, #4
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff6e 	bl	800058c <Can_send_Data>
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Can_Send_Robot_Forward>:

void Can_Send_Robot_Forward(short vel)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 80006ce:	f7ff ff41 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0x60;
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0xFF;
 80006d6:	23ff      	movs	r3, #255	; 0xff
 80006d8:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0xA0;
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0x00;
 80006de:	2300      	movs	r3, #0
 80006e0:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0xA0;
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0x60;
 80006ea:	2360      	movs	r3, #96	; 0x60
 80006ec:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0xFF;
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 80006f2:	f107 020c 	add.w	r2, r7, #12
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff45 	bl	800058c <Can_send_Data>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <Can_Send_Robot_Backward>:

void Can_Send_Robot_Backward(short vel)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 8000720:	f7ff ff18 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0xA0;
 8000724:	23a0      	movs	r3, #160	; 0xa0
 8000726:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0x00;
 8000728:	2300      	movs	r3, #0
 800072a:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0x60;
 800072c:	2360      	movs	r3, #96	; 0x60
 800072e:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0xFF;
 8000730:	23ff      	movs	r3, #255	; 0xff
 8000732:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0x60;
 8000734:	2360      	movs	r3, #96	; 0x60
 8000736:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0xFF;
 8000738:	23ff      	movs	r3, #255	; 0xff
 800073a:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0xA0;
 800073c:	23a0      	movs	r3, #160	; 0xa0
 800073e:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0x00;
 8000740:	2300      	movs	r3, #0
 8000742:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 8000744:	f107 020c 	add.w	r2, r7, #12
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff1c 	bl	800058c <Can_send_Data>
}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Can_Send_Robot_LeftMoving>:

void Can_Send_Robot_LeftMoving(short vel)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 8000772:	f7ff feef 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0x60;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0xFF;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0x60;
 800077e:	2360      	movs	r3, #96	; 0x60
 8000780:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0xFF;
 8000782:	23ff      	movs	r3, #255	; 0xff
 8000784:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0xA0;
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0xA0;
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 8000796:	f107 020c 	add.w	r2, r7, #12
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fef3 	bl	800058c <Can_send_Data>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <Can_Send_Robot_RightMoving>:

void Can_Send_Robot_RightMoving(short vel)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 80007c4:	f7ff fec6 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0xA0;
 80007c8:	23a0      	movs	r3, #160	; 0xa0
 80007ca:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0xA0;
 80007d0:	23a0      	movs	r3, #160	; 0xa0
 80007d2:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0x00;
 80007d4:	2300      	movs	r3, #0
 80007d6:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0x60;
 80007d8:	2360      	movs	r3, #96	; 0x60
 80007da:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0xFF;
 80007dc:	23ff      	movs	r3, #255	; 0xff
 80007de:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0x60;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0xFF;
 80007e4:	23ff      	movs	r3, #255	; 0xff
 80007e6:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 80007e8:	f107 020c 	add.w	r2, r7, #12
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff feca 	bl	800058c <Can_send_Data>
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <Can_Send_Robot_LeftRotating>:

void Can_Send_Robot_LeftRotating(short vel)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 8000816:	f7ff fe9d 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0x60;
 800081a:	2360      	movs	r3, #96	; 0x60
 800081c:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0xFF;
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0x60;
 8000822:	2360      	movs	r3, #96	; 0x60
 8000824:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0xFF;
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0x60;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0xFF;
 800082e:	23ff      	movs	r3, #255	; 0xff
 8000830:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0x60;
 8000832:	2360      	movs	r3, #96	; 0x60
 8000834:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0xFF;
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 800083a:	f107 020c 	add.w	r2, r7, #12
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fea1 	bl	800058c <Can_send_Data>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <Can_Send_Robot_RightRotating>:

void Can_Send_Robot_RightRotating(short vel)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 8000868:	f7ff fe74 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0xA0;
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0xA0;
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0x00;
 8000878:	2300      	movs	r3, #0
 800087a:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0xA0;
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0x00;
 8000880:	2300      	movs	r3, #0
 8000882:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0xA0;
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0x00;
 8000888:	2300      	movs	r3, #0
 800088a:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 800088c:	f107 020c 	add.w	r2, r7, #12
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe78 	bl	800058c <Can_send_Data>
}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Can_Send_Robot_ForwadLeftMoving>:

void Can_Send_Robot_ForwadLeftMoving(short vel)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 80008ba:	f7ff fe4b 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0x60;
 80008be:	2360      	movs	r3, #96	; 0x60
 80008c0:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0xFF;
 80008c2:	23ff      	movs	r3, #255	; 0xff
 80008c4:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0x00;
 80008c6:	2300      	movs	r3, #0
 80008c8:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0xA0;
 80008ce:	23a0      	movs	r3, #160	; 0xa0
 80008d0:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0x00;
 80008d2:	2300      	movs	r3, #0
 80008d4:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0x00;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0x00;
 80008da:	2300      	movs	r3, #0
 80008dc:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 80008de:	f107 020c 	add.w	r2, r7, #12
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe4f 	bl	800058c <Can_send_Data>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <Can_Send_Robot_ForwardRightMoving>:

void Can_Send_Robot_ForwardRightMoving(short vel)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 800090c:	f7ff fe22 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0x00;
 8000910:	2300      	movs	r3, #0
 8000912:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0x00;
 8000914:	2300      	movs	r3, #0
 8000916:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0xA0;
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0x00;
 800091c:	2300      	movs	r3, #0
 800091e:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0x00;
 8000924:	2300      	movs	r3, #0
 8000926:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0x60;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0xFF;
 800092c:	23ff      	movs	r3, #255	; 0xff
 800092e:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 8000930:	f107 020c 	add.w	r2, r7, #12
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe26 	bl	800058c <Can_send_Data>
}
 8000940:	bf00      	nop
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <Can_Send_Robot_BackwardLeftMoving>:

void Can_Send_Robot_BackwardLeftMoving(short vel)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 800095e:	f7ff fdf9 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0x00;
 8000966:	2300      	movs	r3, #0
 8000968:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0x60;
 800096a:	2360      	movs	r3, #96	; 0x60
 800096c:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0xFF;
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0x00;
 8000972:	2300      	movs	r3, #0
 8000974:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0x00;
 8000976:	2300      	movs	r3, #0
 8000978:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0xA0;
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 8000982:	f107 020c 	add.w	r2, r7, #12
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fdfd 	bl	800058c <Can_send_Data>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <Can_Send_Robot_BackwardRightMoving>:

void Can_Send_Robot_BackwardRightMoving(short vel)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData[8] = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 80009b0:	f7ff fdd0 	bl	8000554 <Can_set_RobotMoving_Txheader>

	TxData[0] = 0xA0;
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	743b      	strb	r3, [r7, #16]
	TxData[1] = 0x00;
 80009b8:	2300      	movs	r3, #0
 80009ba:	747b      	strb	r3, [r7, #17]

	TxData[2] = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	74bb      	strb	r3, [r7, #18]
	TxData[3] = 0x00;
 80009c0:	2300      	movs	r3, #0
 80009c2:	74fb      	strb	r3, [r7, #19]

	TxData[4] = 0x60;
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	753b      	strb	r3, [r7, #20]
	TxData[5] = 0xFF;
 80009c8:	23ff      	movs	r3, #255	; 0xff
 80009ca:	757b      	strb	r3, [r7, #21]

	TxData[6] = 0x00;
 80009cc:	2300      	movs	r3, #0
 80009ce:	75bb      	strb	r3, [r7, #22]
	TxData[7] = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	75fb      	strb	r3, [r7, #23]

	Can_send_Data(TxData, &TxMailbox);
 80009d4:	f107 020c 	add.w	r2, r7, #12
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fdd4 	bl	800058c <Can_send_Data>
}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_CAN_RxFifo0MsgPendingCallback>:
// CAN receives interrupt callbacks  CAN接收中断回调
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af06      	add	r7, sp, #24
 80009f2:	6078      	str	r0, [r7, #4]
	if (hcan->Instance == CAN1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d122      	bne.n	8000a44 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	{
		uint8_t RxData[8];
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f001 f8e0 	bl	8001bcc <HAL_CAN_GetRxMessage>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		{
			Error_Handler();
 8000a12:	f000 fb81 	bl	8001118 <Error_Handler>
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
					RxData[0], RxData[1], RxData[2], RxData[3],
					RxData[4], RxData[5], RxData[6], RxData[7]);
		}
	}
}
 8000a16:	e015      	b.n	8000a44 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
					RxData[0], RxData[1], RxData[2], RxData[3],
 8000a18:	7a3b      	ldrb	r3, [r7, #8]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8000a1a:	461d      	mov	r5, r3
					RxData[0], RxData[1], RxData[2], RxData[3],
 8000a1c:	7a7b      	ldrb	r3, [r7, #9]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8000a1e:	461e      	mov	r6, r3
					RxData[0], RxData[1], RxData[2], RxData[3],
 8000a20:	7abb      	ldrb	r3, [r7, #10]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8000a22:	469c      	mov	ip, r3
					RxData[0], RxData[1], RxData[2], RxData[3],
 8000a24:	7afb      	ldrb	r3, [r7, #11]
					RxData[4], RxData[5], RxData[6], RxData[7]);
 8000a26:	7b3a      	ldrb	r2, [r7, #12]
 8000a28:	7b79      	ldrb	r1, [r7, #13]
 8000a2a:	7bb8      	ldrb	r0, [r7, #14]
 8000a2c:	7bfc      	ldrb	r4, [r7, #15]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8000a2e:	9404      	str	r4, [sp, #16]
 8000a30:	9003      	str	r0, [sp, #12]
 8000a32:	9102      	str	r1, [sp, #8]
 8000a34:	9201      	str	r2, [sp, #4]
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4663      	mov	r3, ip
 8000a3a:	4632      	mov	r2, r6
 8000a3c:	4629      	mov	r1, r5
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000a40:	f003 fc80 	bl	8004344 <iprintf>
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4c:	40006400 	.word	0x40006400
 8000a50:	200000b0 	.word	0x200000b0
 8000a54:	080053ac 	.word	0x080053ac

08000a58 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <Key1_is_Press+0x1c>)
 8000a60:	f002 faa4 	bl	8002fac <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40011400 	.word	0x40011400

08000a78 <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8000a82:	f7ff ffe9 	bl	8000a58 <Key1_is_Press>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d10e      	bne.n	8000aaa <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <Key1_State+0x50>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	3301      	adds	r3, #1
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	da09      	bge.n	8000ab0 <Key1_State+0x38>
		{
			key1_state++;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <Key1_State+0x50>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <Key1_State+0x50>)
 8000aa6:	801a      	strh	r2, [r3, #0]
 8000aa8:	e002      	b.n	8000ab0 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <Key1_State+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <Key1_State+0x50>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d101      	bne.n	8000abc <Key1_State+0x44>
	{
		return KEY_PRESS;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <Key1_State+0x46>
	}
	return KEY_RELEASE;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000f4 	.word	0x200000f4

08000acc <USART1_Init>:
	short d;
	unsigned char data[2];
}VelNow;
// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4903      	ldr	r1, [pc, #12]	; (8000ae0 <USART1_Init+0x14>)
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <USART1_Init+0x18>)
 8000ad6:	f002 ffaa 	bl	8003a2e <HAL_UART_Receive_IT>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000f6 	.word	0x200000f6
 8000ae4:	20000144 	.word	0x20000144

08000ae8 <USART1_Data_Init>:

void USART1_Data_Init(unsigned char* p1, short* p2)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	receVelPtr = p2;
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <USART1_Data_Init+0x20>)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	6013      	str	r3, [r2, #0]
	receModePtr = p1;
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <USART1_Data_Init+0x24>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	20000108 	.word	0x20000108

08000b10 <USART1_Revice_Speed>:
    }
    #endif
}

void USART1_Revice_Speed(uint8_t Rx_Temp)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
    switch (Rx_Flag)
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <USART1_Revice_Speed+0xa4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d026      	beq.n	8000b70 <USART1_Revice_Speed+0x60>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	dc3b      	bgt.n	8000b9e <USART1_Revice_Speed+0x8e>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <USART1_Revice_Speed+0x20>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d00b      	beq.n	8000b46 <USART1_Revice_Speed+0x36>
            Rx_Flag = 0;
            New_Frame = 1;
        }
        break;
    default:
        break;
 8000b2e:	e036      	b.n	8000b9e <USART1_Revice_Speed+0x8e>
        if (Rx_Temp == header[0])
 8000b30:	2255      	movs	r2, #85	; 0x55
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d134      	bne.n	8000ba2 <USART1_Revice_Speed+0x92>
            Rx_Data[0] = header[0];
 8000b38:	2255      	movs	r2, #85	; 0x55
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <USART1_Revice_Speed+0xa8>)
 8000b3c:	701a      	strb	r2, [r3, #0]
            Rx_Flag = 1;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <USART1_Revice_Speed+0xa4>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
        break;
 8000b44:	e02d      	b.n	8000ba2 <USART1_Revice_Speed+0x92>
        if (Rx_Temp == header[1])
 8000b46:	22aa      	movs	r2, #170	; 0xaa
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d109      	bne.n	8000b62 <USART1_Revice_Speed+0x52>
            Rx_Data[1] = header[1];
 8000b4e:	22aa      	movs	r2, #170	; 0xaa
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <USART1_Revice_Speed+0xa8>)
 8000b52:	705a      	strb	r2, [r3, #1]
            Rx_Flag = 2;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <USART1_Revice_Speed+0xa4>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	701a      	strb	r2, [r3, #0]
            Rx_index = 2;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <USART1_Revice_Speed+0xac>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	701a      	strb	r2, [r3, #0]
        break;
 8000b60:	e022      	b.n	8000ba8 <USART1_Revice_Speed+0x98>
            Rx_Flag = 0;
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <USART1_Revice_Speed+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
            Rx_Data[0] = 0x0;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <USART1_Revice_Speed+0xa8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
        break;
 8000b6e:	e01b      	b.n	8000ba8 <USART1_Revice_Speed+0x98>
        Rx_Data[Rx_index] = Rx_Temp;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <USART1_Revice_Speed+0xac>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <USART1_Revice_Speed+0xa8>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	5453      	strb	r3, [r2, r1]
        Rx_index++;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <USART1_Revice_Speed+0xac>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <USART1_Revice_Speed+0xac>)
 8000b86:	701a      	strb	r2, [r3, #0]
        if (Rx_index >= RX_MAX_BUF)
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <USART1_Revice_Speed+0xac>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d90a      	bls.n	8000ba6 <USART1_Revice_Speed+0x96>
            Rx_Flag = 0;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <USART1_Revice_Speed+0xa4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
            New_Frame = 1;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <USART1_Revice_Speed+0xb0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
        break;
 8000b9c:	e003      	b.n	8000ba6 <USART1_Revice_Speed+0x96>
        break;
 8000b9e:	bf00      	nop
 8000ba0:	e002      	b.n	8000ba8 <USART1_Revice_Speed+0x98>
        break;
 8000ba2:	bf00      	nop
 8000ba4:	e000      	b.n	8000ba8 <USART1_Revice_Speed+0x98>
        break;
 8000ba6:	bf00      	nop
    }
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000102 	.word	0x20000102
 8000bb8:	200000f8 	.word	0x200000f8
 8000bbc:	20000101 	.word	0x20000101
 8000bc0:	200000f7 	.word	0x200000f7

08000bc4 <USART1_Parse_Speed>:
uint8_t USART1_Parse_Speed(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
    int length = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
    if (New_Frame)
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <USART1_Parse_Speed+0x74>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d029      	beq.n	8000c2e <USART1_Parse_Speed+0x6a>
    {
        result = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	73fb      	strb	r3, [r7, #15]
        New_Frame = 0;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <USART1_Parse_Speed+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
        length = Rx_Data[2];
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <USART1_Parse_Speed+0x78>)
 8000be6:	789b      	ldrb	r3, [r3, #2]
 8000be8:	60bb      	str	r3, [r7, #8]
        uint8_t checknum = getCrc8(Rx_Data, 3 + length);;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3303      	adds	r3, #3
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <USART1_Parse_Speed+0x78>)
 8000bf6:	f000 f88d 	bl	8000d14 <getCrc8>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
        if (checknum == Rx_Data[6])
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <USART1_Parse_Speed+0x78>)
 8000c00:	799b      	ldrb	r3, [r3, #6]
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d112      	bne.n	8000c2e <USART1_Parse_Speed+0x6a>
        {
        	*receModePtr = Rx_Data[3];
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <USART1_Parse_Speed+0x7c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <USART1_Parse_Speed+0x78>)
 8000c0e:	78d2      	ldrb	r2, [r2, #3]
 8000c10:	701a      	strb	r2, [r3, #0]
        	VelSet.data[0] = Rx_Data[4];
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <USART1_Parse_Speed+0x78>)
 8000c14:	791a      	ldrb	r2, [r3, #4]
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <USART1_Parse_Speed+0x80>)
 8000c18:	701a      	strb	r2, [r3, #0]
        	VelSet.data[1] = Rx_Data[5];
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <USART1_Parse_Speed+0x78>)
 8000c1c:	795a      	ldrb	r2, [r3, #5]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <USART1_Parse_Speed+0x80>)
 8000c20:	705a      	strb	r2, [r3, #1]
        	*receVelPtr = VelSet.d;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <USART1_Parse_Speed+0x84>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <USART1_Parse_Speed+0x80>)
 8000c28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c2c:	801a      	strh	r2, [r3, #0]
        }
    }
    return result;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000f7 	.word	0x200000f7
 8000c3c:	200000f8 	.word	0x200000f8
 8000c40:	20000108 	.word	0x20000108
 8000c44:	2000010c 	.word	0x2000010c
 8000c48:	20000104 	.word	0x20000104

08000c4c <usartSendData1>:

void usartSendData1(unsigned char velMode, short vel)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	460a      	mov	r2, r1
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	80bb      	strh	r3, [r7, #4]
	unsigned char buf[9] = {0};
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	711a      	strb	r2, [r3, #4]
	int i, length = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
	VelNow.d  = vel;
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <usartSendData1+0xc0>)
 8000c70:	88bb      	ldrh	r3, [r7, #4]
 8000c72:	8013      	strh	r3, [r2, #0]

	for(i = 0; i < 2; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	e00c      	b.n	8000c94 <usartSendData1+0x48>
		buf[i] = header[i]; // buf[0] buf[1]
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <usartSendData1+0xc4>)
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	4413      	add	r3, r2
 8000c80:	7819      	ldrb	r1, [r3, #0]
 8000c82:	f107 020c 	add.w	r2, r7, #12
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	4413      	add	r3, r2
 8000c8a:	460a      	mov	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3301      	adds	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	ddef      	ble.n	8000c7a <usartSendData1+0x2e>
	length = 3;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	61bb      	str	r3, [r7, #24]
	buf[2] = length;
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	73bb      	strb	r3, [r7, #14]
	buf[3] = velMode;
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	73fb      	strb	r3, [r7, #15]

	buf[4] = VelNow.data[0];
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <usartSendData1+0xc0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	743b      	strb	r3, [r7, #16]
	buf[5] = VelNow.data[1];
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <usartSendData1+0xc0>)
 8000cb0:	785b      	ldrb	r3, [r3, #1]
 8000cb2:	747b      	strb	r3, [r7, #17]

	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3303      	adds	r3, #3
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	1cdc      	adds	r4, r3, #3
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f824 	bl	8000d14 <getCrc8>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f104 0320 	add.w	r3, r4, #32
 8000cd4:	443b      	add	r3, r7
 8000cd6:	f803 2c14 	strb.w	r2, [r3, #-20]
	buf[3 + length + 1] = ender[0];              // buf[11]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	220d      	movs	r2, #13
 8000ce0:	3320      	adds	r3, #32
 8000ce2:	443b      	add	r3, r7
 8000ce4:	f803 2c14 	strb.w	r2, [r3, #-20]
	buf[3 + length + 2] = ender[1];              // buf[12]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	3305      	adds	r3, #5
 8000cec:	220a      	movs	r2, #10
 8000cee:	3320      	adds	r3, #32
 8000cf0:	443b      	add	r3, r7
 8000cf2:	f803 2c14 	strb.w	r2, [r3, #-20]

	USART_Send_String(buf,sizeof(buf));
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2109      	movs	r1, #9
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f83d 	bl	8000d7c <USART_Send_String>
}
 8000d02:	bf00      	nop
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000110 	.word	0x20000110
 8000d10:	080053f4 	.word	0x080053f4

08000d14 <getCrc8>:


	USART_Send_String(buf,sizeof(buf));
}
unsigned char getCrc8(unsigned char *ptr, unsigned short len)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
	unsigned char crc;
		unsigned char i;
		crc = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
		while(len--)
 8000d24:	e01f      	b.n	8000d66 <getCrc8+0x52>
		{
			crc ^= *ptr++;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	4053      	eors	r3, r2
 8000d32:	73fb      	strb	r3, [r7, #15]
			for(i = 0; i < 8; i++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	73bb      	strb	r3, [r7, #14]
 8000d38:	e012      	b.n	8000d60 <getCrc8+0x4c>
			{
				if(crc&0x01)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d007      	beq.n	8000d54 <getCrc8+0x40>
	                crc=(crc>>1)^0x8C;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	085b      	lsrs	r3, r3, #1
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e002      	b.n	8000d5a <getCrc8+0x46>
				else
	                crc >>= 1;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
			for(i = 0; i < 8; i++)
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	73bb      	strb	r3, [r7, #14]
 8000d60:	7bbb      	ldrb	r3, [r7, #14]
 8000d62:	2b07      	cmp	r3, #7
 8000d64:	d9e9      	bls.n	8000d3a <getCrc8+0x26>
		while(len--)
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	1e5a      	subs	r2, r3, #1
 8000d6a:	807a      	strh	r2, [r7, #2]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1da      	bne.n	8000d26 <getCrc8+0x12>
			}
		}
		return crc;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <USART_Send_String>:
void USART_Send_String(uint8_t *p,uint16_t sendSize)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
	static int length =0;
	while(length<sendSize)
 8000d88:	e012      	b.n	8000db0 <USART_Send_String+0x34>
	{

		while( !(USART1->SR&(0x01<<7)) );
 8000d8a:	bf00      	nop
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <USART_Send_String+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f9      	beq.n	8000d8c <USART_Send_String+0x10>
		USART1->DR=*p;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <USART_Send_String+0x50>)
 8000d9e:	605a      	str	r2, [r3, #4]
		p++;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
		length++;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <USART_Send_String+0x54>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <USART_Send_String+0x54>)
 8000dae:	6013      	str	r3, [r2, #0]
	while(length<sendSize)
 8000db0:	887a      	ldrh	r2, [r7, #2]
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <USART_Send_String+0x54>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dce7      	bgt.n	8000d8a <USART_Send_String+0xe>
	}
	length =0;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <USART_Send_String+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	20000114 	.word	0x20000114

08000dd4 <HAL_UART_RxCpltCallback>:
// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    //USART1_Send_U8(RxTemp);
    USART1_Revice_Speed(RxTemp);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_UART_RxCpltCallback+0x24>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fe95 	bl	8000b10 <USART1_Revice_Speed>
    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	4903      	ldr	r1, [pc, #12]	; (8000df8 <HAL_UART_RxCpltCallback+0x24>)
 8000dea:	4804      	ldr	r0, [pc, #16]	; (8000dfc <HAL_UART_RxCpltCallback+0x28>)
 8000dec:	f002 fe1f 	bl	8003a2e <HAL_UART_Receive_IT>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000f6 	.word	0x200000f6
 8000dfc:	20000144 	.word	0x20000144

08000e00 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e08:	1d39      	adds	r1, r7, #4
 8000e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <__io_putchar+0x20>)
 8000e12:	f002 fd7a 	bl	800390a <HAL_UART_Transmit>
    return ch;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000144 	.word	0x20000144

08000e24 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <MX_CAN_Init+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e42:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000e46:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e4e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e76:	f000 fbc7 	bl	8001608 <HAL_CAN_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e80:	f000 f94a 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000118 	.word	0x20000118
 8000e8c:	40006400 	.word	0x40006400

08000e90 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <HAL_CAN_MspInit+0xc0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d14b      	bne.n	8000f48 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_CAN_MspInit+0xc4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4818      	ldr	r0, [pc, #96]	; (8000f58 <HAL_CAN_MspInit+0xc8>)
 8000ef6:	f001 fec5 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4812      	ldr	r0, [pc, #72]	; (8000f58 <HAL_CAN_MspInit+0xc8>)
 8000f10:	f001 feb8 	bl	8002c84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_CAN_MspInit+0xcc>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_CAN_MspInit+0xcc>)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2014      	movs	r0, #20
 8000f3e:	f001 fa76 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f42:	2014      	movs	r0, #20
 8000f44:	f001 fa8f 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40006400 	.word	0x40006400
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	40010000 	.word	0x40010000

08000f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_DMA_Init+0x38>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <MX_DMA_Init+0x38>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_DMA_Init+0x38>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200e      	movs	r0, #14
 8000f84:	f001 fa53 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f88:	200e      	movs	r0, #14
 8000f8a:	f001 fa6c 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a29      	ldr	r2, [pc, #164]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fce:	f043 0320 	orr.w	r3, r3, #32
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_GPIO_Init+0xc0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_GPIO_Init+0xc0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_GPIO_Init+0xc0>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_GPIO_Init+0xc0>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f242 0120 	movw	r1, #8224	; 0x2020
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_GPIO_Init+0xc4>)
 8001018:	f001 ffdf 	bl	8002fda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 800101c:	f242 0320 	movw	r3, #8224	; 0x2020
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4619      	mov	r1, r3
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <MX_GPIO_Init+0xc4>)
 8001036:	f001 fe25 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800103a:	2304      	movs	r3, #4
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_GPIO_Init+0xc8>)
 800104e:	f001 fe19 	bl	8002c84 <HAL_GPIO_Init>

}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40011000 	.word	0x40011000
 8001064:	40011400 	.word	0x40011400

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fa46 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f80d 	bl	800108e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f7ff ff92 	bl	8000f9c <MX_GPIO_Init>
  MX_CAN_Init();
 8001078:	f7ff fed4 	bl	8000e24 <MX_CAN_Init>
  MX_DMA_Init();
 800107c:	f7ff ff70 	bl	8000f60 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001080:	f000 f96e 	bl	8001360 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8001084:	f7ff f8e8 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8001088:	f7ff f90c 	bl	80002a4 <Bsp_Loop>
 800108c:	e7fc      	b.n	8001088 <main+0x20>

0800108e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b090      	sub	sp, #64	; 0x40
 8001092:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	2228      	movs	r2, #40	; 0x28
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f003 f949 	bl	8004334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010be:	2301      	movs	r3, #1
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 ffb0 	bl	800303c <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010e2:	f000 f819 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2302      	movs	r3, #2
 80010ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2102      	movs	r1, #2
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fa1d 	bl	8003540 <HAL_RCC_ClockConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800110c:	f000 f804 	bl	8001118 <Error_Handler>
  }
}
 8001110:	bf00      	nop
 8001112:	3740      	adds	r7, #64	; 0x40
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_MspInit+0x5c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x5c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_MspInit+0x60>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_MspInit+0x60>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 f9db 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DMA1_Channel4_IRQHandler+0x10>)
 80011de:	f001 fb15 	bl	800280c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000188 	.word	0x20000188

080011ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011f2:	f000 fe21 	bl	8001e38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000118 	.word	0x20000118

08001200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART1_IRQHandler+0x10>)
 8001206:	f002 fc43 	bl	8003a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000144 	.word	0x20000144

08001214 <_read>:
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e00a      	b.n	800123c <_read+0x28>
 8001226:	f3af 8000 	nop.w
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbf0      	blt.n	8001226 <_read+0x12>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_write>:
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e009      	b.n	8001274 <_write+0x26>
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fdc9 	bl	8000e00 <__io_putchar>
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf1      	blt.n	8001260 <_write+0x12>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_close>:
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <_fstat>:
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	2300      	movs	r3, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <_isatty>:
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	2301      	movs	r3, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <_lseek>:
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	2300      	movs	r3, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
 8001318:	f002 ffe2 	bl	80042e0 <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000c000 	.word	0x2000c000
 8001348:	00000400 	.word	0x00000400
 800134c:	20000140 	.word	0x20000140
 8001350:	200001e0 	.word	0x200001e0

08001354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART1_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001398:	f002 fa6a 	bl	8003870 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f7ff feb9 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000144 	.word	0x20000144
 80013b0:	40013800 	.word	0x40013800

080013b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <HAL_UART_MspInit+0xe8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d15f      	bne.n	8001494 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_UART_MspInit+0xec>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <HAL_UART_MspInit+0xec>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <HAL_UART_MspInit+0xec>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_UART_MspInit+0xec>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_UART_MspInit+0xec>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_UART_MspInit+0xec>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	4822      	ldr	r0, [pc, #136]	; (80014a4 <HAL_UART_MspInit+0xf0>)
 800141a:	f001 fc33 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4619      	mov	r1, r3
 8001432:	481c      	ldr	r0, [pc, #112]	; (80014a4 <HAL_UART_MspInit+0xf0>)
 8001434:	f001 fc26 	bl	8002c84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <HAL_UART_MspInit+0xf8>)
 800143c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 8001440:	2210      	movs	r2, #16
 8001442:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 800146a:	f001 f817 	bl	800249c <HAL_DMA_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001474:	f7ff fe50 	bl	8001118 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_UART_MspInit+0xf4>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2025      	movs	r0, #37	; 0x25
 800148a:	f000 ffd0 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800148e:	2025      	movs	r0, #37	; 0x25
 8001490:	f000 ffe9 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40013800 	.word	0x40013800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	20000188 	.word	0x20000188
 80014ac:	40020044 	.word	0x40020044

080014b0 <Reset_Handler>:
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopFillZerobss+0x12>)
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopFillZerobss+0x1a>)
 80014b6:	2300      	movs	r3, #0
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:
 80014ba:	58d4      	ldr	r4, [r2, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:
 80014c0:	18c4      	adds	r4, r0, r3
 80014c2:	428c      	cmp	r4, r1
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopFillZerobss+0x1e>)
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopFillZerobss+0x22>)
 80014ca:	2300      	movs	r3, #0
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:
 80014d2:	42a2      	cmp	r2, r4
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>
 80014d6:	f7ff ff3d 	bl	8001354 <SystemInit>
 80014da:	f002 ff07 	bl	80042ec <__libc_init_array>
 80014de:	f7ff fdc3 	bl	8001068 <main>
 80014e2:	4770      	bx	lr
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000074 	.word	0x20000074
 80014ec:	080054b0 	.word	0x080054b0
 80014f0:	20000074 	.word	0x20000074
 80014f4:	200001e0 	.word	0x200001e0

080014f8 <ADC1_2_IRQHandler>:
 80014f8:	e7fe      	b.n	80014f8 <ADC1_2_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x28>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x28>)
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 ff83 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fe04 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 ff9b 	bl	8002482 <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 ff63 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000004 	.word	0x20000004
 8001580:	2000000c 	.word	0x2000000c
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x1c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x20>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x20>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	200001cc 	.word	0x200001cc

080015ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_GetTick+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	200001cc 	.word	0x200001cc

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff fff0 	bl	80015ac <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_Delay+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e6:	bf00      	nop
 80015e8:	f7ff ffe0 	bl	80015ac <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000000c 	.word	0x2000000c

08001608 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0ed      	b.n	80017f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fc32 	bl	8000e90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163c:	f7ff ffb6 	bl	80015ac <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001642:	e012      	b.n	800166a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001644:	f7ff ffb2 	bl	80015ac <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b0a      	cmp	r3, #10
 8001650:	d90b      	bls.n	800166a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2205      	movs	r2, #5
 8001662:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0c5      	b.n	80017f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0e5      	beq.n	8001644 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0202 	bic.w	r2, r2, #2
 8001686:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001688:	f7ff ff90 	bl	80015ac <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800168e:	e012      	b.n	80016b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001690:	f7ff ff8c 	bl	80015ac <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b0a      	cmp	r3, #10
 800169c:	d90b      	bls.n	80016b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2205      	movs	r2, #5
 80016ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e09f      	b.n	80017f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e5      	bne.n	8001690 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7e1b      	ldrb	r3, [r3, #24]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d108      	bne.n	80016de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e007      	b.n	80016ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7e5b      	ldrb	r3, [r3, #25]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e007      	b.n	8001718 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7e9b      	ldrb	r3, [r3, #26]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0220 	orr.w	r2, r2, #32
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e007      	b.n	8001742 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0220 	bic.w	r2, r2, #32
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7edb      	ldrb	r3, [r3, #27]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0210 	bic.w	r2, r2, #16
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e007      	b.n	800176c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0210 	orr.w	r2, r2, #16
 800176a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7f1b      	ldrb	r3, [r3, #28]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0208 	orr.w	r2, r2, #8
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e007      	b.n	8001796 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0208 	bic.w	r2, r2, #8
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7f5b      	ldrb	r3, [r3, #29]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0204 	orr.w	r2, r2, #4
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0204 	bic.w	r2, r2, #4
 80017be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	ea42 0103 	orr.w	r1, r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017fe:	b480      	push	{r7}
 8001800:	b087      	sub	sp, #28
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001814:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d003      	beq.n	8001824 <HAL_CAN_ConfigFilter+0x26>
 800181c:	7cfb      	ldrb	r3, [r7, #19]
 800181e:	2b02      	cmp	r3, #2
 8001820:	f040 80aa 	bne.w	8001978 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2201      	movs	r2, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d123      	bne.n	80018a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	401a      	ands	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001880:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3248      	adds	r2, #72	; 0x48
 8001886:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800189a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800189c:	6979      	ldr	r1, [r7, #20]
 800189e:	3348      	adds	r3, #72	; 0x48
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d122      	bne.n	80018f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3248      	adds	r2, #72	; 0x48
 80018d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ea:	6979      	ldr	r1, [r7, #20]
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800190e:	e007      	b.n	8001920 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800193a:	e007      	b.n	800194c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d107      	bne.n	8001964 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800196a:	f023 0201 	bic.w	r2, r3, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	e006      	b.n	8001986 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d12e      	bne.n	8001a02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fdf6 	bl	80015ac <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019c2:	e012      	b.n	80019ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019c4:	f7ff fdf2 	bl	80015ac <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b0a      	cmp	r3, #10
 80019d0:	d90b      	bls.n	80019ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2205      	movs	r2, #5
 80019e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e012      	b.n	8001a10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e5      	bne.n	80019c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e006      	b.n	8001a10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
  }
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a36:	7ffb      	ldrb	r3, [r7, #31]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d003      	beq.n	8001a44 <HAL_CAN_AddTxMessage+0x2c>
 8001a3c:	7ffb      	ldrb	r3, [r7, #31]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	f040 80b8 	bne.w	8001bb4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80a0 	beq.w	8001ba4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	0e1b      	lsrs	r3, r3, #24
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d907      	bls.n	8001a84 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e09e      	b.n	8001bc2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a84:	2201      	movs	r2, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aa0:	68f9      	ldr	r1, [r7, #12]
 8001aa2:	6809      	ldr	r1, [r1, #0]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	440b      	add	r3, r1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e00f      	b.n	8001ad2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001abc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ac6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3318      	adds	r3, #24
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	440b      	add	r3, r1
 8001ad0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3318      	adds	r3, #24
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	7d1b      	ldrb	r3, [r3, #20]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d111      	bne.n	8001b12 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3318      	adds	r3, #24
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	4413      	add	r3, r2
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	6811      	ldr	r1, [r2, #0]
 8001b02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3318      	adds	r3, #24
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3304      	adds	r3, #4
 8001b10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3307      	adds	r3, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	061a      	lsls	r2, r3, #24
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3306      	adds	r3, #6
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3305      	adds	r3, #5
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	3204      	adds	r2, #4
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	4610      	mov	r0, r2
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	6811      	ldr	r1, [r2, #0]
 8001b3a:	ea43 0200 	orr.w	r2, r3, r0
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	440b      	add	r3, r1
 8001b44:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3303      	adds	r3, #3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	061a      	lsls	r2, r3, #24
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3302      	adds	r3, #2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	4313      	orrs	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	6811      	ldr	r1, [r2, #0]
 8001b70:	ea43 0200 	orr.w	r2, r3, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	440b      	add	r3, r1
 8001b7a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3318      	adds	r3, #24
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	4413      	add	r3, r2
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	6811      	ldr	r1, [r2, #0]
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3318      	adds	r3, #24
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	440b      	add	r3, r1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e00e      	b.n	8001bc2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e006      	b.n	8001bc2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
  }
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d003      	beq.n	8001bf0 <HAL_CAN_GetRxMessage+0x24>
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	f040 80f3 	bne.w	8001dd6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10e      	bne.n	8001c14 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d116      	bne.n	8001c32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0e7      	b.n	8001de4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0d8      	b.n	8001de4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0204 	and.w	r2, r3, #4
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10c      	bne.n	8001c6a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	331b      	adds	r3, #27
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0d5b      	lsrs	r3, r3, #21
 8001c60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e00b      	b.n	8001c82 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	331b      	adds	r3, #27
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	331b      	adds	r3, #27
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0202 	and.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	331b      	adds	r3, #27
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	331b      	adds	r3, #27
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	331b      	adds	r3, #27
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0a1a      	lsrs	r2, r3, #8
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0c1a      	lsrs	r2, r3, #16
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3302      	adds	r3, #2
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0e1a      	lsrs	r2, r3, #24
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	3304      	adds	r3, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0a1a      	lsrs	r2, r3, #8
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	3305      	adds	r3, #5
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0c1a      	lsrs	r2, r3, #16
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	3306      	adds	r3, #6
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e1a      	lsrs	r2, r3, #24
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3307      	adds	r3, #7
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d108      	bne.n	8001dc2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0220 	orr.w	r2, r2, #32
 8001dd0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e006      	b.n	8001de4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d002      	beq.n	8001e0c <HAL_CAN_ActivateNotification+0x1e>
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d109      	bne.n	8001e20 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6959      	ldr	r1, [r3, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e006      	b.n	8001e2e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d07c      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f983 	bl	80021a6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ea0:	e016      	b.n	8001ed0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	e00c      	b.n	8001ed0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	e002      	b.n	8001ed0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f986 	bl	80021dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d024      	beq.n	8001f24 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f962 	bl	80021b8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ef4:	e016      	b.n	8001f24 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	e00c      	b.n	8001f24 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d004      	beq.n	8001f1e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1c:	e002      	b.n	8001f24 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f965 	bl	80021ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d024      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f941 	bl	80021ca <HAL_CAN_TxMailbox2CompleteCallback>
 8001f48:	e016      	b.n	8001f78 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5c:	e00c      	b.n	8001f78 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	e002      	b.n	8001f78 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f944 	bl	8002200 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00c      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2210      	movs	r2, #16
 8001f9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f92a 	bl	8002212 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fd08 	bl	80009ec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2208      	movs	r2, #8
 800201a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f90a 	bl	8002236 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8f2 	bl	8002224 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8f3 	bl	8002248 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2208      	movs	r2, #8
 800207c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8eb 	bl	800225a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d07b      	beq.n	8002186 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d072      	beq.n	800217e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d043      	beq.n	800217e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d03e      	beq.n	800217e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002106:	2b60      	cmp	r3, #96	; 0x60
 8002108:	d02b      	beq.n	8002162 <HAL_CAN_IRQHandler+0x32a>
 800210a:	2b60      	cmp	r3, #96	; 0x60
 800210c:	d82e      	bhi.n	800216c <HAL_CAN_IRQHandler+0x334>
 800210e:	2b50      	cmp	r3, #80	; 0x50
 8002110:	d022      	beq.n	8002158 <HAL_CAN_IRQHandler+0x320>
 8002112:	2b50      	cmp	r3, #80	; 0x50
 8002114:	d82a      	bhi.n	800216c <HAL_CAN_IRQHandler+0x334>
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d019      	beq.n	800214e <HAL_CAN_IRQHandler+0x316>
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d826      	bhi.n	800216c <HAL_CAN_IRQHandler+0x334>
 800211e:	2b30      	cmp	r3, #48	; 0x30
 8002120:	d010      	beq.n	8002144 <HAL_CAN_IRQHandler+0x30c>
 8002122:	2b30      	cmp	r3, #48	; 0x30
 8002124:	d822      	bhi.n	800216c <HAL_CAN_IRQHandler+0x334>
 8002126:	2b10      	cmp	r3, #16
 8002128:	d002      	beq.n	8002130 <HAL_CAN_IRQHandler+0x2f8>
 800212a:	2b20      	cmp	r3, #32
 800212c:	d005      	beq.n	800213a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800212e:	e01d      	b.n	800216c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002138:	e019      	b.n	800216e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002142:	e014      	b.n	800216e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	f043 0320 	orr.w	r3, r3, #32
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214c:	e00f      	b.n	800216e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002156:	e00a      	b.n	800216e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002160:	e005      	b.n	800216e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800216a:	e000      	b.n	800216e <HAL_CAN_IRQHandler+0x336>
            break;
 800216c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800217c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f867 	bl	800226c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
	...

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4906      	ldr	r1, [pc, #24]	; (8002318 <__NVIC_EnableIRQ+0x34>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff90 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff2d 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff42 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff90 	bl	8002370 <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5f 	bl	800231c <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff35 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e059      	b.n	8002566 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_DMA_Init+0xd4>)
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d80f      	bhi.n	80024de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_DMA_Init+0xd8>)
 80024c6:	4413      	add	r3, r2
 80024c8:	4a2b      	ldr	r2, [pc, #172]	; (8002578 <HAL_DMA_Init+0xdc>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	009a      	lsls	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a28      	ldr	r2, [pc, #160]	; (800257c <HAL_DMA_Init+0xe0>)
 80024da:	63da      	str	r2, [r3, #60]	; 0x3c
 80024dc:	e00e      	b.n	80024fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_DMA_Init+0xe4>)
 80024e6:	4413      	add	r3, r2
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <HAL_DMA_Init+0xdc>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	009a      	lsls	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_DMA_Init+0xe8>)
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002512:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002516:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	40020407 	.word	0x40020407
 8002574:	bffdfff8 	.word	0xbffdfff8
 8002578:	cccccccd 	.word	0xcccccccd
 800257c:	40020000 	.word	0x40020000
 8002580:	bffdfbf8 	.word	0xbffdfbf8
 8002584:	40020400 	.word	0x40020400

08002588 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800259a:	2b02      	cmp	r3, #2
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e020      	b.n	80025f2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 020e 	bic.w	r2, r2, #14
 80025be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800260e:	2b02      	cmp	r3, #2
 8002610:	d005      	beq.n	800261e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2204      	movs	r2, #4
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e0d6      	b.n	80027cc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 020e 	bic.w	r2, r2, #14
 800262c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_DMA_Abort_IT+0x1dc>)
 8002646:	429a      	cmp	r2, r3
 8002648:	d958      	bls.n	80026fc <HAL_DMA_Abort_IT+0x100>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_DMA_Abort_IT+0x1e0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d04f      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xf8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a61      	ldr	r2, [pc, #388]	; (80027e0 <HAL_DMA_Abort_IT+0x1e4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d048      	beq.n	80026f0 <HAL_DMA_Abort_IT+0xf4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_DMA_Abort_IT+0x1e8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d040      	beq.n	80026ea <HAL_DMA_Abort_IT+0xee>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a5e      	ldr	r2, [pc, #376]	; (80027e8 <HAL_DMA_Abort_IT+0x1ec>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d038      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xe8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a5d      	ldr	r2, [pc, #372]	; (80027ec <HAL_DMA_Abort_IT+0x1f0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d030      	beq.n	80026de <HAL_DMA_Abort_IT+0xe2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a5b      	ldr	r2, [pc, #364]	; (80027f0 <HAL_DMA_Abort_IT+0x1f4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d028      	beq.n	80026d8 <HAL_DMA_Abort_IT+0xdc>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a53      	ldr	r2, [pc, #332]	; (80027d8 <HAL_DMA_Abort_IT+0x1dc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d020      	beq.n	80026d2 <HAL_DMA_Abort_IT+0xd6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_DMA_Abort_IT+0x1f8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d019      	beq.n	80026ce <HAL_DMA_Abort_IT+0xd2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_DMA_Abort_IT+0x1fc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d012      	beq.n	80026ca <HAL_DMA_Abort_IT+0xce>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_DMA_Abort_IT+0x200>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00a      	beq.n	80026c4 <HAL_DMA_Abort_IT+0xc8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_DMA_Abort_IT+0x204>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d102      	bne.n	80026be <HAL_DMA_Abort_IT+0xc2>
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	e01b      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c2:	e018      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c8:	e015      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026ca:	2310      	movs	r3, #16
 80026cc:	e013      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e011      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d6:	e00e      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026dc:	e00b      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e2:	e008      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e8:	e005      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ee:	e002      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026f0:	2310      	movs	r3, #16
 80026f2:	e000      	b.n	80026f6 <HAL_DMA_Abort_IT+0xfa>
 80026f4:	2301      	movs	r3, #1
 80026f6:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_DMA_Abort_IT+0x208>)
 80026f8:	6053      	str	r3, [r2, #4]
 80026fa:	e057      	b.n	80027ac <HAL_DMA_Abort_IT+0x1b0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_DMA_Abort_IT+0x1e0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04f      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x1aa>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <HAL_DMA_Abort_IT+0x1e4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d048      	beq.n	80027a2 <HAL_DMA_Abort_IT+0x1a6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a33      	ldr	r2, [pc, #204]	; (80027e4 <HAL_DMA_Abort_IT+0x1e8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d040      	beq.n	800279c <HAL_DMA_Abort_IT+0x1a0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_DMA_Abort_IT+0x1ec>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d038      	beq.n	8002796 <HAL_DMA_Abort_IT+0x19a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a30      	ldr	r2, [pc, #192]	; (80027ec <HAL_DMA_Abort_IT+0x1f0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d030      	beq.n	8002790 <HAL_DMA_Abort_IT+0x194>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <HAL_DMA_Abort_IT+0x1f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d028      	beq.n	800278a <HAL_DMA_Abort_IT+0x18e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a26      	ldr	r2, [pc, #152]	; (80027d8 <HAL_DMA_Abort_IT+0x1dc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d020      	beq.n	8002784 <HAL_DMA_Abort_IT+0x188>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <HAL_DMA_Abort_IT+0x1f8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d019      	beq.n	8002780 <HAL_DMA_Abort_IT+0x184>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <HAL_DMA_Abort_IT+0x1fc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d012      	beq.n	800277c <HAL_DMA_Abort_IT+0x180>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a28      	ldr	r2, [pc, #160]	; (80027fc <HAL_DMA_Abort_IT+0x200>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00a      	beq.n	8002776 <HAL_DMA_Abort_IT+0x17a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <HAL_DMA_Abort_IT+0x204>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d102      	bne.n	8002770 <HAL_DMA_Abort_IT+0x174>
 800276a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276e:	e01b      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 8002770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002774:	e018      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 8002776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277a:	e015      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 800277c:	2310      	movs	r3, #16
 800277e:	e013      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 8002780:	2301      	movs	r3, #1
 8002782:	e011      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 8002784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002788:	e00e      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 800278a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800278e:	e00b      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 8002790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002794:	e008      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 8002796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279a:	e005      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 800279c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a0:	e002      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 80027a2:	2310      	movs	r3, #16
 80027a4:	e000      	b.n	80027a8 <HAL_DMA_Abort_IT+0x1ac>
 80027a6:	2301      	movs	r3, #1
 80027a8:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_DMA_Abort_IT+0x20c>)
 80027aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
    } 
  }
  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40020080 	.word	0x40020080
 80027dc:	40020008 	.word	0x40020008
 80027e0:	4002001c 	.word	0x4002001c
 80027e4:	40020030 	.word	0x40020030
 80027e8:	40020044 	.word	0x40020044
 80027ec:	40020058 	.word	0x40020058
 80027f0:	4002006c 	.word	0x4002006c
 80027f4:	40020408 	.word	0x40020408
 80027f8:	4002041c 	.word	0x4002041c
 80027fc:	40020430 	.word	0x40020430
 8002800:	40020444 	.word	0x40020444
 8002804:	40020400 	.word	0x40020400
 8002808:	40020000 	.word	0x40020000

0800280c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2204      	movs	r2, #4
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80f1 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x20c>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80eb 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0204 	bic.w	r2, r2, #4
 800285e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b5f      	ldr	r3, [pc, #380]	; (80029e4 <HAL_DMA_IRQHandler+0x1d8>)
 8002868:	429a      	cmp	r2, r3
 800286a:	d958      	bls.n	800291e <HAL_DMA_IRQHandler+0x112>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5d      	ldr	r2, [pc, #372]	; (80029e8 <HAL_DMA_IRQHandler+0x1dc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04f      	beq.n	8002916 <HAL_DMA_IRQHandler+0x10a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5c      	ldr	r2, [pc, #368]	; (80029ec <HAL_DMA_IRQHandler+0x1e0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d048      	beq.n	8002912 <HAL_DMA_IRQHandler+0x106>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5a      	ldr	r2, [pc, #360]	; (80029f0 <HAL_DMA_IRQHandler+0x1e4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_IRQHandler+0x100>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a59      	ldr	r2, [pc, #356]	; (80029f4 <HAL_DMA_IRQHandler+0x1e8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d038      	beq.n	8002906 <HAL_DMA_IRQHandler+0xfa>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a57      	ldr	r2, [pc, #348]	; (80029f8 <HAL_DMA_IRQHandler+0x1ec>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d030      	beq.n	8002900 <HAL_DMA_IRQHandler+0xf4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a56      	ldr	r2, [pc, #344]	; (80029fc <HAL_DMA_IRQHandler+0x1f0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d028      	beq.n	80028fa <HAL_DMA_IRQHandler+0xee>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_DMA_IRQHandler+0x1d8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d020      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xe8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <HAL_DMA_IRQHandler+0x1f4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d019      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xe4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a50      	ldr	r2, [pc, #320]	; (8002a04 <HAL_DMA_IRQHandler+0x1f8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d012      	beq.n	80028ec <HAL_DMA_IRQHandler+0xe0>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <HAL_DMA_IRQHandler+0x1fc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00a      	beq.n	80028e6 <HAL_DMA_IRQHandler+0xda>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_DMA_IRQHandler+0x200>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d102      	bne.n	80028e0 <HAL_DMA_IRQHandler+0xd4>
 80028da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028de:	e01b      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 80028e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028e4:	e018      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 80028e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ea:	e015      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 80028ec:	2340      	movs	r3, #64	; 0x40
 80028ee:	e013      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e011      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 80028f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028f8:	e00e      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 80028fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028fe:	e00b      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 8002900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002904:	e008      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 8002906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800290a:	e005      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 800290c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002910:	e002      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 8002912:	2340      	movs	r3, #64	; 0x40
 8002914:	e000      	b.n	8002918 <HAL_DMA_IRQHandler+0x10c>
 8002916:	2304      	movs	r3, #4
 8002918:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <HAL_DMA_IRQHandler+0x204>)
 800291a:	6053      	str	r3, [r2, #4]
 800291c:	e057      	b.n	80029ce <HAL_DMA_IRQHandler+0x1c2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	; (80029e8 <HAL_DMA_IRQHandler+0x1dc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d04f      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x1bc>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2f      	ldr	r2, [pc, #188]	; (80029ec <HAL_DMA_IRQHandler+0x1e0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d048      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x1b8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2e      	ldr	r2, [pc, #184]	; (80029f0 <HAL_DMA_IRQHandler+0x1e4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d040      	beq.n	80029be <HAL_DMA_IRQHandler+0x1b2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2c      	ldr	r2, [pc, #176]	; (80029f4 <HAL_DMA_IRQHandler+0x1e8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d038      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x1ac>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <HAL_DMA_IRQHandler+0x1ec>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d030      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x1a6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_DMA_IRQHandler+0x1f0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d028      	beq.n	80029ac <HAL_DMA_IRQHandler+0x1a0>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <HAL_DMA_IRQHandler+0x1d8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d020      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x19a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_DMA_IRQHandler+0x1f4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x196>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_DMA_IRQHandler+0x1f8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d012      	beq.n	800299e <HAL_DMA_IRQHandler+0x192>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_DMA_IRQHandler+0x1fc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00a      	beq.n	8002998 <HAL_DMA_IRQHandler+0x18c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <HAL_DMA_IRQHandler+0x200>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d102      	bne.n	8002992 <HAL_DMA_IRQHandler+0x186>
 800298c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002990:	e01b      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 8002992:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002996:	e018      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 8002998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299c:	e015      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 800299e:	2340      	movs	r3, #64	; 0x40
 80029a0:	e013      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029a2:	2304      	movs	r3, #4
 80029a4:	e011      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029aa:	e00e      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b0:	e00b      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029b6:	e008      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029bc:	e005      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c2:	e002      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029c4:	2340      	movs	r3, #64	; 0x40
 80029c6:	e000      	b.n	80029ca <HAL_DMA_IRQHandler+0x1be>
 80029c8:	2304      	movs	r3, #4
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_DMA_IRQHandler+0x208>)
 80029cc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8136 	beq.w	8002c44 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	e130      	b.n	8002c44 <HAL_DMA_IRQHandler+0x438>
 80029e2:	bf00      	nop
 80029e4:	40020080 	.word	0x40020080
 80029e8:	40020008 	.word	0x40020008
 80029ec:	4002001c 	.word	0x4002001c
 80029f0:	40020030 	.word	0x40020030
 80029f4:	40020044 	.word	0x40020044
 80029f8:	40020058 	.word	0x40020058
 80029fc:	4002006c 	.word	0x4002006c
 8002a00:	40020408 	.word	0x40020408
 8002a04:	4002041c 	.word	0x4002041c
 8002a08:	40020430 	.word	0x40020430
 8002a0c:	40020444 	.word	0x40020444
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80dd 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x3d8>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80d7 	beq.w	8002be4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 020a 	bic.w	r2, r2, #10
 8002a52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b7b      	ldr	r3, [pc, #492]	; (8002c50 <HAL_DMA_IRQHandler+0x444>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d958      	bls.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <HAL_DMA_IRQHandler+0x448>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d04f      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x306>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a78      	ldr	r2, [pc, #480]	; (8002c58 <HAL_DMA_IRQHandler+0x44c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d048      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x302>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a76      	ldr	r2, [pc, #472]	; (8002c5c <HAL_DMA_IRQHandler+0x450>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d040      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x2fc>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a75      	ldr	r2, [pc, #468]	; (8002c60 <HAL_DMA_IRQHandler+0x454>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d038      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x2f6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a73      	ldr	r2, [pc, #460]	; (8002c64 <HAL_DMA_IRQHandler+0x458>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d030      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2f0>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a72      	ldr	r2, [pc, #456]	; (8002c68 <HAL_DMA_IRQHandler+0x45c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d028      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x2ea>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a69      	ldr	r2, [pc, #420]	; (8002c50 <HAL_DMA_IRQHandler+0x444>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d020      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x2e4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6e      	ldr	r2, [pc, #440]	; (8002c6c <HAL_DMA_IRQHandler+0x460>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d019      	beq.n	8002aec <HAL_DMA_IRQHandler+0x2e0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6c      	ldr	r2, [pc, #432]	; (8002c70 <HAL_DMA_IRQHandler+0x464>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d012      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x2dc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6b      	ldr	r2, [pc, #428]	; (8002c74 <HAL_DMA_IRQHandler+0x468>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00a      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x2d6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_DMA_IRQHandler+0x46c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d102      	bne.n	8002adc <HAL_DMA_IRQHandler+0x2d0>
 8002ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ada:	e01b      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae0:	e018      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae6:	e015      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e013      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e011      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002af0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af4:	e00e      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002af6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002afa:	e00b      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b00:	e008      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b06:	e005      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0c:	e002      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e000      	b.n	8002b14 <HAL_DMA_IRQHandler+0x308>
 8002b12:	2302      	movs	r3, #2
 8002b14:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <HAL_DMA_IRQHandler+0x470>)
 8002b16:	6053      	str	r3, [r2, #4]
 8002b18:	e057      	b.n	8002bca <HAL_DMA_IRQHandler+0x3be>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a4d      	ldr	r2, [pc, #308]	; (8002c54 <HAL_DMA_IRQHandler+0x448>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04f      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x3b8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a4b      	ldr	r2, [pc, #300]	; (8002c58 <HAL_DMA_IRQHandler+0x44c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d048      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0x3b4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4a      	ldr	r2, [pc, #296]	; (8002c5c <HAL_DMA_IRQHandler+0x450>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d040      	beq.n	8002bba <HAL_DMA_IRQHandler+0x3ae>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a48      	ldr	r2, [pc, #288]	; (8002c60 <HAL_DMA_IRQHandler+0x454>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d038      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x3a8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a47      	ldr	r2, [pc, #284]	; (8002c64 <HAL_DMA_IRQHandler+0x458>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d030      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3a2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a45      	ldr	r2, [pc, #276]	; (8002c68 <HAL_DMA_IRQHandler+0x45c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d028      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x39c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <HAL_DMA_IRQHandler+0x444>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d020      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x396>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a41      	ldr	r2, [pc, #260]	; (8002c6c <HAL_DMA_IRQHandler+0x460>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x392>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a40      	ldr	r2, [pc, #256]	; (8002c70 <HAL_DMA_IRQHandler+0x464>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d012      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x38e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <HAL_DMA_IRQHandler+0x468>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x388>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <HAL_DMA_IRQHandler+0x46c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d102      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x382>
 8002b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b8c:	e01b      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b92:	e018      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b98:	e015      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e013      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e011      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba6:	e00e      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002ba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bac:	e00b      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb2:	e008      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb8:	e005      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bbe:	e002      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e000      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x3ba>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	4a2e      	ldr	r2, [pc, #184]	; (8002c80 <HAL_DMA_IRQHandler+0x474>)
 8002bc8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d034      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002be2:	e02f      	b.n	8002c44 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	2208      	movs	r2, #8
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d028      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x43a>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d023      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 020e 	bic.w	r2, r2, #14
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
    }
  }
  return;
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
}
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40020080 	.word	0x40020080
 8002c54:	40020008 	.word	0x40020008
 8002c58:	4002001c 	.word	0x4002001c
 8002c5c:	40020030 	.word	0x40020030
 8002c60:	40020044 	.word	0x40020044
 8002c64:	40020058 	.word	0x40020058
 8002c68:	4002006c 	.word	0x4002006c
 8002c6c:	40020408 	.word	0x40020408
 8002c70:	4002041c 	.word	0x4002041c
 8002c74:	40020430 	.word	0x40020430
 8002c78:	40020444 	.word	0x40020444
 8002c7c:	40020400 	.word	0x40020400
 8002c80:	40020000 	.word	0x40020000

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c96:	e179      	b.n	8002f8c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c98:	2201      	movs	r2, #1
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8168 	bne.w	8002f86 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4a96      	ldr	r2, [pc, #600]	; (8002f14 <HAL_GPIO_Init+0x290>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d05e      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002cc0:	4a94      	ldr	r2, [pc, #592]	; (8002f14 <HAL_GPIO_Init+0x290>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d875      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cc6:	4a94      	ldr	r2, [pc, #592]	; (8002f18 <HAL_GPIO_Init+0x294>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d058      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002ccc:	4a92      	ldr	r2, [pc, #584]	; (8002f18 <HAL_GPIO_Init+0x294>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d86f      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cd2:	4a92      	ldr	r2, [pc, #584]	; (8002f1c <HAL_GPIO_Init+0x298>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d052      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002cd8:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <HAL_GPIO_Init+0x298>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d869      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cde:	4a90      	ldr	r2, [pc, #576]	; (8002f20 <HAL_GPIO_Init+0x29c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d04c      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002ce4:	4a8e      	ldr	r2, [pc, #568]	; (8002f20 <HAL_GPIO_Init+0x29c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d863      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cea:	4a8e      	ldr	r2, [pc, #568]	; (8002f24 <HAL_GPIO_Init+0x2a0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d046      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002cf0:	4a8c      	ldr	r2, [pc, #560]	; (8002f24 <HAL_GPIO_Init+0x2a0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d85d      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cf6:	2b12      	cmp	r3, #18
 8002cf8:	d82a      	bhi.n	8002d50 <HAL_GPIO_Init+0xcc>
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d859      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <HAL_GPIO_Init+0x80>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d7f 	.word	0x08002d7f
 8002d08:	08002d59 	.word	0x08002d59
 8002d0c:	08002d6b 	.word	0x08002d6b
 8002d10:	08002dad 	.word	0x08002dad
 8002d14:	08002db3 	.word	0x08002db3
 8002d18:	08002db3 	.word	0x08002db3
 8002d1c:	08002db3 	.word	0x08002db3
 8002d20:	08002db3 	.word	0x08002db3
 8002d24:	08002db3 	.word	0x08002db3
 8002d28:	08002db3 	.word	0x08002db3
 8002d2c:	08002db3 	.word	0x08002db3
 8002d30:	08002db3 	.word	0x08002db3
 8002d34:	08002db3 	.word	0x08002db3
 8002d38:	08002db3 	.word	0x08002db3
 8002d3c:	08002db3 	.word	0x08002db3
 8002d40:	08002db3 	.word	0x08002db3
 8002d44:	08002db3 	.word	0x08002db3
 8002d48:	08002d61 	.word	0x08002d61
 8002d4c:	08002d75 	.word	0x08002d75
 8002d50:	4a75      	ldr	r2, [pc, #468]	; (8002f28 <HAL_GPIO_Init+0x2a4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d56:	e02c      	b.n	8002db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e029      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	3304      	adds	r3, #4
 8002d66:	623b      	str	r3, [r7, #32]
          break;
 8002d68:	e024      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	3308      	adds	r3, #8
 8002d70:	623b      	str	r3, [r7, #32]
          break;
 8002d72:	e01f      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	623b      	str	r3, [r7, #32]
          break;
 8002d7c:	e01a      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d86:	2304      	movs	r3, #4
 8002d88:	623b      	str	r3, [r7, #32]
          break;
 8002d8a:	e013      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d94:	2308      	movs	r3, #8
 8002d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	611a      	str	r2, [r3, #16]
          break;
 8002d9e:	e009      	b.n	8002db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da0:	2308      	movs	r3, #8
 8002da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	615a      	str	r2, [r3, #20]
          break;
 8002daa:	e003      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
          break;
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          break;
 8002db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2bff      	cmp	r3, #255	; 0xff
 8002db8:	d801      	bhi.n	8002dbe <HAL_GPIO_Init+0x13a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	e001      	b.n	8002dc2 <HAL_GPIO_Init+0x13e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2bff      	cmp	r3, #255	; 0xff
 8002dc8:	d802      	bhi.n	8002dd0 <HAL_GPIO_Init+0x14c>
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	e002      	b.n	8002dd6 <HAL_GPIO_Init+0x152>
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	3b08      	subs	r3, #8
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	210f      	movs	r1, #15
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	6a39      	ldr	r1, [r7, #32]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80c1 	beq.w	8002f86 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e04:	4b49      	ldr	r3, [pc, #292]	; (8002f2c <HAL_GPIO_Init+0x2a8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a48      	ldr	r2, [pc, #288]	; (8002f2c <HAL_GPIO_Init+0x2a8>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <HAL_GPIO_Init+0x2a8>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e1c:	4a44      	ldr	r2, [pc, #272]	; (8002f30 <HAL_GPIO_Init+0x2ac>)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	220f      	movs	r2, #15
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <HAL_GPIO_Init+0x2b0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d01f      	beq.n	8002e88 <HAL_GPIO_Init+0x204>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <HAL_GPIO_Init+0x2b4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d019      	beq.n	8002e84 <HAL_GPIO_Init+0x200>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3a      	ldr	r2, [pc, #232]	; (8002f3c <HAL_GPIO_Init+0x2b8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_GPIO_Init+0x1fc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a39      	ldr	r2, [pc, #228]	; (8002f40 <HAL_GPIO_Init+0x2bc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00d      	beq.n	8002e7c <HAL_GPIO_Init+0x1f8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a38      	ldr	r2, [pc, #224]	; (8002f44 <HAL_GPIO_Init+0x2c0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <HAL_GPIO_Init+0x1f4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_GPIO_Init+0x1f0>
 8002e70:	2305      	movs	r3, #5
 8002e72:	e00a      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e74:	2306      	movs	r3, #6
 8002e76:	e008      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e006      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e004      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e002      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	f002 0203 	and.w	r2, r2, #3
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4093      	lsls	r3, r2
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_GPIO_Init+0x2ac>)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4924      	ldr	r1, [pc, #144]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4920      	ldr	r1, [pc, #128]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	491a      	ldr	r1, [pc, #104]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4916      	ldr	r1, [pc, #88]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d025      	beq.n	8002f50 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4910      	ldr	r1, [pc, #64]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
 8002f10:	e025      	b.n	8002f5e <HAL_GPIO_Init+0x2da>
 8002f12:	bf00      	nop
 8002f14:	10320000 	.word	0x10320000
 8002f18:	10310000 	.word	0x10310000
 8002f1c:	10220000 	.word	0x10220000
 8002f20:	10210000 	.word	0x10210000
 8002f24:	10120000 	.word	0x10120000
 8002f28:	10110000 	.word	0x10110000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40010800 	.word	0x40010800
 8002f38:	40010c00 	.word	0x40010c00
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	40011400 	.word	0x40011400
 8002f44:	40011800 	.word	0x40011800
 8002f48:	40011c00 	.word	0x40011c00
 8002f4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	4913      	ldr	r1, [pc, #76]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60cb      	str	r3, [r1, #12]
 8002f76:	e006      	b.n	8002f86 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4909      	ldr	r1, [pc, #36]	; (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	3301      	adds	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f47f ae7e 	bne.w	8002c98 <HAL_GPIO_Init+0x14>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	372c      	adds	r7, #44	; 0x2c
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e001      	b.n	8002fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	807b      	strh	r3, [r7, #2]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fea:	787b      	ldrb	r3, [r7, #1]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff0:	887a      	ldrh	r2, [r7, #2]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ff6:	e003      	b.n	8003000 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	041a      	lsls	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	611a      	str	r2, [r3, #16]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800301c:	887a      	ldrh	r2, [r7, #2]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4013      	ands	r3, r2
 8003022:	041a      	lsls	r2, r3, #16
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	43d9      	mvns	r1, r3
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	400b      	ands	r3, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e272      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8087 	beq.w	800316a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800305c:	4b92      	ldr	r3, [pc, #584]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b04      	cmp	r3, #4
 8003066:	d00c      	beq.n	8003082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003068:	4b8f      	ldr	r3, [pc, #572]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d112      	bne.n	800309a <HAL_RCC_OscConfig+0x5e>
 8003074:	4b8c      	ldr	r3, [pc, #560]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d10b      	bne.n	800309a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003082:	4b89      	ldr	r3, [pc, #548]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d06c      	beq.n	8003168 <HAL_RCC_OscConfig+0x12c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d168      	bne.n	8003168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e24c      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x76>
 80030a4:	4b80      	ldr	r3, [pc, #512]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7f      	ldr	r2, [pc, #508]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e02e      	b.n	8003110 <HAL_RCC_OscConfig+0xd4>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x98>
 80030ba:	4b7b      	ldr	r3, [pc, #492]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7a      	ldr	r2, [pc, #488]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b78      	ldr	r3, [pc, #480]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a77      	ldr	r2, [pc, #476]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e01d      	b.n	8003110 <HAL_RCC_OscConfig+0xd4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0xbc>
 80030de:	4b72      	ldr	r3, [pc, #456]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a71      	ldr	r2, [pc, #452]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b6f      	ldr	r3, [pc, #444]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6e      	ldr	r2, [pc, #440]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0xd4>
 80030f8:	4b6b      	ldr	r3, [pc, #428]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6a      	ldr	r2, [pc, #424]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a67      	ldr	r2, [pc, #412]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 800310a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d013      	beq.n	8003140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe fa48 	bl	80015ac <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fa44 	bl	80015ac <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e200      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b5d      	ldr	r3, [pc, #372]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0xe4>
 800313e:	e014      	b.n	800316a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fa34 	bl	80015ac <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fa30 	bl	80015ac <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1ec      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x10c>
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d063      	beq.n	800323e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003176:	4b4c      	ldr	r3, [pc, #304]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003182:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	2b08      	cmp	r3, #8
 800318c:	d11c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x18c>
 800318e:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d116      	bne.n	80031c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	4b43      	ldr	r3, [pc, #268]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x176>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1c0      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4939      	ldr	r1, [pc, #228]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	e03a      	b.n	800323e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d0:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe f9e9 	bl	80015ac <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7fe f9e5 	bl	80015ac <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1a1      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f0:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4927      	ldr	r1, [pc, #156]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	e015      	b.n	800323e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <HAL_RCC_OscConfig+0x270>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe f9c8 	bl	80015ac <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7fe f9c4 	bl	80015ac <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e180      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03a      	beq.n	80032c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d019      	beq.n	8003286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <HAL_RCC_OscConfig+0x274>)
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003258:	f7fe f9a8 	bl	80015ac <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003260:	f7fe f9a4 	bl	80015ac <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e160      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003272:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800327e:	2001      	movs	r0, #1
 8003280:	f000 fad8 	bl	8003834 <RCC_Delay>
 8003284:	e01c      	b.n	80032c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_RCC_OscConfig+0x274>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328c:	f7fe f98e 	bl	80015ac <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003292:	e00f      	b.n	80032b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe f98a 	bl	80015ac <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d908      	bls.n	80032b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e146      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	42420000 	.word	0x42420000
 80032b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b92      	ldr	r3, [pc, #584]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e9      	bne.n	8003294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80a6 	beq.w	800341a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d2:	4b8b      	ldr	r3, [pc, #556]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4a87      	ldr	r2, [pc, #540]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	61d3      	str	r3, [r2, #28]
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fa:	4b82      	ldr	r3, [pc, #520]	; (8003504 <HAL_RCC_OscConfig+0x4c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d118      	bne.n	8003338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003306:	4b7f      	ldr	r3, [pc, #508]	; (8003504 <HAL_RCC_OscConfig+0x4c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a7e      	ldr	r2, [pc, #504]	; (8003504 <HAL_RCC_OscConfig+0x4c8>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003312:	f7fe f94b 	bl	80015ac <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331a:	f7fe f947 	bl	80015ac <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	; 0x64
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e103      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	4b75      	ldr	r3, [pc, #468]	; (8003504 <HAL_RCC_OscConfig+0x4c8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x312>
 8003340:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a6e      	ldr	r2, [pc, #440]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	e02d      	b.n	80033aa <HAL_RCC_OscConfig+0x36e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x334>
 8003356:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a69      	ldr	r2, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6213      	str	r3, [r2, #32]
 8003362:	4b67      	ldr	r3, [pc, #412]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a66      	ldr	r2, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	6213      	str	r3, [r2, #32]
 800336e:	e01c      	b.n	80033aa <HAL_RCC_OscConfig+0x36e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b05      	cmp	r3, #5
 8003376:	d10c      	bne.n	8003392 <HAL_RCC_OscConfig+0x356>
 8003378:	4b61      	ldr	r3, [pc, #388]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a60      	ldr	r2, [pc, #384]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	e00b      	b.n	80033aa <HAL_RCC_OscConfig+0x36e>
 8003392:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a5a      	ldr	r2, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6213      	str	r3, [r2, #32]
 800339e:	4b58      	ldr	r3, [pc, #352]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a57      	ldr	r2, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d015      	beq.n	80033de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7fe f8fb 	bl	80015ac <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fe f8f7 	bl	80015ac <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e0b1      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ee      	beq.n	80033ba <HAL_RCC_OscConfig+0x37e>
 80033dc:	e014      	b.n	8003408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033de:	f7fe f8e5 	bl	80015ac <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe f8e1 	bl	80015ac <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e09b      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ee      	bne.n	80033e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4a3b      	ldr	r2, [pc, #236]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8087 	beq.w	8003532 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003424:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d061      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d146      	bne.n	80034c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b33      	ldr	r3, [pc, #204]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe f8b5 	bl	80015ac <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe f8b1 	bl	80015ac <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e06d      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003458:	4b29      	ldr	r3, [pc, #164]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d108      	bne.n	8003480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4921      	ldr	r1, [pc, #132]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003480:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a19      	ldr	r1, [r3, #32]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	430b      	orrs	r3, r1
 8003492:	491b      	ldr	r1, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe f885 	bl	80015ac <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe f881 	bl	80015ac <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e03d      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x46a>
 80034c4:	e035      	b.n	8003532 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe f86e 	bl	80015ac <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe f86a 	bl	80015ac <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e026      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x498>
 80034f2:	e01e      	b.n	8003532 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e019      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
 8003508:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x500>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	429a      	cmp	r2, r3
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d001      	beq.n	8003532 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000

08003540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0d0      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d910      	bls.n	8003584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b67      	ldr	r3, [pc, #412]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 0207 	bic.w	r2, r3, #7
 800356a:	4965      	ldr	r1, [pc, #404]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0b8      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	494d      	ldr	r1, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d040      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d115      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e07f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e073      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06b      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b39      	ldr	r3, [pc, #228]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4936      	ldr	r1, [pc, #216]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fd ffbc 	bl	80015ac <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fd ffb8 	bl	80015ac <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e053      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d210      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 0207 	bic.w	r2, r3, #7
 8003676:	4922      	ldr	r1, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e032      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4916      	ldr	r1, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ce:	f000 f821 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	490a      	ldr	r1, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	5ccb      	ldrb	r3, [r1, r3]
 80036e2:	fa22 f303 	lsr.w	r3, r2, r3
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1cc>)
 80036e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1d0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd ff1a 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40022000 	.word	0x40022000
 8003704:	40021000 	.word	0x40021000
 8003708:	080053f8 	.word	0x080053f8
 800370c:	20000004 	.word	0x20000004
 8003710:	20000008 	.word	0x20000008

08003714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	b490      	push	{r4, r7}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800371a:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800371c:	1d3c      	adds	r4, r7, #4
 800371e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003724:	f240 2301 	movw	r3, #513	; 0x201
 8003728:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b04      	cmp	r3, #4
 800374c:	d002      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x40>
 800374e:	2b08      	cmp	r3, #8
 8003750:	d003      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x46>
 8003752:	e02b      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003756:	623b      	str	r3, [r7, #32]
      break;
 8003758:	e02b      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	0c9b      	lsrs	r3, r3, #18
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3328      	adds	r3, #40	; 0x28
 8003764:	443b      	add	r3, r7
 8003766:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800376a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	0c5b      	lsrs	r3, r3, #17
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	3328      	adds	r3, #40	; 0x28
 8003782:	443b      	add	r3, r7
 8003784:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003788:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800378e:	fb03 f202 	mul.w	r2, r3, r2
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
 800379a:	e004      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	623b      	str	r3, [r7, #32]
      break;
 80037aa:	e002      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ae:	623b      	str	r3, [r7, #32]
      break;
 80037b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3728      	adds	r7, #40	; 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc90      	pop	{r4, r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	080053e4 	.word	0x080053e4
 80037c4:	40021000 	.word	0x40021000
 80037c8:	007a1200 	.word	0x007a1200
 80037cc:	003d0900 	.word	0x003d0900

080037d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff2 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000
 8003808:	08005408 	.word	0x08005408

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003810:	f7ff ffde 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	0adb      	lsrs	r3, r3, #11
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	08005408 	.word	0x08005408

08003834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <RCC_Delay+0x34>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0a      	ldr	r2, [pc, #40]	; (800386c <RCC_Delay+0x38>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0a5b      	lsrs	r3, r3, #9
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003850:	bf00      	nop
  }
  while (Delay --);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	60fa      	str	r2, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f9      	bne.n	8003850 <RCC_Delay+0x1c>
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	20000004 	.word	0x20000004
 800386c:	10624dd3 	.word	0x10624dd3

08003870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e03f      	b.n	8003902 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fd8c 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fc85 	bl	80041c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08a      	sub	sp, #40	; 0x28
 800390e:	af02      	add	r7, sp, #8
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b20      	cmp	r3, #32
 8003928:	d17c      	bne.n	8003a24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_UART_Transmit+0x2c>
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e075      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_UART_Transmit+0x3e>
 8003944:	2302      	movs	r3, #2
 8003946:	e06e      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2221      	movs	r2, #33	; 0x21
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800395e:	f7fd fe25 	bl	80015ac <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	88fa      	ldrh	r2, [r7, #6]
 800396e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d108      	bne.n	800398c <HAL_UART_Transmit+0x82>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e003      	b.n	8003994 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800399c:	e02a      	b.n	80039f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fa38 	bl	8003e1e <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e036      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	3302      	adds	r3, #2
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	e007      	b.n	80039e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	781a      	ldrb	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	3301      	adds	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1cf      	bne.n	800399e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fa08 	bl	8003e1e <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e006      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d11d      	bne.n	8003a84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_UART_Receive_IT+0x26>
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e016      	b.n	8003a86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Receive_IT+0x38>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e00f      	b.n	8003a86 <HAL_UART_Receive_IT+0x58>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa19 	bl	8003eb2 <UART_Start_Receive_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	e000      	b.n	8003a86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x52>
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fac9 	bl	8004072 <UART_Receive_IT>
      return;
 8003ae0:	e17b      	b.n	8003dda <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80b1 	beq.w	8003c4c <HAL_UART_IRQHandler+0x1bc>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_UART_IRQHandler+0x70>
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80a6 	beq.w	8003c4c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_UART_IRQHandler+0x90>
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0201 	orr.w	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_UART_IRQHandler+0xb0>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0202 	orr.w	r2, r3, #2
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_UART_IRQHandler+0xd0>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00f      	beq.n	8003b8a <HAL_UART_IRQHandler+0xfa>
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <HAL_UART_IRQHandler+0xee>
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0208 	orr.w	r2, r3, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 811e 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <HAL_UART_IRQHandler+0x11e>
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa62 	bl	8004072 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x146>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d031      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9a4 	bl	8003f24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d023      	beq.n	8003c32 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	4a76      	ldr	r2, [pc, #472]	; (8003de0 <HAL_UART_IRQHandler+0x350>)
 8003c08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fcf4 	bl	80025fc <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00e      	b.n	8003c48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8e3 	bl	8003df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00a      	b.n	8003c48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8df 	bl	8003df6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e006      	b.n	8003c48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8db 	bl	8003df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c46:	e0c3      	b.n	8003dd0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	bf00      	nop
    return;
 8003c4a:	e0c1      	b.n	8003dd0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 80a1 	bne.w	8003d98 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 809b 	beq.w	8003d98 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8095 	beq.w	8003d98 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d04e      	beq.n	8003d30 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c9c:	8a3b      	ldrh	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8098 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ca8:	8a3a      	ldrh	r2, [r7, #16]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	f080 8092 	bcs.w	8003dd4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8a3a      	ldrh	r2, [r7, #16]
 8003cb4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d02b      	beq.n	8003d18 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0210 	bic.w	r2, r2, #16
 8003d0c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fc38 	bl	8002588 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f86d 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d2e:	e051      	b.n	8003dd4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d047      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d48:	8a7b      	ldrh	r3, [r7, #18]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d044      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d5c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0210 	bic.w	r2, r2, #16
 8003d8a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d8c:	8a7b      	ldrh	r3, [r7, #18]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f839 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d96:	e01f      	b.n	8003dd8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_UART_IRQHandler+0x324>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f8f9 	bl	8003fa4 <UART_Transmit_IT>
    return;
 8003db2:	e012      	b.n	8003dda <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <HAL_UART_IRQHandler+0x34a>
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f93a 	bl	8004042 <UART_EndTransmit_IT>
    return;
 8003dce:	e004      	b.n	8003dda <HAL_UART_IRQHandler+0x34a>
    return;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_UART_IRQHandler+0x34a>
      return;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_UART_IRQHandler+0x34a>
      return;
 8003dd8:	bf00      	nop
  }
}
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	08003f7d 	.word	0x08003f7d

08003de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2e:	e02c      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d028      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3e:	f7fd fbb5 	bl	80015ac <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d21d      	bcs.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e00f      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d0c3      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2222      	movs	r2, #34	; 0x22
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0220 	orr.w	r2, r2, #32
 8003f16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d107      	bne.n	8003f64 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0210 	bic.w	r2, r2, #16
 8003f62:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff ff2d 	bl	8003df6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b21      	cmp	r3, #33	; 0x21
 8003fb6:	d13e      	bne.n	8004036 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d114      	bne.n	8003fec <UART_Transmit_IT+0x48>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d110      	bne.n	8003fec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]
 8003fea:	e008      	b.n	8003ffe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	1c59      	adds	r1, r3, #1
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6211      	str	r1, [r2, #32]
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4619      	mov	r1, r3
 800400c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004020:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004030:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004058:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff febe 	bl	8003de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b22      	cmp	r3, #34	; 0x22
 8004084:	f040 8099 	bne.w	80041ba <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d117      	bne.n	80040c2 <UART_Receive_IT+0x50>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d113      	bne.n	80040c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	1c9a      	adds	r2, r3, #2
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28
 80040c0:	e026      	b.n	8004110 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d007      	beq.n	80040e6 <UART_Receive_IT+0x74>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <UART_Receive_IT+0x82>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	e008      	b.n	8004106 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004100:	b2da      	uxtb	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29b      	uxth	r3, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4619      	mov	r1, r3
 800411e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004120:	2b00      	cmp	r3, #0
 8004122:	d148      	bne.n	80041b6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0220 	bic.w	r2, r2, #32
 8004132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004142:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	2b01      	cmp	r3, #1
 8004162:	d123      	bne.n	80041ac <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0210 	bic.w	r2, r2, #16
 8004178:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b10      	cmp	r3, #16
 8004186:	d10a      	bne.n	800419e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fe2f 	bl	8003e08 <HAL_UARTEx_RxEventCallback>
 80041aa:	e002      	b.n	80041b2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fc fe11 	bl	8000dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e002      	b.n	80041bc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041fe:	f023 030c 	bic.w	r3, r3, #12
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	430b      	orrs	r3, r1
 800420a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <UART_SetConfig+0x114>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d103      	bne.n	8004234 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800422c:	f7ff faee 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	e002      	b.n	800423a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7ff fad6 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004238:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009a      	lsls	r2, r3, #2
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	4a22      	ldr	r2, [pc, #136]	; (80042dc <UART_SetConfig+0x118>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	0119      	lsls	r1, r3, #4
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <UART_SetConfig+0x118>)
 8004272:	fba3 0302 	umull	r0, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2064      	movs	r0, #100	; 0x64
 800427a:	fb00 f303 	mul.w	r3, r0, r3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	3332      	adds	r3, #50	; 0x32
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <UART_SetConfig+0x118>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004290:	4419      	add	r1, r3
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009a      	lsls	r2, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <UART_SetConfig+0x118>)
 80042aa:	fba3 0302 	umull	r0, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2064      	movs	r0, #100	; 0x64
 80042b2:	fb00 f303 	mul.w	r3, r0, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	3332      	adds	r3, #50	; 0x32
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <UART_SetConfig+0x118>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	f003 020f 	and.w	r2, r3, #15
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	440a      	add	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40013800 	.word	0x40013800
 80042dc:	51eb851f 	.word	0x51eb851f

080042e0 <__errno>:
 80042e0:	4b01      	ldr	r3, [pc, #4]	; (80042e8 <__errno+0x8>)
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000010 	.word	0x20000010

080042ec <__libc_init_array>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	2600      	movs	r6, #0
 80042f0:	4d0c      	ldr	r5, [pc, #48]	; (8004324 <__libc_init_array+0x38>)
 80042f2:	4c0d      	ldr	r4, [pc, #52]	; (8004328 <__libc_init_array+0x3c>)
 80042f4:	1b64      	subs	r4, r4, r5
 80042f6:	10a4      	asrs	r4, r4, #2
 80042f8:	42a6      	cmp	r6, r4
 80042fa:	d109      	bne.n	8004310 <__libc_init_array+0x24>
 80042fc:	f001 f82c 	bl	8005358 <_init>
 8004300:	2600      	movs	r6, #0
 8004302:	4d0a      	ldr	r5, [pc, #40]	; (800432c <__libc_init_array+0x40>)
 8004304:	4c0a      	ldr	r4, [pc, #40]	; (8004330 <__libc_init_array+0x44>)
 8004306:	1b64      	subs	r4, r4, r5
 8004308:	10a4      	asrs	r4, r4, #2
 800430a:	42a6      	cmp	r6, r4
 800430c:	d105      	bne.n	800431a <__libc_init_array+0x2e>
 800430e:	bd70      	pop	{r4, r5, r6, pc}
 8004310:	f855 3b04 	ldr.w	r3, [r5], #4
 8004314:	4798      	blx	r3
 8004316:	3601      	adds	r6, #1
 8004318:	e7ee      	b.n	80042f8 <__libc_init_array+0xc>
 800431a:	f855 3b04 	ldr.w	r3, [r5], #4
 800431e:	4798      	blx	r3
 8004320:	3601      	adds	r6, #1
 8004322:	e7f2      	b.n	800430a <__libc_init_array+0x1e>
 8004324:	080054a8 	.word	0x080054a8
 8004328:	080054a8 	.word	0x080054a8
 800432c:	080054a8 	.word	0x080054a8
 8004330:	080054ac 	.word	0x080054ac

08004334 <memset>:
 8004334:	4603      	mov	r3, r0
 8004336:	4402      	add	r2, r0
 8004338:	4293      	cmp	r3, r2
 800433a:	d100      	bne.n	800433e <memset+0xa>
 800433c:	4770      	bx	lr
 800433e:	f803 1b01 	strb.w	r1, [r3], #1
 8004342:	e7f9      	b.n	8004338 <memset+0x4>

08004344 <iprintf>:
 8004344:	b40f      	push	{r0, r1, r2, r3}
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <iprintf+0x2c>)
 8004348:	b513      	push	{r0, r1, r4, lr}
 800434a:	681c      	ldr	r4, [r3, #0]
 800434c:	b124      	cbz	r4, 8004358 <iprintf+0x14>
 800434e:	69a3      	ldr	r3, [r4, #24]
 8004350:	b913      	cbnz	r3, 8004358 <iprintf+0x14>
 8004352:	4620      	mov	r0, r4
 8004354:	f000 fa5a 	bl	800480c <__sinit>
 8004358:	ab05      	add	r3, sp, #20
 800435a:	4620      	mov	r0, r4
 800435c:	9a04      	ldr	r2, [sp, #16]
 800435e:	68a1      	ldr	r1, [r4, #8]
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	f000 fc5d 	bl	8004c20 <_vfiprintf_r>
 8004366:	b002      	add	sp, #8
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	b004      	add	sp, #16
 800436e:	4770      	bx	lr
 8004370:	20000010 	.word	0x20000010

08004374 <_puts_r>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	460e      	mov	r6, r1
 8004378:	4605      	mov	r5, r0
 800437a:	b118      	cbz	r0, 8004384 <_puts_r+0x10>
 800437c:	6983      	ldr	r3, [r0, #24]
 800437e:	b90b      	cbnz	r3, 8004384 <_puts_r+0x10>
 8004380:	f000 fa44 	bl	800480c <__sinit>
 8004384:	69ab      	ldr	r3, [r5, #24]
 8004386:	68ac      	ldr	r4, [r5, #8]
 8004388:	b913      	cbnz	r3, 8004390 <_puts_r+0x1c>
 800438a:	4628      	mov	r0, r5
 800438c:	f000 fa3e 	bl	800480c <__sinit>
 8004390:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <_puts_r+0xd0>)
 8004392:	429c      	cmp	r4, r3
 8004394:	d120      	bne.n	80043d8 <_puts_r+0x64>
 8004396:	686c      	ldr	r4, [r5, #4]
 8004398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800439a:	07db      	lsls	r3, r3, #31
 800439c:	d405      	bmi.n	80043aa <_puts_r+0x36>
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	0598      	lsls	r0, r3, #22
 80043a2:	d402      	bmi.n	80043aa <_puts_r+0x36>
 80043a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043a6:	f000 facf 	bl	8004948 <__retarget_lock_acquire_recursive>
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	0719      	lsls	r1, r3, #28
 80043ae:	d51d      	bpl.n	80043ec <_puts_r+0x78>
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	b1db      	cbz	r3, 80043ec <_puts_r+0x78>
 80043b4:	3e01      	subs	r6, #1
 80043b6:	68a3      	ldr	r3, [r4, #8]
 80043b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043bc:	3b01      	subs	r3, #1
 80043be:	60a3      	str	r3, [r4, #8]
 80043c0:	bb39      	cbnz	r1, 8004412 <_puts_r+0x9e>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da38      	bge.n	8004438 <_puts_r+0xc4>
 80043c6:	4622      	mov	r2, r4
 80043c8:	210a      	movs	r1, #10
 80043ca:	4628      	mov	r0, r5
 80043cc:	f000 f848 	bl	8004460 <__swbuf_r>
 80043d0:	3001      	adds	r0, #1
 80043d2:	d011      	beq.n	80043f8 <_puts_r+0x84>
 80043d4:	250a      	movs	r5, #10
 80043d6:	e011      	b.n	80043fc <_puts_r+0x88>
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <_puts_r+0xd4>)
 80043da:	429c      	cmp	r4, r3
 80043dc:	d101      	bne.n	80043e2 <_puts_r+0x6e>
 80043de:	68ac      	ldr	r4, [r5, #8]
 80043e0:	e7da      	b.n	8004398 <_puts_r+0x24>
 80043e2:	4b1a      	ldr	r3, [pc, #104]	; (800444c <_puts_r+0xd8>)
 80043e4:	429c      	cmp	r4, r3
 80043e6:	bf08      	it	eq
 80043e8:	68ec      	ldreq	r4, [r5, #12]
 80043ea:	e7d5      	b.n	8004398 <_puts_r+0x24>
 80043ec:	4621      	mov	r1, r4
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 f888 	bl	8004504 <__swsetup_r>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d0dd      	beq.n	80043b4 <_puts_r+0x40>
 80043f8:	f04f 35ff 	mov.w	r5, #4294967295
 80043fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043fe:	07da      	lsls	r2, r3, #31
 8004400:	d405      	bmi.n	800440e <_puts_r+0x9a>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	059b      	lsls	r3, r3, #22
 8004406:	d402      	bmi.n	800440e <_puts_r+0x9a>
 8004408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800440a:	f000 fa9e 	bl	800494a <__retarget_lock_release_recursive>
 800440e:	4628      	mov	r0, r5
 8004410:	bd70      	pop	{r4, r5, r6, pc}
 8004412:	2b00      	cmp	r3, #0
 8004414:	da04      	bge.n	8004420 <_puts_r+0xac>
 8004416:	69a2      	ldr	r2, [r4, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	dc06      	bgt.n	800442a <_puts_r+0xb6>
 800441c:	290a      	cmp	r1, #10
 800441e:	d004      	beq.n	800442a <_puts_r+0xb6>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	6022      	str	r2, [r4, #0]
 8004426:	7019      	strb	r1, [r3, #0]
 8004428:	e7c5      	b.n	80043b6 <_puts_r+0x42>
 800442a:	4622      	mov	r2, r4
 800442c:	4628      	mov	r0, r5
 800442e:	f000 f817 	bl	8004460 <__swbuf_r>
 8004432:	3001      	adds	r0, #1
 8004434:	d1bf      	bne.n	80043b6 <_puts_r+0x42>
 8004436:	e7df      	b.n	80043f8 <_puts_r+0x84>
 8004438:	250a      	movs	r5, #10
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	6022      	str	r2, [r4, #0]
 8004440:	701d      	strb	r5, [r3, #0]
 8004442:	e7db      	b.n	80043fc <_puts_r+0x88>
 8004444:	08005434 	.word	0x08005434
 8004448:	08005454 	.word	0x08005454
 800444c:	08005414 	.word	0x08005414

08004450 <puts>:
 8004450:	4b02      	ldr	r3, [pc, #8]	; (800445c <puts+0xc>)
 8004452:	4601      	mov	r1, r0
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	f7ff bf8d 	b.w	8004374 <_puts_r>
 800445a:	bf00      	nop
 800445c:	20000010 	.word	0x20000010

08004460 <__swbuf_r>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	460e      	mov	r6, r1
 8004464:	4614      	mov	r4, r2
 8004466:	4605      	mov	r5, r0
 8004468:	b118      	cbz	r0, 8004472 <__swbuf_r+0x12>
 800446a:	6983      	ldr	r3, [r0, #24]
 800446c:	b90b      	cbnz	r3, 8004472 <__swbuf_r+0x12>
 800446e:	f000 f9cd 	bl	800480c <__sinit>
 8004472:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <__swbuf_r+0x98>)
 8004474:	429c      	cmp	r4, r3
 8004476:	d12b      	bne.n	80044d0 <__swbuf_r+0x70>
 8004478:	686c      	ldr	r4, [r5, #4]
 800447a:	69a3      	ldr	r3, [r4, #24]
 800447c:	60a3      	str	r3, [r4, #8]
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	071a      	lsls	r2, r3, #28
 8004482:	d52f      	bpl.n	80044e4 <__swbuf_r+0x84>
 8004484:	6923      	ldr	r3, [r4, #16]
 8004486:	b36b      	cbz	r3, 80044e4 <__swbuf_r+0x84>
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	b2f6      	uxtb	r6, r6
 800448e:	1ac0      	subs	r0, r0, r3
 8004490:	6963      	ldr	r3, [r4, #20]
 8004492:	4637      	mov	r7, r6
 8004494:	4283      	cmp	r3, r0
 8004496:	dc04      	bgt.n	80044a2 <__swbuf_r+0x42>
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	f000 f922 	bl	80046e4 <_fflush_r>
 80044a0:	bb30      	cbnz	r0, 80044f0 <__swbuf_r+0x90>
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	3001      	adds	r0, #1
 80044a6:	3b01      	subs	r3, #1
 80044a8:	60a3      	str	r3, [r4, #8]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	6022      	str	r2, [r4, #0]
 80044b0:	701e      	strb	r6, [r3, #0]
 80044b2:	6963      	ldr	r3, [r4, #20]
 80044b4:	4283      	cmp	r3, r0
 80044b6:	d004      	beq.n	80044c2 <__swbuf_r+0x62>
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	07db      	lsls	r3, r3, #31
 80044bc:	d506      	bpl.n	80044cc <__swbuf_r+0x6c>
 80044be:	2e0a      	cmp	r6, #10
 80044c0:	d104      	bne.n	80044cc <__swbuf_r+0x6c>
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 f90d 	bl	80046e4 <_fflush_r>
 80044ca:	b988      	cbnz	r0, 80044f0 <__swbuf_r+0x90>
 80044cc:	4638      	mov	r0, r7
 80044ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <__swbuf_r+0x9c>)
 80044d2:	429c      	cmp	r4, r3
 80044d4:	d101      	bne.n	80044da <__swbuf_r+0x7a>
 80044d6:	68ac      	ldr	r4, [r5, #8]
 80044d8:	e7cf      	b.n	800447a <__swbuf_r+0x1a>
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <__swbuf_r+0xa0>)
 80044dc:	429c      	cmp	r4, r3
 80044de:	bf08      	it	eq
 80044e0:	68ec      	ldreq	r4, [r5, #12]
 80044e2:	e7ca      	b.n	800447a <__swbuf_r+0x1a>
 80044e4:	4621      	mov	r1, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 f80c 	bl	8004504 <__swsetup_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d0cb      	beq.n	8004488 <__swbuf_r+0x28>
 80044f0:	f04f 37ff 	mov.w	r7, #4294967295
 80044f4:	e7ea      	b.n	80044cc <__swbuf_r+0x6c>
 80044f6:	bf00      	nop
 80044f8:	08005434 	.word	0x08005434
 80044fc:	08005454 	.word	0x08005454
 8004500:	08005414 	.word	0x08005414

08004504 <__swsetup_r>:
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <__swsetup_r+0xcc>)
 8004506:	b570      	push	{r4, r5, r6, lr}
 8004508:	681d      	ldr	r5, [r3, #0]
 800450a:	4606      	mov	r6, r0
 800450c:	460c      	mov	r4, r1
 800450e:	b125      	cbz	r5, 800451a <__swsetup_r+0x16>
 8004510:	69ab      	ldr	r3, [r5, #24]
 8004512:	b913      	cbnz	r3, 800451a <__swsetup_r+0x16>
 8004514:	4628      	mov	r0, r5
 8004516:	f000 f979 	bl	800480c <__sinit>
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <__swsetup_r+0xd0>)
 800451c:	429c      	cmp	r4, r3
 800451e:	d10f      	bne.n	8004540 <__swsetup_r+0x3c>
 8004520:	686c      	ldr	r4, [r5, #4]
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004528:	0719      	lsls	r1, r3, #28
 800452a:	d42c      	bmi.n	8004586 <__swsetup_r+0x82>
 800452c:	06dd      	lsls	r5, r3, #27
 800452e:	d411      	bmi.n	8004554 <__swsetup_r+0x50>
 8004530:	2309      	movs	r3, #9
 8004532:	6033      	str	r3, [r6, #0]
 8004534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	81a3      	strh	r3, [r4, #12]
 800453e:	e03e      	b.n	80045be <__swsetup_r+0xba>
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <__swsetup_r+0xd4>)
 8004542:	429c      	cmp	r4, r3
 8004544:	d101      	bne.n	800454a <__swsetup_r+0x46>
 8004546:	68ac      	ldr	r4, [r5, #8]
 8004548:	e7eb      	b.n	8004522 <__swsetup_r+0x1e>
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <__swsetup_r+0xd8>)
 800454c:	429c      	cmp	r4, r3
 800454e:	bf08      	it	eq
 8004550:	68ec      	ldreq	r4, [r5, #12]
 8004552:	e7e6      	b.n	8004522 <__swsetup_r+0x1e>
 8004554:	0758      	lsls	r0, r3, #29
 8004556:	d512      	bpl.n	800457e <__swsetup_r+0x7a>
 8004558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800455a:	b141      	cbz	r1, 800456e <__swsetup_r+0x6a>
 800455c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <__swsetup_r+0x66>
 8004564:	4630      	mov	r0, r6
 8004566:	f000 fa57 	bl	8004a18 <_free_r>
 800456a:	2300      	movs	r3, #0
 800456c:	6363      	str	r3, [r4, #52]	; 0x34
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	2300      	movs	r3, #0
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	b94b      	cbnz	r3, 800459e <__swsetup_r+0x9a>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d003      	beq.n	800459e <__swsetup_r+0x9a>
 8004596:	4621      	mov	r1, r4
 8004598:	4630      	mov	r0, r6
 800459a:	f000 f9fd 	bl	8004998 <__smakebuf_r>
 800459e:	89a0      	ldrh	r0, [r4, #12]
 80045a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045a4:	f010 0301 	ands.w	r3, r0, #1
 80045a8:	d00a      	beq.n	80045c0 <__swsetup_r+0xbc>
 80045aa:	2300      	movs	r3, #0
 80045ac:	60a3      	str	r3, [r4, #8]
 80045ae:	6963      	ldr	r3, [r4, #20]
 80045b0:	425b      	negs	r3, r3
 80045b2:	61a3      	str	r3, [r4, #24]
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	b943      	cbnz	r3, 80045ca <__swsetup_r+0xc6>
 80045b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045bc:	d1ba      	bne.n	8004534 <__swsetup_r+0x30>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	0781      	lsls	r1, r0, #30
 80045c2:	bf58      	it	pl
 80045c4:	6963      	ldrpl	r3, [r4, #20]
 80045c6:	60a3      	str	r3, [r4, #8]
 80045c8:	e7f4      	b.n	80045b4 <__swsetup_r+0xb0>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e7f7      	b.n	80045be <__swsetup_r+0xba>
 80045ce:	bf00      	nop
 80045d0:	20000010 	.word	0x20000010
 80045d4:	08005434 	.word	0x08005434
 80045d8:	08005454 	.word	0x08005454
 80045dc:	08005414 	.word	0x08005414

080045e0 <__sflush_r>:
 80045e0:	898a      	ldrh	r2, [r1, #12]
 80045e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e4:	4605      	mov	r5, r0
 80045e6:	0710      	lsls	r0, r2, #28
 80045e8:	460c      	mov	r4, r1
 80045ea:	d457      	bmi.n	800469c <__sflush_r+0xbc>
 80045ec:	684b      	ldr	r3, [r1, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dc04      	bgt.n	80045fc <__sflush_r+0x1c>
 80045f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dc01      	bgt.n	80045fc <__sflush_r+0x1c>
 80045f8:	2000      	movs	r0, #0
 80045fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fe:	2e00      	cmp	r6, #0
 8004600:	d0fa      	beq.n	80045f8 <__sflush_r+0x18>
 8004602:	2300      	movs	r3, #0
 8004604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004608:	682f      	ldr	r7, [r5, #0]
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	d032      	beq.n	8004674 <__sflush_r+0x94>
 800460e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	075a      	lsls	r2, r3, #29
 8004614:	d505      	bpl.n	8004622 <__sflush_r+0x42>
 8004616:	6863      	ldr	r3, [r4, #4]
 8004618:	1ac0      	subs	r0, r0, r3
 800461a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800461c:	b10b      	cbz	r3, 8004622 <__sflush_r+0x42>
 800461e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004620:	1ac0      	subs	r0, r0, r3
 8004622:	2300      	movs	r3, #0
 8004624:	4602      	mov	r2, r0
 8004626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004628:	4628      	mov	r0, r5
 800462a:	6a21      	ldr	r1, [r4, #32]
 800462c:	47b0      	blx	r6
 800462e:	1c43      	adds	r3, r0, #1
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	d106      	bne.n	8004642 <__sflush_r+0x62>
 8004634:	6829      	ldr	r1, [r5, #0]
 8004636:	291d      	cmp	r1, #29
 8004638:	d82c      	bhi.n	8004694 <__sflush_r+0xb4>
 800463a:	4a29      	ldr	r2, [pc, #164]	; (80046e0 <__sflush_r+0x100>)
 800463c:	40ca      	lsrs	r2, r1
 800463e:	07d6      	lsls	r6, r2, #31
 8004640:	d528      	bpl.n	8004694 <__sflush_r+0xb4>
 8004642:	2200      	movs	r2, #0
 8004644:	6062      	str	r2, [r4, #4]
 8004646:	6922      	ldr	r2, [r4, #16]
 8004648:	04d9      	lsls	r1, r3, #19
 800464a:	6022      	str	r2, [r4, #0]
 800464c:	d504      	bpl.n	8004658 <__sflush_r+0x78>
 800464e:	1c42      	adds	r2, r0, #1
 8004650:	d101      	bne.n	8004656 <__sflush_r+0x76>
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	b903      	cbnz	r3, 8004658 <__sflush_r+0x78>
 8004656:	6560      	str	r0, [r4, #84]	; 0x54
 8004658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800465a:	602f      	str	r7, [r5, #0]
 800465c:	2900      	cmp	r1, #0
 800465e:	d0cb      	beq.n	80045f8 <__sflush_r+0x18>
 8004660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004664:	4299      	cmp	r1, r3
 8004666:	d002      	beq.n	800466e <__sflush_r+0x8e>
 8004668:	4628      	mov	r0, r5
 800466a:	f000 f9d5 	bl	8004a18 <_free_r>
 800466e:	2000      	movs	r0, #0
 8004670:	6360      	str	r0, [r4, #52]	; 0x34
 8004672:	e7c2      	b.n	80045fa <__sflush_r+0x1a>
 8004674:	6a21      	ldr	r1, [r4, #32]
 8004676:	2301      	movs	r3, #1
 8004678:	4628      	mov	r0, r5
 800467a:	47b0      	blx	r6
 800467c:	1c41      	adds	r1, r0, #1
 800467e:	d1c7      	bne.n	8004610 <__sflush_r+0x30>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0c4      	beq.n	8004610 <__sflush_r+0x30>
 8004686:	2b1d      	cmp	r3, #29
 8004688:	d001      	beq.n	800468e <__sflush_r+0xae>
 800468a:	2b16      	cmp	r3, #22
 800468c:	d101      	bne.n	8004692 <__sflush_r+0xb2>
 800468e:	602f      	str	r7, [r5, #0]
 8004690:	e7b2      	b.n	80045f8 <__sflush_r+0x18>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	e7ae      	b.n	80045fa <__sflush_r+0x1a>
 800469c:	690f      	ldr	r7, [r1, #16]
 800469e:	2f00      	cmp	r7, #0
 80046a0:	d0aa      	beq.n	80045f8 <__sflush_r+0x18>
 80046a2:	0793      	lsls	r3, r2, #30
 80046a4:	bf18      	it	ne
 80046a6:	2300      	movne	r3, #0
 80046a8:	680e      	ldr	r6, [r1, #0]
 80046aa:	bf08      	it	eq
 80046ac:	694b      	ldreq	r3, [r1, #20]
 80046ae:	1bf6      	subs	r6, r6, r7
 80046b0:	600f      	str	r7, [r1, #0]
 80046b2:	608b      	str	r3, [r1, #8]
 80046b4:	2e00      	cmp	r6, #0
 80046b6:	dd9f      	ble.n	80045f8 <__sflush_r+0x18>
 80046b8:	4633      	mov	r3, r6
 80046ba:	463a      	mov	r2, r7
 80046bc:	4628      	mov	r0, r5
 80046be:	6a21      	ldr	r1, [r4, #32]
 80046c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80046c4:	47e0      	blx	ip
 80046c6:	2800      	cmp	r0, #0
 80046c8:	dc06      	bgt.n	80046d8 <__sflush_r+0xf8>
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	e790      	b.n	80045fa <__sflush_r+0x1a>
 80046d8:	4407      	add	r7, r0
 80046da:	1a36      	subs	r6, r6, r0
 80046dc:	e7ea      	b.n	80046b4 <__sflush_r+0xd4>
 80046de:	bf00      	nop
 80046e0:	20400001 	.word	0x20400001

080046e4 <_fflush_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	4605      	mov	r5, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	b913      	cbnz	r3, 80046f4 <_fflush_r+0x10>
 80046ee:	2500      	movs	r5, #0
 80046f0:	4628      	mov	r0, r5
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	b118      	cbz	r0, 80046fe <_fflush_r+0x1a>
 80046f6:	6983      	ldr	r3, [r0, #24]
 80046f8:	b90b      	cbnz	r3, 80046fe <_fflush_r+0x1a>
 80046fa:	f000 f887 	bl	800480c <__sinit>
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <_fflush_r+0x6c>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d11b      	bne.n	800473c <_fflush_r+0x58>
 8004704:	686c      	ldr	r4, [r5, #4]
 8004706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ef      	beq.n	80046ee <_fflush_r+0xa>
 800470e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004710:	07d0      	lsls	r0, r2, #31
 8004712:	d404      	bmi.n	800471e <_fflush_r+0x3a>
 8004714:	0599      	lsls	r1, r3, #22
 8004716:	d402      	bmi.n	800471e <_fflush_r+0x3a>
 8004718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471a:	f000 f915 	bl	8004948 <__retarget_lock_acquire_recursive>
 800471e:	4628      	mov	r0, r5
 8004720:	4621      	mov	r1, r4
 8004722:	f7ff ff5d 	bl	80045e0 <__sflush_r>
 8004726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004728:	4605      	mov	r5, r0
 800472a:	07da      	lsls	r2, r3, #31
 800472c:	d4e0      	bmi.n	80046f0 <_fflush_r+0xc>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	d4dd      	bmi.n	80046f0 <_fflush_r+0xc>
 8004734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004736:	f000 f908 	bl	800494a <__retarget_lock_release_recursive>
 800473a:	e7d9      	b.n	80046f0 <_fflush_r+0xc>
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <_fflush_r+0x70>)
 800473e:	429c      	cmp	r4, r3
 8004740:	d101      	bne.n	8004746 <_fflush_r+0x62>
 8004742:	68ac      	ldr	r4, [r5, #8]
 8004744:	e7df      	b.n	8004706 <_fflush_r+0x22>
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <_fflush_r+0x74>)
 8004748:	429c      	cmp	r4, r3
 800474a:	bf08      	it	eq
 800474c:	68ec      	ldreq	r4, [r5, #12]
 800474e:	e7da      	b.n	8004706 <_fflush_r+0x22>
 8004750:	08005434 	.word	0x08005434
 8004754:	08005454 	.word	0x08005454
 8004758:	08005414 	.word	0x08005414

0800475c <std>:
 800475c:	2300      	movs	r3, #0
 800475e:	b510      	push	{r4, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	e9c0 3300 	strd	r3, r3, [r0]
 8004766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800476a:	6083      	str	r3, [r0, #8]
 800476c:	8181      	strh	r1, [r0, #12]
 800476e:	6643      	str	r3, [r0, #100]	; 0x64
 8004770:	81c2      	strh	r2, [r0, #14]
 8004772:	6183      	str	r3, [r0, #24]
 8004774:	4619      	mov	r1, r3
 8004776:	2208      	movs	r2, #8
 8004778:	305c      	adds	r0, #92	; 0x5c
 800477a:	f7ff fddb 	bl	8004334 <memset>
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <std+0x38>)
 8004780:	6224      	str	r4, [r4, #32]
 8004782:	6263      	str	r3, [r4, #36]	; 0x24
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <std+0x3c>)
 8004786:	62a3      	str	r3, [r4, #40]	; 0x28
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <std+0x40>)
 800478a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <std+0x44>)
 800478e:	6323      	str	r3, [r4, #48]	; 0x30
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	080051cd 	.word	0x080051cd
 8004798:	080051ef 	.word	0x080051ef
 800479c:	08005227 	.word	0x08005227
 80047a0:	0800524b 	.word	0x0800524b

080047a4 <_cleanup_r>:
 80047a4:	4901      	ldr	r1, [pc, #4]	; (80047ac <_cleanup_r+0x8>)
 80047a6:	f000 b8af 	b.w	8004908 <_fwalk_reent>
 80047aa:	bf00      	nop
 80047ac:	080046e5 	.word	0x080046e5

080047b0 <__sfmoreglue>:
 80047b0:	2268      	movs	r2, #104	; 0x68
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	1e4d      	subs	r5, r1, #1
 80047b6:	4355      	muls	r5, r2
 80047b8:	460e      	mov	r6, r1
 80047ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047be:	f000 f993 	bl	8004ae8 <_malloc_r>
 80047c2:	4604      	mov	r4, r0
 80047c4:	b140      	cbz	r0, 80047d8 <__sfmoreglue+0x28>
 80047c6:	2100      	movs	r1, #0
 80047c8:	e9c0 1600 	strd	r1, r6, [r0]
 80047cc:	300c      	adds	r0, #12
 80047ce:	60a0      	str	r0, [r4, #8]
 80047d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047d4:	f7ff fdae 	bl	8004334 <memset>
 80047d8:	4620      	mov	r0, r4
 80047da:	bd70      	pop	{r4, r5, r6, pc}

080047dc <__sfp_lock_acquire>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__sfp_lock_acquire+0x8>)
 80047de:	f000 b8b3 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	200001d1 	.word	0x200001d1

080047e8 <__sfp_lock_release>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__sfp_lock_release+0x8>)
 80047ea:	f000 b8ae 	b.w	800494a <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	200001d1 	.word	0x200001d1

080047f4 <__sinit_lock_acquire>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sinit_lock_acquire+0x8>)
 80047f6:	f000 b8a7 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	200001d2 	.word	0x200001d2

08004800 <__sinit_lock_release>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__sinit_lock_release+0x8>)
 8004802:	f000 b8a2 	b.w	800494a <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	200001d2 	.word	0x200001d2

0800480c <__sinit>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
 8004810:	f7ff fff0 	bl	80047f4 <__sinit_lock_acquire>
 8004814:	69a3      	ldr	r3, [r4, #24]
 8004816:	b11b      	cbz	r3, 8004820 <__sinit+0x14>
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f7ff bff0 	b.w	8004800 <__sinit_lock_release>
 8004820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004824:	6523      	str	r3, [r4, #80]	; 0x50
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <__sinit+0x68>)
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <__sinit+0x6c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	62a2      	str	r2, [r4, #40]	; 0x28
 800482e:	42a3      	cmp	r3, r4
 8004830:	bf08      	it	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	4620      	mov	r0, r4
 8004836:	bf08      	it	eq
 8004838:	61a3      	streq	r3, [r4, #24]
 800483a:	f000 f81f 	bl	800487c <__sfp>
 800483e:	6060      	str	r0, [r4, #4]
 8004840:	4620      	mov	r0, r4
 8004842:	f000 f81b 	bl	800487c <__sfp>
 8004846:	60a0      	str	r0, [r4, #8]
 8004848:	4620      	mov	r0, r4
 800484a:	f000 f817 	bl	800487c <__sfp>
 800484e:	2200      	movs	r2, #0
 8004850:	2104      	movs	r1, #4
 8004852:	60e0      	str	r0, [r4, #12]
 8004854:	6860      	ldr	r0, [r4, #4]
 8004856:	f7ff ff81 	bl	800475c <std>
 800485a:	2201      	movs	r2, #1
 800485c:	2109      	movs	r1, #9
 800485e:	68a0      	ldr	r0, [r4, #8]
 8004860:	f7ff ff7c 	bl	800475c <std>
 8004864:	2202      	movs	r2, #2
 8004866:	2112      	movs	r1, #18
 8004868:	68e0      	ldr	r0, [r4, #12]
 800486a:	f7ff ff77 	bl	800475c <std>
 800486e:	2301      	movs	r3, #1
 8004870:	61a3      	str	r3, [r4, #24]
 8004872:	e7d1      	b.n	8004818 <__sinit+0xc>
 8004874:	08005410 	.word	0x08005410
 8004878:	080047a5 	.word	0x080047a5

0800487c <__sfp>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	4607      	mov	r7, r0
 8004880:	f7ff ffac 	bl	80047dc <__sfp_lock_acquire>
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <__sfp+0x84>)
 8004886:	681e      	ldr	r6, [r3, #0]
 8004888:	69b3      	ldr	r3, [r6, #24]
 800488a:	b913      	cbnz	r3, 8004892 <__sfp+0x16>
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ffbd 	bl	800480c <__sinit>
 8004892:	3648      	adds	r6, #72	; 0x48
 8004894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004898:	3b01      	subs	r3, #1
 800489a:	d503      	bpl.n	80048a4 <__sfp+0x28>
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	b30b      	cbz	r3, 80048e4 <__sfp+0x68>
 80048a0:	6836      	ldr	r6, [r6, #0]
 80048a2:	e7f7      	b.n	8004894 <__sfp+0x18>
 80048a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048a8:	b9d5      	cbnz	r5, 80048e0 <__sfp+0x64>
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <__sfp+0x88>)
 80048ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048b0:	60e3      	str	r3, [r4, #12]
 80048b2:	6665      	str	r5, [r4, #100]	; 0x64
 80048b4:	f000 f847 	bl	8004946 <__retarget_lock_init_recursive>
 80048b8:	f7ff ff96 	bl	80047e8 <__sfp_lock_release>
 80048bc:	2208      	movs	r2, #8
 80048be:	4629      	mov	r1, r5
 80048c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	61a5      	str	r5, [r4, #24]
 80048cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048d0:	f7ff fd30 	bl	8004334 <memset>
 80048d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048dc:	4620      	mov	r0, r4
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e0:	3468      	adds	r4, #104	; 0x68
 80048e2:	e7d9      	b.n	8004898 <__sfp+0x1c>
 80048e4:	2104      	movs	r1, #4
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7ff ff62 	bl	80047b0 <__sfmoreglue>
 80048ec:	4604      	mov	r4, r0
 80048ee:	6030      	str	r0, [r6, #0]
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d1d5      	bne.n	80048a0 <__sfp+0x24>
 80048f4:	f7ff ff78 	bl	80047e8 <__sfp_lock_release>
 80048f8:	230c      	movs	r3, #12
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	e7ee      	b.n	80048dc <__sfp+0x60>
 80048fe:	bf00      	nop
 8004900:	08005410 	.word	0x08005410
 8004904:	ffff0001 	.word	0xffff0001

08004908 <_fwalk_reent>:
 8004908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800490c:	4606      	mov	r6, r0
 800490e:	4688      	mov	r8, r1
 8004910:	2700      	movs	r7, #0
 8004912:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800491a:	f1b9 0901 	subs.w	r9, r9, #1
 800491e:	d505      	bpl.n	800492c <_fwalk_reent+0x24>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	2c00      	cmp	r4, #0
 8004924:	d1f7      	bne.n	8004916 <_fwalk_reent+0xe>
 8004926:	4638      	mov	r0, r7
 8004928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800492c:	89ab      	ldrh	r3, [r5, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d907      	bls.n	8004942 <_fwalk_reent+0x3a>
 8004932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004936:	3301      	adds	r3, #1
 8004938:	d003      	beq.n	8004942 <_fwalk_reent+0x3a>
 800493a:	4629      	mov	r1, r5
 800493c:	4630      	mov	r0, r6
 800493e:	47c0      	blx	r8
 8004940:	4307      	orrs	r7, r0
 8004942:	3568      	adds	r5, #104	; 0x68
 8004944:	e7e9      	b.n	800491a <_fwalk_reent+0x12>

08004946 <__retarget_lock_init_recursive>:
 8004946:	4770      	bx	lr

08004948 <__retarget_lock_acquire_recursive>:
 8004948:	4770      	bx	lr

0800494a <__retarget_lock_release_recursive>:
 800494a:	4770      	bx	lr

0800494c <__swhatbuf_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	460e      	mov	r6, r1
 8004950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004954:	4614      	mov	r4, r2
 8004956:	2900      	cmp	r1, #0
 8004958:	461d      	mov	r5, r3
 800495a:	b096      	sub	sp, #88	; 0x58
 800495c:	da08      	bge.n	8004970 <__swhatbuf_r+0x24>
 800495e:	2200      	movs	r2, #0
 8004960:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	061a      	lsls	r2, r3, #24
 8004968:	d410      	bmi.n	800498c <__swhatbuf_r+0x40>
 800496a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496e:	e00e      	b.n	800498e <__swhatbuf_r+0x42>
 8004970:	466a      	mov	r2, sp
 8004972:	f000 fc91 	bl	8005298 <_fstat_r>
 8004976:	2800      	cmp	r0, #0
 8004978:	dbf1      	blt.n	800495e <__swhatbuf_r+0x12>
 800497a:	9a01      	ldr	r2, [sp, #4]
 800497c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004984:	425a      	negs	r2, r3
 8004986:	415a      	adcs	r2, r3
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	e7ee      	b.n	800496a <__swhatbuf_r+0x1e>
 800498c:	2340      	movs	r3, #64	; 0x40
 800498e:	2000      	movs	r0, #0
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	b016      	add	sp, #88	; 0x58
 8004994:	bd70      	pop	{r4, r5, r6, pc}
	...

08004998 <__smakebuf_r>:
 8004998:	898b      	ldrh	r3, [r1, #12]
 800499a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800499c:	079d      	lsls	r5, r3, #30
 800499e:	4606      	mov	r6, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	d507      	bpl.n	80049b4 <__smakebuf_r+0x1c>
 80049a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	2301      	movs	r3, #1
 80049ae:	6163      	str	r3, [r4, #20]
 80049b0:	b002      	add	sp, #8
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	466a      	mov	r2, sp
 80049b6:	ab01      	add	r3, sp, #4
 80049b8:	f7ff ffc8 	bl	800494c <__swhatbuf_r>
 80049bc:	9900      	ldr	r1, [sp, #0]
 80049be:	4605      	mov	r5, r0
 80049c0:	4630      	mov	r0, r6
 80049c2:	f000 f891 	bl	8004ae8 <_malloc_r>
 80049c6:	b948      	cbnz	r0, 80049dc <__smakebuf_r+0x44>
 80049c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049cc:	059a      	lsls	r2, r3, #22
 80049ce:	d4ef      	bmi.n	80049b0 <__smakebuf_r+0x18>
 80049d0:	f023 0303 	bic.w	r3, r3, #3
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	e7e3      	b.n	80049a4 <__smakebuf_r+0xc>
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <__smakebuf_r+0x7c>)
 80049de:	62b3      	str	r3, [r6, #40]	; 0x28
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	6020      	str	r0, [r4, #0]
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	9b00      	ldr	r3, [sp, #0]
 80049ec:	6120      	str	r0, [r4, #16]
 80049ee:	6163      	str	r3, [r4, #20]
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	b15b      	cbz	r3, 8004a0c <__smakebuf_r+0x74>
 80049f4:	4630      	mov	r0, r6
 80049f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049fa:	f000 fc5f 	bl	80052bc <_isatty_r>
 80049fe:	b128      	cbz	r0, 8004a0c <__smakebuf_r+0x74>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	89a0      	ldrh	r0, [r4, #12]
 8004a0e:	4305      	orrs	r5, r0
 8004a10:	81a5      	strh	r5, [r4, #12]
 8004a12:	e7cd      	b.n	80049b0 <__smakebuf_r+0x18>
 8004a14:	080047a5 	.word	0x080047a5

08004a18 <_free_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	d040      	beq.n	8004aa2 <_free_r+0x8a>
 8004a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a24:	1f0c      	subs	r4, r1, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bfb8      	it	lt
 8004a2a:	18e4      	addlt	r4, r4, r3
 8004a2c:	f000 fc76 	bl	800531c <__malloc_lock>
 8004a30:	4a1c      	ldr	r2, [pc, #112]	; (8004aa4 <_free_r+0x8c>)
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	b933      	cbnz	r3, 8004a44 <_free_r+0x2c>
 8004a36:	6063      	str	r3, [r4, #4]
 8004a38:	6014      	str	r4, [r2, #0]
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a40:	f000 bc72 	b.w	8005328 <__malloc_unlock>
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	d908      	bls.n	8004a5a <_free_r+0x42>
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	1821      	adds	r1, r4, r0
 8004a4c:	428b      	cmp	r3, r1
 8004a4e:	bf01      	itttt	eq
 8004a50:	6819      	ldreq	r1, [r3, #0]
 8004a52:	685b      	ldreq	r3, [r3, #4]
 8004a54:	1809      	addeq	r1, r1, r0
 8004a56:	6021      	streq	r1, [r4, #0]
 8004a58:	e7ed      	b.n	8004a36 <_free_r+0x1e>
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	b10b      	cbz	r3, 8004a64 <_free_r+0x4c>
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	d9fa      	bls.n	8004a5a <_free_r+0x42>
 8004a64:	6811      	ldr	r1, [r2, #0]
 8004a66:	1850      	adds	r0, r2, r1
 8004a68:	42a0      	cmp	r0, r4
 8004a6a:	d10b      	bne.n	8004a84 <_free_r+0x6c>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	4401      	add	r1, r0
 8004a70:	1850      	adds	r0, r2, r1
 8004a72:	4283      	cmp	r3, r0
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	d1e0      	bne.n	8004a3a <_free_r+0x22>
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4401      	add	r1, r0
 8004a7e:	6011      	str	r1, [r2, #0]
 8004a80:	6053      	str	r3, [r2, #4]
 8004a82:	e7da      	b.n	8004a3a <_free_r+0x22>
 8004a84:	d902      	bls.n	8004a8c <_free_r+0x74>
 8004a86:	230c      	movs	r3, #12
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	e7d6      	b.n	8004a3a <_free_r+0x22>
 8004a8c:	6820      	ldr	r0, [r4, #0]
 8004a8e:	1821      	adds	r1, r4, r0
 8004a90:	428b      	cmp	r3, r1
 8004a92:	bf01      	itttt	eq
 8004a94:	6819      	ldreq	r1, [r3, #0]
 8004a96:	685b      	ldreq	r3, [r3, #4]
 8004a98:	1809      	addeq	r1, r1, r0
 8004a9a:	6021      	streq	r1, [r4, #0]
 8004a9c:	6063      	str	r3, [r4, #4]
 8004a9e:	6054      	str	r4, [r2, #4]
 8004aa0:	e7cb      	b.n	8004a3a <_free_r+0x22>
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	200001d4 	.word	0x200001d4

08004aa8 <sbrk_aligned>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4e0e      	ldr	r6, [pc, #56]	; (8004ae4 <sbrk_aligned+0x3c>)
 8004aac:	460c      	mov	r4, r1
 8004aae:	6831      	ldr	r1, [r6, #0]
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	b911      	cbnz	r1, 8004aba <sbrk_aligned+0x12>
 8004ab4:	f000 fb7a 	bl	80051ac <_sbrk_r>
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 fb75 	bl	80051ac <_sbrk_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	d00a      	beq.n	8004adc <sbrk_aligned+0x34>
 8004ac6:	1cc4      	adds	r4, r0, #3
 8004ac8:	f024 0403 	bic.w	r4, r4, #3
 8004acc:	42a0      	cmp	r0, r4
 8004ace:	d007      	beq.n	8004ae0 <sbrk_aligned+0x38>
 8004ad0:	1a21      	subs	r1, r4, r0
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 fb6a 	bl	80051ac <_sbrk_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d101      	bne.n	8004ae0 <sbrk_aligned+0x38>
 8004adc:	f04f 34ff 	mov.w	r4, #4294967295
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	200001d8 	.word	0x200001d8

08004ae8 <_malloc_r>:
 8004ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aec:	1ccd      	adds	r5, r1, #3
 8004aee:	f025 0503 	bic.w	r5, r5, #3
 8004af2:	3508      	adds	r5, #8
 8004af4:	2d0c      	cmp	r5, #12
 8004af6:	bf38      	it	cc
 8004af8:	250c      	movcc	r5, #12
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	4607      	mov	r7, r0
 8004afe:	db01      	blt.n	8004b04 <_malloc_r+0x1c>
 8004b00:	42a9      	cmp	r1, r5
 8004b02:	d905      	bls.n	8004b10 <_malloc_r+0x28>
 8004b04:	230c      	movs	r3, #12
 8004b06:	2600      	movs	r6, #0
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b10:	4e2e      	ldr	r6, [pc, #184]	; (8004bcc <_malloc_r+0xe4>)
 8004b12:	f000 fc03 	bl	800531c <__malloc_lock>
 8004b16:	6833      	ldr	r3, [r6, #0]
 8004b18:	461c      	mov	r4, r3
 8004b1a:	bb34      	cbnz	r4, 8004b6a <_malloc_r+0x82>
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f7ff ffc2 	bl	8004aa8 <sbrk_aligned>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	4604      	mov	r4, r0
 8004b28:	d14d      	bne.n	8004bc6 <_malloc_r+0xde>
 8004b2a:	6834      	ldr	r4, [r6, #0]
 8004b2c:	4626      	mov	r6, r4
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	d140      	bne.n	8004bb4 <_malloc_r+0xcc>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	4631      	mov	r1, r6
 8004b36:	4638      	mov	r0, r7
 8004b38:	eb04 0803 	add.w	r8, r4, r3
 8004b3c:	f000 fb36 	bl	80051ac <_sbrk_r>
 8004b40:	4580      	cmp	r8, r0
 8004b42:	d13a      	bne.n	8004bba <_malloc_r+0xd2>
 8004b44:	6821      	ldr	r1, [r4, #0]
 8004b46:	3503      	adds	r5, #3
 8004b48:	1a6d      	subs	r5, r5, r1
 8004b4a:	f025 0503 	bic.w	r5, r5, #3
 8004b4e:	3508      	adds	r5, #8
 8004b50:	2d0c      	cmp	r5, #12
 8004b52:	bf38      	it	cc
 8004b54:	250c      	movcc	r5, #12
 8004b56:	4638      	mov	r0, r7
 8004b58:	4629      	mov	r1, r5
 8004b5a:	f7ff ffa5 	bl	8004aa8 <sbrk_aligned>
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d02b      	beq.n	8004bba <_malloc_r+0xd2>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	442b      	add	r3, r5
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	e00e      	b.n	8004b88 <_malloc_r+0xa0>
 8004b6a:	6822      	ldr	r2, [r4, #0]
 8004b6c:	1b52      	subs	r2, r2, r5
 8004b6e:	d41e      	bmi.n	8004bae <_malloc_r+0xc6>
 8004b70:	2a0b      	cmp	r2, #11
 8004b72:	d916      	bls.n	8004ba2 <_malloc_r+0xba>
 8004b74:	1961      	adds	r1, r4, r5
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	6025      	str	r5, [r4, #0]
 8004b7a:	bf18      	it	ne
 8004b7c:	6059      	strne	r1, [r3, #4]
 8004b7e:	6863      	ldr	r3, [r4, #4]
 8004b80:	bf08      	it	eq
 8004b82:	6031      	streq	r1, [r6, #0]
 8004b84:	5162      	str	r2, [r4, r5]
 8004b86:	604b      	str	r3, [r1, #4]
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f104 060b 	add.w	r6, r4, #11
 8004b8e:	f000 fbcb 	bl	8005328 <__malloc_unlock>
 8004b92:	f026 0607 	bic.w	r6, r6, #7
 8004b96:	1d23      	adds	r3, r4, #4
 8004b98:	1af2      	subs	r2, r6, r3
 8004b9a:	d0b6      	beq.n	8004b0a <_malloc_r+0x22>
 8004b9c:	1b9b      	subs	r3, r3, r6
 8004b9e:	50a3      	str	r3, [r4, r2]
 8004ba0:	e7b3      	b.n	8004b0a <_malloc_r+0x22>
 8004ba2:	6862      	ldr	r2, [r4, #4]
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	bf0c      	ite	eq
 8004ba8:	6032      	streq	r2, [r6, #0]
 8004baa:	605a      	strne	r2, [r3, #4]
 8004bac:	e7ec      	b.n	8004b88 <_malloc_r+0xa0>
 8004bae:	4623      	mov	r3, r4
 8004bb0:	6864      	ldr	r4, [r4, #4]
 8004bb2:	e7b2      	b.n	8004b1a <_malloc_r+0x32>
 8004bb4:	4634      	mov	r4, r6
 8004bb6:	6876      	ldr	r6, [r6, #4]
 8004bb8:	e7b9      	b.n	8004b2e <_malloc_r+0x46>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	f000 fbb2 	bl	8005328 <__malloc_unlock>
 8004bc4:	e7a1      	b.n	8004b0a <_malloc_r+0x22>
 8004bc6:	6025      	str	r5, [r4, #0]
 8004bc8:	e7de      	b.n	8004b88 <_malloc_r+0xa0>
 8004bca:	bf00      	nop
 8004bcc:	200001d4 	.word	0x200001d4

08004bd0 <__sfputc_r>:
 8004bd0:	6893      	ldr	r3, [r2, #8]
 8004bd2:	b410      	push	{r4}
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	6093      	str	r3, [r2, #8]
 8004bda:	da07      	bge.n	8004bec <__sfputc_r+0x1c>
 8004bdc:	6994      	ldr	r4, [r2, #24]
 8004bde:	42a3      	cmp	r3, r4
 8004be0:	db01      	blt.n	8004be6 <__sfputc_r+0x16>
 8004be2:	290a      	cmp	r1, #10
 8004be4:	d102      	bne.n	8004bec <__sfputc_r+0x1c>
 8004be6:	bc10      	pop	{r4}
 8004be8:	f7ff bc3a 	b.w	8004460 <__swbuf_r>
 8004bec:	6813      	ldr	r3, [r2, #0]
 8004bee:	1c58      	adds	r0, r3, #1
 8004bf0:	6010      	str	r0, [r2, #0]
 8004bf2:	7019      	strb	r1, [r3, #0]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	bc10      	pop	{r4}
 8004bf8:	4770      	bx	lr

08004bfa <__sfputs_r>:
 8004bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	460f      	mov	r7, r1
 8004c00:	4614      	mov	r4, r2
 8004c02:	18d5      	adds	r5, r2, r3
 8004c04:	42ac      	cmp	r4, r5
 8004c06:	d101      	bne.n	8004c0c <__sfputs_r+0x12>
 8004c08:	2000      	movs	r0, #0
 8004c0a:	e007      	b.n	8004c1c <__sfputs_r+0x22>
 8004c0c:	463a      	mov	r2, r7
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c14:	f7ff ffdc 	bl	8004bd0 <__sfputc_r>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d1f3      	bne.n	8004c04 <__sfputs_r+0xa>
 8004c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c20 <_vfiprintf_r>:
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	460d      	mov	r5, r1
 8004c26:	4614      	mov	r4, r2
 8004c28:	4698      	mov	r8, r3
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b09d      	sub	sp, #116	; 0x74
 8004c2e:	b118      	cbz	r0, 8004c38 <_vfiprintf_r+0x18>
 8004c30:	6983      	ldr	r3, [r0, #24]
 8004c32:	b90b      	cbnz	r3, 8004c38 <_vfiprintf_r+0x18>
 8004c34:	f7ff fdea 	bl	800480c <__sinit>
 8004c38:	4b89      	ldr	r3, [pc, #548]	; (8004e60 <_vfiprintf_r+0x240>)
 8004c3a:	429d      	cmp	r5, r3
 8004c3c:	d11b      	bne.n	8004c76 <_vfiprintf_r+0x56>
 8004c3e:	6875      	ldr	r5, [r6, #4]
 8004c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c42:	07d9      	lsls	r1, r3, #31
 8004c44:	d405      	bmi.n	8004c52 <_vfiprintf_r+0x32>
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	059a      	lsls	r2, r3, #22
 8004c4a:	d402      	bmi.n	8004c52 <_vfiprintf_r+0x32>
 8004c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c4e:	f7ff fe7b 	bl	8004948 <__retarget_lock_acquire_recursive>
 8004c52:	89ab      	ldrh	r3, [r5, #12]
 8004c54:	071b      	lsls	r3, r3, #28
 8004c56:	d501      	bpl.n	8004c5c <_vfiprintf_r+0x3c>
 8004c58:	692b      	ldr	r3, [r5, #16]
 8004c5a:	b9eb      	cbnz	r3, 8004c98 <_vfiprintf_r+0x78>
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f7ff fc50 	bl	8004504 <__swsetup_r>
 8004c64:	b1c0      	cbz	r0, 8004c98 <_vfiprintf_r+0x78>
 8004c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c68:	07dc      	lsls	r4, r3, #31
 8004c6a:	d50e      	bpl.n	8004c8a <_vfiprintf_r+0x6a>
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	b01d      	add	sp, #116	; 0x74
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c76:	4b7b      	ldr	r3, [pc, #492]	; (8004e64 <_vfiprintf_r+0x244>)
 8004c78:	429d      	cmp	r5, r3
 8004c7a:	d101      	bne.n	8004c80 <_vfiprintf_r+0x60>
 8004c7c:	68b5      	ldr	r5, [r6, #8]
 8004c7e:	e7df      	b.n	8004c40 <_vfiprintf_r+0x20>
 8004c80:	4b79      	ldr	r3, [pc, #484]	; (8004e68 <_vfiprintf_r+0x248>)
 8004c82:	429d      	cmp	r5, r3
 8004c84:	bf08      	it	eq
 8004c86:	68f5      	ldreq	r5, [r6, #12]
 8004c88:	e7da      	b.n	8004c40 <_vfiprintf_r+0x20>
 8004c8a:	89ab      	ldrh	r3, [r5, #12]
 8004c8c:	0598      	lsls	r0, r3, #22
 8004c8e:	d4ed      	bmi.n	8004c6c <_vfiprintf_r+0x4c>
 8004c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c92:	f7ff fe5a 	bl	800494a <__retarget_lock_release_recursive>
 8004c96:	e7e9      	b.n	8004c6c <_vfiprintf_r+0x4c>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ca2:	2330      	movs	r3, #48	; 0x30
 8004ca4:	f04f 0901 	mov.w	r9, #1
 8004ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e6c <_vfiprintf_r+0x24c>
 8004cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	469a      	mov	sl, r3
 8004cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cbc:	b10a      	cbz	r2, 8004cc2 <_vfiprintf_r+0xa2>
 8004cbe:	2a25      	cmp	r2, #37	; 0x25
 8004cc0:	d1f9      	bne.n	8004cb6 <_vfiprintf_r+0x96>
 8004cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8004cc6:	d00b      	beq.n	8004ce0 <_vfiprintf_r+0xc0>
 8004cc8:	465b      	mov	r3, fp
 8004cca:	4622      	mov	r2, r4
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7ff ff93 	bl	8004bfa <__sfputs_r>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f000 80aa 	beq.w	8004e2e <_vfiprintf_r+0x20e>
 8004cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cdc:	445a      	add	r2, fp
 8004cde:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a2 	beq.w	8004e2e <_vfiprintf_r+0x20e>
 8004cea:	2300      	movs	r3, #0
 8004cec:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cf4:	f10a 0a01 	add.w	sl, sl, #1
 8004cf8:	9304      	str	r3, [sp, #16]
 8004cfa:	9307      	str	r3, [sp, #28]
 8004cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d00:	931a      	str	r3, [sp, #104]	; 0x68
 8004d02:	4654      	mov	r4, sl
 8004d04:	2205      	movs	r2, #5
 8004d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d0a:	4858      	ldr	r0, [pc, #352]	; (8004e6c <_vfiprintf_r+0x24c>)
 8004d0c:	f000 faf8 	bl	8005300 <memchr>
 8004d10:	9a04      	ldr	r2, [sp, #16]
 8004d12:	b9d8      	cbnz	r0, 8004d4c <_vfiprintf_r+0x12c>
 8004d14:	06d1      	lsls	r1, r2, #27
 8004d16:	bf44      	itt	mi
 8004d18:	2320      	movmi	r3, #32
 8004d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d1e:	0713      	lsls	r3, r2, #28
 8004d20:	bf44      	itt	mi
 8004d22:	232b      	movmi	r3, #43	; 0x2b
 8004d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d28:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2e:	d015      	beq.n	8004d5c <_vfiprintf_r+0x13c>
 8004d30:	4654      	mov	r4, sl
 8004d32:	2000      	movs	r0, #0
 8004d34:	f04f 0c0a 	mov.w	ip, #10
 8004d38:	9a07      	ldr	r2, [sp, #28]
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d40:	3b30      	subs	r3, #48	; 0x30
 8004d42:	2b09      	cmp	r3, #9
 8004d44:	d94e      	bls.n	8004de4 <_vfiprintf_r+0x1c4>
 8004d46:	b1b0      	cbz	r0, 8004d76 <_vfiprintf_r+0x156>
 8004d48:	9207      	str	r2, [sp, #28]
 8004d4a:	e014      	b.n	8004d76 <_vfiprintf_r+0x156>
 8004d4c:	eba0 0308 	sub.w	r3, r0, r8
 8004d50:	fa09 f303 	lsl.w	r3, r9, r3
 8004d54:	4313      	orrs	r3, r2
 8004d56:	46a2      	mov	sl, r4
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	e7d2      	b.n	8004d02 <_vfiprintf_r+0xe2>
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	1d19      	adds	r1, r3, #4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	9103      	str	r1, [sp, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bfbb      	ittet	lt
 8004d68:	425b      	neglt	r3, r3
 8004d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d6e:	9307      	strge	r3, [sp, #28]
 8004d70:	9307      	strlt	r3, [sp, #28]
 8004d72:	bfb8      	it	lt
 8004d74:	9204      	strlt	r2, [sp, #16]
 8004d76:	7823      	ldrb	r3, [r4, #0]
 8004d78:	2b2e      	cmp	r3, #46	; 0x2e
 8004d7a:	d10c      	bne.n	8004d96 <_vfiprintf_r+0x176>
 8004d7c:	7863      	ldrb	r3, [r4, #1]
 8004d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d80:	d135      	bne.n	8004dee <_vfiprintf_r+0x1ce>
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	3402      	adds	r4, #2
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	9203      	str	r2, [sp, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bfb8      	it	lt
 8004d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d94:	9305      	str	r3, [sp, #20]
 8004d96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004e70 <_vfiprintf_r+0x250>
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	4650      	mov	r0, sl
 8004d9e:	7821      	ldrb	r1, [r4, #0]
 8004da0:	f000 faae 	bl	8005300 <memchr>
 8004da4:	b140      	cbz	r0, 8004db8 <_vfiprintf_r+0x198>
 8004da6:	2340      	movs	r3, #64	; 0x40
 8004da8:	eba0 000a 	sub.w	r0, r0, sl
 8004dac:	fa03 f000 	lsl.w	r0, r3, r0
 8004db0:	9b04      	ldr	r3, [sp, #16]
 8004db2:	3401      	adds	r4, #1
 8004db4:	4303      	orrs	r3, r0
 8004db6:	9304      	str	r3, [sp, #16]
 8004db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dbc:	2206      	movs	r2, #6
 8004dbe:	482d      	ldr	r0, [pc, #180]	; (8004e74 <_vfiprintf_r+0x254>)
 8004dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dc4:	f000 fa9c 	bl	8005300 <memchr>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d03f      	beq.n	8004e4c <_vfiprintf_r+0x22c>
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <_vfiprintf_r+0x258>)
 8004dce:	bb1b      	cbnz	r3, 8004e18 <_vfiprintf_r+0x1f8>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	3307      	adds	r3, #7
 8004dd4:	f023 0307 	bic.w	r3, r3, #7
 8004dd8:	3308      	adds	r3, #8
 8004dda:	9303      	str	r3, [sp, #12]
 8004ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dde:	443b      	add	r3, r7
 8004de0:	9309      	str	r3, [sp, #36]	; 0x24
 8004de2:	e767      	b.n	8004cb4 <_vfiprintf_r+0x94>
 8004de4:	460c      	mov	r4, r1
 8004de6:	2001      	movs	r0, #1
 8004de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dec:	e7a5      	b.n	8004d3a <_vfiprintf_r+0x11a>
 8004dee:	2300      	movs	r3, #0
 8004df0:	f04f 0c0a 	mov.w	ip, #10
 8004df4:	4619      	mov	r1, r3
 8004df6:	3401      	adds	r4, #1
 8004df8:	9305      	str	r3, [sp, #20]
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e00:	3a30      	subs	r2, #48	; 0x30
 8004e02:	2a09      	cmp	r2, #9
 8004e04:	d903      	bls.n	8004e0e <_vfiprintf_r+0x1ee>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0c5      	beq.n	8004d96 <_vfiprintf_r+0x176>
 8004e0a:	9105      	str	r1, [sp, #20]
 8004e0c:	e7c3      	b.n	8004d96 <_vfiprintf_r+0x176>
 8004e0e:	4604      	mov	r4, r0
 8004e10:	2301      	movs	r3, #1
 8004e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e16:	e7f0      	b.n	8004dfa <_vfiprintf_r+0x1da>
 8004e18:	ab03      	add	r3, sp, #12
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	462a      	mov	r2, r5
 8004e1e:	4630      	mov	r0, r6
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <_vfiprintf_r+0x25c>)
 8004e22:	a904      	add	r1, sp, #16
 8004e24:	f3af 8000 	nop.w
 8004e28:	4607      	mov	r7, r0
 8004e2a:	1c78      	adds	r0, r7, #1
 8004e2c:	d1d6      	bne.n	8004ddc <_vfiprintf_r+0x1bc>
 8004e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e30:	07d9      	lsls	r1, r3, #31
 8004e32:	d405      	bmi.n	8004e40 <_vfiprintf_r+0x220>
 8004e34:	89ab      	ldrh	r3, [r5, #12]
 8004e36:	059a      	lsls	r2, r3, #22
 8004e38:	d402      	bmi.n	8004e40 <_vfiprintf_r+0x220>
 8004e3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e3c:	f7ff fd85 	bl	800494a <__retarget_lock_release_recursive>
 8004e40:	89ab      	ldrh	r3, [r5, #12]
 8004e42:	065b      	lsls	r3, r3, #25
 8004e44:	f53f af12 	bmi.w	8004c6c <_vfiprintf_r+0x4c>
 8004e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e4a:	e711      	b.n	8004c70 <_vfiprintf_r+0x50>
 8004e4c:	ab03      	add	r3, sp, #12
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	462a      	mov	r2, r5
 8004e52:	4630      	mov	r0, r6
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <_vfiprintf_r+0x25c>)
 8004e56:	a904      	add	r1, sp, #16
 8004e58:	f000 f882 	bl	8004f60 <_printf_i>
 8004e5c:	e7e4      	b.n	8004e28 <_vfiprintf_r+0x208>
 8004e5e:	bf00      	nop
 8004e60:	08005434 	.word	0x08005434
 8004e64:	08005454 	.word	0x08005454
 8004e68:	08005414 	.word	0x08005414
 8004e6c:	08005474 	.word	0x08005474
 8004e70:	0800547a 	.word	0x0800547a
 8004e74:	0800547e 	.word	0x0800547e
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	08004bfb 	.word	0x08004bfb

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4699      	mov	r9, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfb8      	it	lt
 8004e92:	4613      	movlt	r3, r2
 8004e94:	6033      	str	r3, [r6, #0]
 8004e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc28      	bgt.n	8004f1a <_printf_common+0x9a>
 8004ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ecc:	1e13      	subs	r3, r2, #0
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d42d      	bmi.n	8004f34 <_printf_common+0xb4>
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee0:	47c0      	blx	r8
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d020      	beq.n	8004f28 <_printf_common+0xa8>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	68e5      	ldr	r5, [r4, #12]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf18      	it	ne
 8004ef2:	2500      	movne	r5, #0
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	f04f 0600 	mov.w	r6, #0
 8004efa:	68a3      	ldr	r3, [r4, #8]
 8004efc:	bf08      	it	eq
 8004efe:	1aad      	subeq	r5, r5, r2
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	bf08      	it	eq
 8004f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfc4      	itt	gt
 8004f0c:	1a9b      	subgt	r3, r3, r2
 8004f0e:	18ed      	addgt	r5, r5, r3
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xcc>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xac>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c0      	blx	r8
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xb0>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c4      	b.n	8004ebe <_printf_common+0x3e>
 8004f34:	2030      	movs	r0, #48	; 0x30
 8004f36:	18e1      	adds	r1, r4, r3
 8004f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f42:	4422      	add	r2, r4
 8004f44:	3302      	adds	r3, #2
 8004f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f4a:	e7c5      	b.n	8004ed8 <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4649      	mov	r1, r9
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c0      	blx	r8
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa8>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x92>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	7e0f      	ldrb	r7, [r1, #24]
 8004f66:	4691      	mov	r9, r2
 8004f68:	2f78      	cmp	r7, #120	; 0x78
 8004f6a:	4680      	mov	r8, r0
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	469a      	mov	sl, r3
 8004f70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	; 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d9 	beq.w	8005134 <_printf_i+0x1d4>
 8004f82:	2f58      	cmp	r7, #88	; 0x58
 8004f84:	f000 80a4 	beq.w	80050d0 <_printf_i+0x170>
 8004f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a101      	add	r1, pc, #4	; (adr r1, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	0800511b 	.word	0x0800511b
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	080050fd 	.word	0x080050fd
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800513d 	.word	0x0800513d
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	08005105 	.word	0x08005105
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	602a      	str	r2, [r5, #0]
 8005000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e0a4      	b.n	8005156 <_printf_i+0x1f6>
 800500c:	6820      	ldr	r0, [r4, #0]
 800500e:	6829      	ldr	r1, [r5, #0]
 8005010:	0606      	lsls	r6, r0, #24
 8005012:	f101 0304 	add.w	r3, r1, #4
 8005016:	d50a      	bpl.n	800502e <_printf_i+0xce>
 8005018:	680e      	ldr	r6, [r1, #0]
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	2e00      	cmp	r6, #0
 800501e:	da03      	bge.n	8005028 <_printf_i+0xc8>
 8005020:	232d      	movs	r3, #45	; 0x2d
 8005022:	4276      	negs	r6, r6
 8005024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005028:	230a      	movs	r3, #10
 800502a:	485e      	ldr	r0, [pc, #376]	; (80051a4 <_printf_i+0x244>)
 800502c:	e019      	b.n	8005062 <_printf_i+0x102>
 800502e:	680e      	ldr	r6, [r1, #0]
 8005030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	bf18      	it	ne
 8005038:	b236      	sxthne	r6, r6
 800503a:	e7ef      	b.n	800501c <_printf_i+0xbc>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	1d19      	adds	r1, r3, #4
 8005042:	6029      	str	r1, [r5, #0]
 8005044:	0601      	lsls	r1, r0, #24
 8005046:	d501      	bpl.n	800504c <_printf_i+0xec>
 8005048:	681e      	ldr	r6, [r3, #0]
 800504a:	e002      	b.n	8005052 <_printf_i+0xf2>
 800504c:	0646      	lsls	r6, r0, #25
 800504e:	d5fb      	bpl.n	8005048 <_printf_i+0xe8>
 8005050:	881e      	ldrh	r6, [r3, #0]
 8005052:	2f6f      	cmp	r7, #111	; 0x6f
 8005054:	bf0c      	ite	eq
 8005056:	2308      	moveq	r3, #8
 8005058:	230a      	movne	r3, #10
 800505a:	4852      	ldr	r0, [pc, #328]	; (80051a4 <_printf_i+0x244>)
 800505c:	2100      	movs	r1, #0
 800505e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005062:	6865      	ldr	r5, [r4, #4]
 8005064:	2d00      	cmp	r5, #0
 8005066:	bfa8      	it	ge
 8005068:	6821      	ldrge	r1, [r4, #0]
 800506a:	60a5      	str	r5, [r4, #8]
 800506c:	bfa4      	itt	ge
 800506e:	f021 0104 	bicge.w	r1, r1, #4
 8005072:	6021      	strge	r1, [r4, #0]
 8005074:	b90e      	cbnz	r6, 800507a <_printf_i+0x11a>
 8005076:	2d00      	cmp	r5, #0
 8005078:	d04d      	beq.n	8005116 <_printf_i+0x1b6>
 800507a:	4615      	mov	r5, r2
 800507c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005080:	fb03 6711 	mls	r7, r3, r1, r6
 8005084:	5dc7      	ldrb	r7, [r0, r7]
 8005086:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800508a:	4637      	mov	r7, r6
 800508c:	42bb      	cmp	r3, r7
 800508e:	460e      	mov	r6, r1
 8005090:	d9f4      	bls.n	800507c <_printf_i+0x11c>
 8005092:	2b08      	cmp	r3, #8
 8005094:	d10b      	bne.n	80050ae <_printf_i+0x14e>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07de      	lsls	r6, r3, #31
 800509a:	d508      	bpl.n	80050ae <_printf_i+0x14e>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	6861      	ldr	r1, [r4, #4]
 80050a0:	4299      	cmp	r1, r3
 80050a2:	bfde      	ittt	le
 80050a4:	2330      	movle	r3, #48	; 0x30
 80050a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ae:	1b52      	subs	r2, r2, r5
 80050b0:	6122      	str	r2, [r4, #16]
 80050b2:	464b      	mov	r3, r9
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	aa03      	add	r2, sp, #12
 80050be:	f7ff fedf 	bl	8004e80 <_printf_common>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d14c      	bne.n	8005160 <_printf_i+0x200>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	b004      	add	sp, #16
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	4834      	ldr	r0, [pc, #208]	; (80051a4 <_printf_i+0x244>)
 80050d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050d6:	6829      	ldr	r1, [r5, #0]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f851 6b04 	ldr.w	r6, [r1], #4
 80050de:	6029      	str	r1, [r5, #0]
 80050e0:	061d      	lsls	r5, r3, #24
 80050e2:	d514      	bpl.n	800510e <_printf_i+0x1ae>
 80050e4:	07df      	lsls	r7, r3, #31
 80050e6:	bf44      	itt	mi
 80050e8:	f043 0320 	orrmi.w	r3, r3, #32
 80050ec:	6023      	strmi	r3, [r4, #0]
 80050ee:	b91e      	cbnz	r6, 80050f8 <_printf_i+0x198>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f023 0320 	bic.w	r3, r3, #32
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	2310      	movs	r3, #16
 80050fa:	e7af      	b.n	800505c <_printf_i+0xfc>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f043 0320 	orr.w	r3, r3, #32
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	2378      	movs	r3, #120	; 0x78
 8005106:	4828      	ldr	r0, [pc, #160]	; (80051a8 <_printf_i+0x248>)
 8005108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510c:	e7e3      	b.n	80050d6 <_printf_i+0x176>
 800510e:	0659      	lsls	r1, r3, #25
 8005110:	bf48      	it	mi
 8005112:	b2b6      	uxthmi	r6, r6
 8005114:	e7e6      	b.n	80050e4 <_printf_i+0x184>
 8005116:	4615      	mov	r5, r2
 8005118:	e7bb      	b.n	8005092 <_printf_i+0x132>
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	6826      	ldr	r6, [r4, #0]
 800511e:	1d18      	adds	r0, r3, #4
 8005120:	6961      	ldr	r1, [r4, #20]
 8005122:	6028      	str	r0, [r5, #0]
 8005124:	0635      	lsls	r5, r6, #24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	d501      	bpl.n	800512e <_printf_i+0x1ce>
 800512a:	6019      	str	r1, [r3, #0]
 800512c:	e002      	b.n	8005134 <_printf_i+0x1d4>
 800512e:	0670      	lsls	r0, r6, #25
 8005130:	d5fb      	bpl.n	800512a <_printf_i+0x1ca>
 8005132:	8019      	strh	r1, [r3, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	4615      	mov	r5, r2
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	e7ba      	b.n	80050b2 <_printf_i+0x152>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	2100      	movs	r1, #0
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	681d      	ldr	r5, [r3, #0]
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	4628      	mov	r0, r5
 800514a:	f000 f8d9 	bl	8005300 <memchr>
 800514e:	b108      	cbz	r0, 8005154 <_printf_i+0x1f4>
 8005150:	1b40      	subs	r0, r0, r5
 8005152:	6060      	str	r0, [r4, #4]
 8005154:	6863      	ldr	r3, [r4, #4]
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	2300      	movs	r3, #0
 800515a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515e:	e7a8      	b.n	80050b2 <_printf_i+0x152>
 8005160:	462a      	mov	r2, r5
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	47d0      	blx	sl
 800516a:	3001      	adds	r0, #1
 800516c:	d0ab      	beq.n	80050c6 <_printf_i+0x166>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	079b      	lsls	r3, r3, #30
 8005172:	d413      	bmi.n	800519c <_printf_i+0x23c>
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	4298      	cmp	r0, r3
 800517a:	bfb8      	it	lt
 800517c:	4618      	movlt	r0, r3
 800517e:	e7a4      	b.n	80050ca <_printf_i+0x16a>
 8005180:	2301      	movs	r3, #1
 8005182:	4632      	mov	r2, r6
 8005184:	4649      	mov	r1, r9
 8005186:	4640      	mov	r0, r8
 8005188:	47d0      	blx	sl
 800518a:	3001      	adds	r0, #1
 800518c:	d09b      	beq.n	80050c6 <_printf_i+0x166>
 800518e:	3501      	adds	r5, #1
 8005190:	68e3      	ldr	r3, [r4, #12]
 8005192:	9903      	ldr	r1, [sp, #12]
 8005194:	1a5b      	subs	r3, r3, r1
 8005196:	42ab      	cmp	r3, r5
 8005198:	dcf2      	bgt.n	8005180 <_printf_i+0x220>
 800519a:	e7eb      	b.n	8005174 <_printf_i+0x214>
 800519c:	2500      	movs	r5, #0
 800519e:	f104 0619 	add.w	r6, r4, #25
 80051a2:	e7f5      	b.n	8005190 <_printf_i+0x230>
 80051a4:	08005485 	.word	0x08005485
 80051a8:	08005496 	.word	0x08005496

080051ac <_sbrk_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	2300      	movs	r3, #0
 80051b0:	4d05      	ldr	r5, [pc, #20]	; (80051c8 <_sbrk_r+0x1c>)
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	f7fc f896 	bl	80012e8 <_sbrk>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_sbrk_r+0x1a>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_sbrk_r+0x1a>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	200001dc 	.word	0x200001dc

080051cc <__sread>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	460c      	mov	r4, r1
 80051d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d4:	f000 f8ae 	bl	8005334 <_read_r>
 80051d8:	2800      	cmp	r0, #0
 80051da:	bfab      	itete	ge
 80051dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051de:	89a3      	ldrhlt	r3, [r4, #12]
 80051e0:	181b      	addge	r3, r3, r0
 80051e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051e6:	bfac      	ite	ge
 80051e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80051ea:	81a3      	strhlt	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__swrite>:
 80051ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f2:	461f      	mov	r7, r3
 80051f4:	898b      	ldrh	r3, [r1, #12]
 80051f6:	4605      	mov	r5, r0
 80051f8:	05db      	lsls	r3, r3, #23
 80051fa:	460c      	mov	r4, r1
 80051fc:	4616      	mov	r6, r2
 80051fe:	d505      	bpl.n	800520c <__swrite+0x1e>
 8005200:	2302      	movs	r3, #2
 8005202:	2200      	movs	r2, #0
 8005204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005208:	f000 f868 	bl	80052dc <_lseek_r>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	4632      	mov	r2, r6
 8005210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	4628      	mov	r0, r5
 8005218:	463b      	mov	r3, r7
 800521a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800521e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005222:	f000 b817 	b.w	8005254 <_write_r>

08005226 <__sseek>:
 8005226:	b510      	push	{r4, lr}
 8005228:	460c      	mov	r4, r1
 800522a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522e:	f000 f855 	bl	80052dc <_lseek_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	bf15      	itete	ne
 8005238:	6560      	strne	r0, [r4, #84]	; 0x54
 800523a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800523e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005242:	81a3      	strheq	r3, [r4, #12]
 8005244:	bf18      	it	ne
 8005246:	81a3      	strhne	r3, [r4, #12]
 8005248:	bd10      	pop	{r4, pc}

0800524a <__sclose>:
 800524a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524e:	f000 b813 	b.w	8005278 <_close_r>
	...

08005254 <_write_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	2200      	movs	r2, #0
 800525e:	4d05      	ldr	r5, [pc, #20]	; (8005274 <_write_r+0x20>)
 8005260:	602a      	str	r2, [r5, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f7fb fff3 	bl	800124e <_write>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_write_r+0x1e>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_write_r+0x1e>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	200001dc 	.word	0x200001dc

08005278 <_close_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	2300      	movs	r3, #0
 800527c:	4d05      	ldr	r5, [pc, #20]	; (8005294 <_close_r+0x1c>)
 800527e:	4604      	mov	r4, r0
 8005280:	4608      	mov	r0, r1
 8005282:	602b      	str	r3, [r5, #0]
 8005284:	f7fb ffff 	bl	8001286 <_close>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_close_r+0x1a>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_close_r+0x1a>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	200001dc 	.word	0x200001dc

08005298 <_fstat_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	2300      	movs	r3, #0
 800529c:	4d06      	ldr	r5, [pc, #24]	; (80052b8 <_fstat_r+0x20>)
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	f7fb fff9 	bl	800129c <_fstat>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	d102      	bne.n	80052b4 <_fstat_r+0x1c>
 80052ae:	682b      	ldr	r3, [r5, #0]
 80052b0:	b103      	cbz	r3, 80052b4 <_fstat_r+0x1c>
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	bd38      	pop	{r3, r4, r5, pc}
 80052b6:	bf00      	nop
 80052b8:	200001dc 	.word	0x200001dc

080052bc <_isatty_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	2300      	movs	r3, #0
 80052c0:	4d05      	ldr	r5, [pc, #20]	; (80052d8 <_isatty_r+0x1c>)
 80052c2:	4604      	mov	r4, r0
 80052c4:	4608      	mov	r0, r1
 80052c6:	602b      	str	r3, [r5, #0]
 80052c8:	f7fb fff7 	bl	80012ba <_isatty>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_isatty_r+0x1a>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_isatty_r+0x1a>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	200001dc 	.word	0x200001dc

080052dc <_lseek_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	4611      	mov	r1, r2
 80052e4:	2200      	movs	r2, #0
 80052e6:	4d05      	ldr	r5, [pc, #20]	; (80052fc <_lseek_r+0x20>)
 80052e8:	602a      	str	r2, [r5, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f7fb ffef 	bl	80012ce <_lseek>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_lseek_r+0x1e>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_lseek_r+0x1e>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	200001dc 	.word	0x200001dc

08005300 <memchr>:
 8005300:	4603      	mov	r3, r0
 8005302:	b510      	push	{r4, lr}
 8005304:	b2c9      	uxtb	r1, r1
 8005306:	4402      	add	r2, r0
 8005308:	4293      	cmp	r3, r2
 800530a:	4618      	mov	r0, r3
 800530c:	d101      	bne.n	8005312 <memchr+0x12>
 800530e:	2000      	movs	r0, #0
 8005310:	e003      	b.n	800531a <memchr+0x1a>
 8005312:	7804      	ldrb	r4, [r0, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	428c      	cmp	r4, r1
 8005318:	d1f6      	bne.n	8005308 <memchr+0x8>
 800531a:	bd10      	pop	{r4, pc}

0800531c <__malloc_lock>:
 800531c:	4801      	ldr	r0, [pc, #4]	; (8005324 <__malloc_lock+0x8>)
 800531e:	f7ff bb13 	b.w	8004948 <__retarget_lock_acquire_recursive>
 8005322:	bf00      	nop
 8005324:	200001d0 	.word	0x200001d0

08005328 <__malloc_unlock>:
 8005328:	4801      	ldr	r0, [pc, #4]	; (8005330 <__malloc_unlock+0x8>)
 800532a:	f7ff bb0e 	b.w	800494a <__retarget_lock_release_recursive>
 800532e:	bf00      	nop
 8005330:	200001d0 	.word	0x200001d0

08005334 <_read_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	2200      	movs	r2, #0
 800533e:	4d05      	ldr	r5, [pc, #20]	; (8005354 <_read_r+0x20>)
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fb ff66 	bl	8001214 <_read>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_read_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_read_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	200001dc 	.word	0x200001dc

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
