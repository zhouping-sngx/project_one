
Read_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a00  08004a00  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004a00  08004a00  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a00  08004a00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000074  08004a7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004a7c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080fb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d1  00000000  00000000  00028198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002af18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b84c  00000000  00000000  0002b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d102  00000000  00000000  00046fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009298d  00000000  00000000  000540e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6a73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000e6ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	0800489c 	.word	0x0800489c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	0800489c 	.word	0x0800489c

08000224 <Bsp_Led_Show_State_Handle>:
unsigned char ReceVelMode = 0x00;
short ReceVel = 2000;
// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
void Bsp_Led_Show_State_Handle(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000232:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b14      	cmp	r3, #20
 800023a:	d907      	bls.n	800024c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <Bsp_Led_Show_State_Handle+0x2c>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4803      	ldr	r0, [pc, #12]	; (8000254 <Bsp_Led_Show_State_Handle+0x30>)
 8000248:	f002 f981 	bl	800254e <HAL_GPIO_TogglePin>
	}
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000091 	.word	0x20000091
 8000254:	40011000 	.word	0x40011000

08000258 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	uint8_t res = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	71fb      	strb	r3, [r7, #7]
	USART1_Init();
 8000262:	f000 fda9 	bl	8000db8 <USART1_Init>
	Bsp_Data_Init(&ReceVelMode, &ReceVel);
 8000266:	490a      	ldr	r1, [pc, #40]	; (8000290 <Bsp_Init+0x38>)
 8000268:	480a      	ldr	r0, [pc, #40]	; (8000294 <Bsp_Init+0x3c>)
 800026a:	f000 f817 	bl	800029c <Bsp_Data_Init>
	res = MPU9250_Init();
 800026e:	f000 f92b 	bl	80004c8 <MPU9250_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	if (res != 0)
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d002      	beq.n	8000282 <Bsp_Init+0x2a>
	{
		printf("MPU9250 INIT ERROR\n");
 800027c:	4806      	ldr	r0, [pc, #24]	; (8000298 <Bsp_Init+0x40>)
 800027e:	f003 fb89 	bl	8003994 <puts>
		//while(1);
	}
	Beep_On_Time(50);
 8000282:	2032      	movs	r0, #50	; 0x32
 8000284:	f000 f878 	bl	8000378 <Beep_On_Time>
}
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000000 	.word	0x20000000
 8000294:	20000090 	.word	0x20000090
 8000298:	080048b4 	.word	0x080048b4

0800029c <Bsp_Data_Init>:

void Bsp_Data_Init(unsigned char* p1, short* p2)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	USART1_Data_Init(p1, p2);
 80002a6:	6839      	ldr	r1, [r7, #0]
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f000 fd93 	bl	8000dd4 <USART1_Data_Init>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <Bsp_Loop>:
// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 f8cd 	bl	800045c <Key1_State>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00d      	beq.n	80002e4 <Bsp_Loop+0x2c>
	{
		Beep_On_Time(50);
 80002c8:	2032      	movs	r0, #50	; 0x32
 80002ca:	f000 f855 	bl	8000378 <Beep_On_Time>
		static int press = 0;
		press++;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <Bsp_Loop+0x50>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3301      	adds	r3, #1
 80002d4:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <Bsp_Loop+0x50>)
 80002d6:	6013      	str	r3, [r2, #0]
		printf("press:%d\n", press);
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <Bsp_Loop+0x50>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4619      	mov	r1, r3
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <Bsp_Loop+0x54>)
 80002e0:	f003 fad2 	bl	8003888 <iprintf>
	}
	MPU9250_Read_Data_Handle();
 80002e4:	f000 fb48 	bl	8000978 <MPU9250_Read_Data_Handle>
	usartSendMeterData(100,200,300);
 80002e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002ec:	21c8      	movs	r1, #200	; 0xc8
 80002ee:	2064      	movs	r0, #100	; 0x64
 80002f0:	f000 fdde 	bl	8000eb0 <usartSendMeterData>
	Bsp_Led_Show_State_Handle();
 80002f4:	f7ff ff96 	bl	8000224 <Bsp_Led_Show_State_Handle>
	// The buzzer automatically shuts down when times out   蜂鸣器超时自动关闭
	Beep_Timeout_Close_Handle();
 80002f8:	f000 f87e 	bl	80003f8 <Beep_Timeout_Close_Handle>
	HAL_Delay(10);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f001 fa3d 	bl	800177c <HAL_Delay>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000094 	.word	0x20000094
 800030c:	080048c8 	.word	0x080048c8

08000310 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <Beep_Set_Time+0x1c>)
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	8013      	strh	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000098 	.word	0x20000098

08000330 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000334:	4b02      	ldr	r3, [pc, #8]	; (8000340 <Beep_Get_Time+0x10>)
 8000336:	881b      	ldrh	r3, [r3, #0]
}
 8000338:	4618      	mov	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	20000098 	.word	0x20000098

08000344 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 800034e:	4a04      	ldr	r2, [pc, #16]	; (8000360 <Beep_Set_State+0x1c>)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	7013      	strb	r3, [r2, #0]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	2000009a 	.word	0x2000009a

08000364 <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	return beep_state;
 8000368:	4b02      	ldr	r3, [pc, #8]	; (8000374 <Beep_Get_State+0x10>)
 800036a:	781b      	ldrb	r3, [r3, #0]
}
 800036c:	4618      	mov	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	2000009a 	.word	0x2000009a

08000378 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8000382:	88fb      	ldrh	r3, [r7, #6]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10b      	bne.n	80003a0 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000388:	2001      	movs	r0, #1
 800038a:	f7ff ffdb 	bl	8000344 <Beep_Set_State>
		Beep_Set_Time(0);
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ffbe 	bl	8000310 <Beep_Set_Time>
		BEEP_ON();
 8000394:	2201      	movs	r2, #1
 8000396:	2120      	movs	r1, #32
 8000398:	4815      	ldr	r0, [pc, #84]	; (80003f0 <Beep_On_Time+0x78>)
 800039a:	f002 f8c0 	bl	800251e <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 800039e:	e022      	b.n	80003e6 <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 80003a0:	88fb      	ldrh	r3, [r7, #6]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d10b      	bne.n	80003be <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffcc 	bl	8000344 <Beep_Set_State>
		Beep_Set_Time(0);
 80003ac:	2000      	movs	r0, #0
 80003ae:	f7ff ffaf 	bl	8000310 <Beep_Set_Time>
		BEEP_OFF();
 80003b2:	2200      	movs	r2, #0
 80003b4:	2120      	movs	r1, #32
 80003b6:	480e      	ldr	r0, [pc, #56]	; (80003f0 <Beep_On_Time+0x78>)
 80003b8:	f002 f8b1 	bl	800251e <HAL_GPIO_WritePin>
}
 80003bc:	e013      	b.n	80003e6 <Beep_On_Time+0x6e>
		if (time >= 10)
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	2b09      	cmp	r3, #9
 80003c2:	d910      	bls.n	80003e6 <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 80003c4:	2002      	movs	r0, #2
 80003c6:	f7ff ffbd 	bl	8000344 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 80003ca:	88fb      	ldrh	r3, [r7, #6]
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <Beep_On_Time+0x7c>)
 80003ce:	fba2 2303 	umull	r2, r3, r2, r3
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff9a 	bl	8000310 <Beep_Set_Time>
			BEEP_ON();
 80003dc:	2201      	movs	r2, #1
 80003de:	2120      	movs	r1, #32
 80003e0:	4803      	ldr	r0, [pc, #12]	; (80003f0 <Beep_On_Time+0x78>)
 80003e2:	f002 f89c 	bl	800251e <HAL_GPIO_WritePin>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40011000 	.word	0x40011000
 80003f4:	cccccccd 	.word	0xcccccccd

080003f8 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 80003fc:	f7ff ffb2 	bl	8000364 <Beep_Get_State>
 8000400:	4603      	mov	r3, r0
 8000402:	2b02      	cmp	r3, #2
 8000404:	d113      	bne.n	800042e <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8000406:	f7ff ff93 	bl	8000330 <Beep_Get_Time>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <Beep_Timeout_Close_Handle+0x3c>)
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	3b01      	subs	r3, #1
 8000416:	b29a      	uxth	r2, r3
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <Beep_Timeout_Close_Handle+0x3c>)
 800041a:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 800041c:	e007      	b.n	800042e <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 800041e:	2200      	movs	r2, #0
 8000420:	2120      	movs	r1, #32
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <Beep_Timeout_Close_Handle+0x40>)
 8000424:	f002 f87b 	bl	800251e <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff ff8b 	bl	8000344 <Beep_Set_State>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000098 	.word	0x20000098
 8000438:	40011000 	.word	0x40011000

0800043c <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8000440:	2104      	movs	r1, #4
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <Key1_is_Press+0x1c>)
 8000444:	f002 f854 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d101      	bne.n	8000452 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 800044e:	2301      	movs	r3, #1
 8000450:	e000      	b.n	8000454 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8000452:	2300      	movs	r3, #0
}
 8000454:	4618      	mov	r0, r3
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40011400 	.word	0x40011400

0800045c <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8000466:	f7ff ffe9 	bl	800043c <Key1_is_Press>
 800046a:	4603      	mov	r3, r0
 800046c:	2b01      	cmp	r3, #1
 800046e:	d10e      	bne.n	800048e <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <Key1_State+0x50>)
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	3301      	adds	r3, #1
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	429a      	cmp	r2, r3
 800047e:	da09      	bge.n	8000494 <Key1_State+0x38>
		{
			key1_state++;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <Key1_State+0x50>)
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	b29a      	uxth	r2, r3
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <Key1_State+0x50>)
 800048a:	801a      	strh	r2, [r3, #0]
 800048c:	e002      	b.n	8000494 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <Key1_State+0x50>)
 8000490:	2200      	movs	r2, #0
 8000492:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <Key1_State+0x50>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d101      	bne.n	80004a0 <Key1_State+0x44>
	{
		return KEY_PRESS;
 800049c:	2301      	movs	r3, #1
 800049e:	e000      	b.n	80004a2 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2000009c 	.word	0x2000009c

080004b0 <MPU_ADDR_CTRL>:
int16_t magx, magy, magz;	 // Magnetometer raw data   磁力计原始数据

// 拉低AD0引脚，让MPU6500的ID为0x68
// Lower the AD0 pin so that the ID of the MPU6500 is 0x68
void MPU_ADDR_CTRL(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU_AD0_GPIO_Port, MPU_AD0_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ba:	4802      	ldr	r0, [pc, #8]	; (80004c4 <MPU_ADDR_CTRL+0x14>)
 80004bc:	f002 f82f 	bl	800251e <HAL_GPIO_WritePin>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <MPU9250_Init>:

// 初始化MPU9250, 返回值:0,成功, 其他,错误代码
// Initialize MPU9250, return value :0, success, other, error code
uint8_t MPU9250_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	MPU_ADDR_CTRL();
 80004ce:	f7ff ffef 	bl	80004b0 <MPU_ADDR_CTRL>
	MPU_IIC_Init();
 80004d2:	f000 fad2 	bl	8000a7a <MPU_IIC_Init>
	MPU_Delay_ms(10);
 80004d6:	200a      	movs	r0, #10
 80004d8:	f000 f989 	bl	80007ee <MPU_Delay_ms>

	uint8_t res = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	71fb      	strb	r3, [r7, #7]
	// Reset MPU9250 //复位MPU9250
	MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT1_REG, 0X80);
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	216b      	movs	r1, #107	; 0x6b
 80004e4:	2068      	movs	r0, #104	; 0x68
 80004e6:	f000 f9e1 	bl	80008ac <MPU_Write_Byte>
	// Delay 100 ms //延时100ms
	MPU_Delay_ms(100);
 80004ea:	2064      	movs	r0, #100	; 0x64
 80004ec:	f000 f97f 	bl	80007ee <MPU_Delay_ms>
	// Wake mpu9250 //唤醒MPU9250
	MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT1_REG, 0X00);
 80004f0:	2200      	movs	r2, #0
 80004f2:	216b      	movs	r1, #107	; 0x6b
 80004f4:	2068      	movs	r0, #104	; 0x68
 80004f6:	f000 f9d9 	bl	80008ac <MPU_Write_Byte>

	// Gyroscope sensor  陀螺仪传感器,±500dps=±500°/s ±32768 (gyro/32768*500)*PI/180(rad/s)=gyro/3754.9(rad/s)
	MPU_Set_Gyro_Fsr(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 f85a 	bl	80005b4 <MPU_Set_Gyro_Fsr>
	// Acceleration sensor 加速度传感器,±2g=±2*9.8m/s^2 ±32768 accel/32768*19.6=accel/1671.84
	MPU_Set_Accel_Fsr(0);
 8000500:	2000      	movs	r0, #0
 8000502:	f000 f869 	bl	80005d8 <MPU_Set_Accel_Fsr>
	// Set the sampling rate to 50Hz //设置采样率50Hz
	MPU_Set_Rate(50);
 8000506:	2032      	movs	r0, #50	; 0x32
 8000508:	f000 f8aa 	bl	8000660 <MPU_Set_Rate>

	// Turn off all interrupts //关闭所有中断
	MPU_Write_Byte(MPU9250_ADDR, MPU_INT_EN_REG, 0X00);
 800050c:	2200      	movs	r2, #0
 800050e:	2138      	movs	r1, #56	; 0x38
 8000510:	2068      	movs	r0, #104	; 0x68
 8000512:	f000 f9cb 	bl	80008ac <MPU_Write_Byte>
	// The I2C main mode is off //I2C主模式关闭
	MPU_Write_Byte(MPU9250_ADDR, MPU_USER_CTRL_REG, 0X00);
 8000516:	2200      	movs	r2, #0
 8000518:	216a      	movs	r1, #106	; 0x6a
 800051a:	2068      	movs	r0, #104	; 0x68
 800051c:	f000 f9c6 	bl	80008ac <MPU_Write_Byte>
	// Close the FIFO //关闭FIFO
	MPU_Write_Byte(MPU9250_ADDR, MPU_FIFO_EN_REG, 0X00);
 8000520:	2200      	movs	r2, #0
 8000522:	2123      	movs	r1, #35	; 0x23
 8000524:	2068      	movs	r0, #104	; 0x68
 8000526:	f000 f9c1 	bl	80008ac <MPU_Write_Byte>
	// The INT pin is low, enabling bypass mode to read the magnetometer directly
	// INT引脚低电平有效，开启bypass模式，可以直接读取磁力计
	MPU_Write_Byte(MPU9250_ADDR, MPU_INTBP_CFG_REG, 0X82);
 800052a:	2282      	movs	r2, #130	; 0x82
 800052c:	2137      	movs	r1, #55	; 0x37
 800052e:	2068      	movs	r0, #104	; 0x68
 8000530:	f000 f9bc 	bl	80008ac <MPU_Write_Byte>
	// Read the ID of MPU9250  读取MPU9250的ID
	res = MPU_Read_Byte(MPU9250_ADDR, MPU_DEVICE_ID_REG);
 8000534:	2175      	movs	r1, #117	; 0x75
 8000536:	2068      	movs	r0, #104	; 0x68
 8000538:	f000 f9ec 	bl	8000914 <MPU_Read_Byte>
 800053c:	4603      	mov	r3, r0
 800053e:	71fb      	strb	r3, [r7, #7]
	printf("MPU6500 Read ID=0x%02X\n", res);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4619      	mov	r1, r3
 8000544:	4819      	ldr	r0, [pc, #100]	; (80005ac <MPU9250_Init+0xe4>)
 8000546:	f003 f99f 	bl	8003888 <iprintf>
	// Check whether the device ID is correct 判断器件ID是否正确
	if (res == MPU6500_ID1 || res == MPU6500_ID2)
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b71      	cmp	r3, #113	; 0x71
 800054e:	d002      	beq.n	8000556 <MPU9250_Init+0x8e>
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b73      	cmp	r3, #115	; 0x73
 8000554:	d11b      	bne.n	800058e <MPU9250_Init+0xc6>
	{
		// Set CLKSEL,PLL X axis as reference //设置CLKSEL,PLL X轴为参考
		MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT1_REG, 0X01);
 8000556:	2201      	movs	r2, #1
 8000558:	216b      	movs	r1, #107	; 0x6b
 800055a:	2068      	movs	r0, #104	; 0x68
 800055c:	f000 f9a6 	bl	80008ac <MPU_Write_Byte>
		// Acceleration and gyroscope both work //加速度与陀螺仪都工作
		MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT2_REG, 0X00);
 8000560:	2200      	movs	r2, #0
 8000562:	216c      	movs	r1, #108	; 0x6c
 8000564:	2068      	movs	r0, #104	; 0x68
 8000566:	f000 f9a1 	bl	80008ac <MPU_Write_Byte>
		// Set the sampling rate to 50Hz //设置采样率为50Hz
		MPU_Set_Rate(50);
 800056a:	2032      	movs	r0, #50	; 0x32
 800056c:	f000 f878 	bl	8000660 <MPU_Set_Rate>
	}
	else
		return 1;
	// Read AK8963ID 读取AK8963ID
	res = MPU_Read_Byte(AK8963_ADDR, MAG_WIA);
 8000570:	2100      	movs	r1, #0
 8000572:	200c      	movs	r0, #12
 8000574:	f000 f9ce 	bl	8000914 <MPU_Read_Byte>
 8000578:	4603      	mov	r3, r0
 800057a:	71fb      	strb	r3, [r7, #7]
	printf("AK8963 Read ID=0x%02X\n", res);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4619      	mov	r1, r3
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <MPU9250_Init+0xe8>)
 8000582:	f003 f981 	bl	8003888 <iprintf>
	if (res == AK8963_ID)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b48      	cmp	r3, #72	; 0x48
 800058a:	d002      	beq.n	8000592 <MPU9250_Init+0xca>
 800058c:	e008      	b.n	80005a0 <MPU9250_Init+0xd8>
		return 1;
 800058e:	2301      	movs	r3, #1
 8000590:	e007      	b.n	80005a2 <MPU9250_Init+0xda>
	{
		// Set AK8963 to single measurement mode 设置AK8963为单次测量模式
		MPU_Write_Byte(AK8963_ADDR, MAG_CNTL1, 0X11);
 8000592:	2211      	movs	r2, #17
 8000594:	210a      	movs	r1, #10
 8000596:	200c      	movs	r0, #12
 8000598:	f000 f988 	bl	80008ac <MPU_Write_Byte>
	}
	else
		return 2;
	return 0;
 800059c:	2300      	movs	r3, #0
 800059e:	e000      	b.n	80005a2 <MPU9250_Init+0xda>
		return 2;
 80005a0:	2302      	movs	r3, #2
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	080048d4 	.word	0x080048d4
 80005b0:	080048ec 	.word	0x080048ec

080005b4 <MPU_Set_Gyro_Fsr>:
//设置MPU9250陀螺仪传感器满量程范围:fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功, 其他,设置失败
// Set the full range of the MPU9250 gyroscope sensor:fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
// return value :0, the setting succeeds, other, the setting fails
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU9250_ADDR, MPU_GYRO_CFG_REG, fsr << 3); //设置陀螺仪满量程范围
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	211b      	movs	r1, #27
 80005c8:	2068      	movs	r0, #104	; 0x68
 80005ca:	f000 f96f 	bl	80008ac <MPU_Write_Byte>
 80005ce:	4603      	mov	r3, r0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MPU_Set_Accel_Fsr>:
// 设置MPU9250加速度传感器满量程范围：fsr:0,±2g;1,±4g;2,±8g;3,±16g
// 返回值:0,设置成功， 其他,设置失败
// Set the full range of the MPU9250 acceleration sensor: FSR :0,±2G; 1,±4g; 2,±8g; 3,±16g
// return value :0, the setting succeeds, other, the setting fails
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU9250_ADDR, MPU_ACCEL_CFG_REG, fsr << 3);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	211c      	movs	r1, #28
 80005ec:	2068      	movs	r0, #104	; 0x68
 80005ee:	f000 f95d 	bl	80008ac <MPU_Write_Byte>
 80005f2:	4603      	mov	r3, r0
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MPU_Set_LPF>:

// 设置MPU9250的数字低通滤波器，返回值:0,设置成功， 其他,设置失败
// Set the digital low-pass filter of the MPU9250. The return value is 0. The setting succeeds
uint8_t MPU_Set_LPF(uint16_t lpf)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	uint8_t data = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	2bbb      	cmp	r3, #187	; 0xbb
 800060e:	d902      	bls.n	8000616 <MPU_Set_LPF+0x1a>
		data = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e019      	b.n	800064a <MPU_Set_LPF+0x4e>
	else if (lpf >= 98)
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	2b61      	cmp	r3, #97	; 0x61
 800061a:	d902      	bls.n	8000622 <MPU_Set_LPF+0x26>
		data = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e013      	b.n	800064a <MPU_Set_LPF+0x4e>
	else if (lpf >= 42)
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	2b29      	cmp	r3, #41	; 0x29
 8000626:	d902      	bls.n	800062e <MPU_Set_LPF+0x32>
		data = 3;
 8000628:	2303      	movs	r3, #3
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e00d      	b.n	800064a <MPU_Set_LPF+0x4e>
	else if (lpf >= 20)
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	2b13      	cmp	r3, #19
 8000632:	d902      	bls.n	800063a <MPU_Set_LPF+0x3e>
		data = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e007      	b.n	800064a <MPU_Set_LPF+0x4e>
	else if (lpf >= 10)
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	2b09      	cmp	r3, #9
 800063e:	d902      	bls.n	8000646 <MPU_Set_LPF+0x4a>
		data = 5;
 8000640:	2305      	movs	r3, #5
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e001      	b.n	800064a <MPU_Set_LPF+0x4e>
	else
		data = 6;
 8000646:	2306      	movs	r3, #6
 8000648:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU9250_ADDR, MPU_CFG_REG, data); //设置数字低通滤波器
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	461a      	mov	r2, r3
 800064e:	211a      	movs	r1, #26
 8000650:	2068      	movs	r0, #104	; 0x68
 8000652:	f000 f92b 	bl	80008ac <MPU_Write_Byte>
 8000656:	4603      	mov	r3, r0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MPU_Set_Rate>:

// 设置MPU9250的采样率(假定Fs=1KHz)， rate:4~1000(Hz)，返回值:0,设置成功 ， 其他,设置失败
// Set the sampling rate of MPU9250 (assuming Fs=1KHz), rate:4~1000(Hz),
// return value :0, the setting succeeds, other, the setting fails
uint8_t MPU_Set_Rate(uint16_t rate)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if (rate > 1000)
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000670:	d902      	bls.n	8000678 <MPU_Set_Rate+0x18>
		rate = 1000;
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d801      	bhi.n	8000682 <MPU_Set_Rate+0x22>
		rate = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	80fb      	strh	r3, [r7, #6]
	data = 1000 / rate - 1;
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000688:	fb92 f3f3 	sdiv	r3, r2, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	3b01      	subs	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU9250_ADDR, MPU_SAMPLE_RATE_REG, data);
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	461a      	mov	r2, r3
 8000696:	2119      	movs	r1, #25
 8000698:	2068      	movs	r0, #104	; 0x68
 800069a:	f000 f907 	bl	80008ac <MPU_Write_Byte>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
	return MPU_Set_LPF(rate / 2);
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa7 	bl	80005fc <MPU_Set_LPF>
 80006ae:	4603      	mov	r3, r0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MPU_Get_Gyroscope>:

// 读取陀螺仪值(原始值), 返回值:0,成功, 其他,错误代码
// Read gyroscope value (original value), return value :0, success, other, error code
uint8_t MPU_Get_Gyroscope(int16_t *gx, int16_t *gy, int16_t *gz)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU9250_ADDR, MPU_GYRO_XOUTH_REG, 6, buf);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2206      	movs	r2, #6
 80006ca:	2143      	movs	r1, #67	; 0x43
 80006cc:	2068      	movs	r0, #104	; 0x68
 80006ce:	f000 f89b 	bl	8000808 <MPU_Read_Len>
 80006d2:	4603      	mov	r3, r0
 80006d4:	75fb      	strb	r3, [r7, #23]
	if (res == 0)
 80006d6:	7dfb      	ldrb	r3, [r7, #23]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d11a      	bne.n	8000712 <MPU_Get_Gyroscope+0x5a>
	{
		*gx = ((uint16_t)buf[0] << 8) | buf[1];
 80006dc:	7c3b      	ldrb	r3, [r7, #16]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	7c7b      	ldrb	r3, [r7, #17]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	801a      	strh	r2, [r3, #0]
		*gy = ((uint16_t)buf[2] << 8) | buf[3];
 80006ee:	7cbb      	ldrb	r3, [r7, #18]
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	7cfb      	ldrb	r3, [r7, #19]
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	801a      	strh	r2, [r3, #0]
		*gz = ((uint16_t)buf[4] << 8) | buf[5];
 8000700:	7d3b      	ldrb	r3, [r7, #20]
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	b21a      	sxth	r2, r3
 8000706:	7d7b      	ldrb	r3, [r7, #21]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b21a      	sxth	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	801a      	strh	r2, [r3, #0]
	}
	return res;
 8000712:	7dfb      	ldrb	r3, [r7, #23]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <MPU_Get_Accelerometer>:

// 读取加速度值(原始值), 返回值:0,成功, 其他,错误代码
// Read acceleration value (original value), return value :0, success, other, error code
uint8_t MPU_Get_Accelerometer(int16_t *ax, int16_t *ay, int16_t *az)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU9250_ADDR, MPU_ACCEL_XOUTH_REG, 6, buf);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2206      	movs	r2, #6
 800072e:	213b      	movs	r1, #59	; 0x3b
 8000730:	2068      	movs	r0, #104	; 0x68
 8000732:	f000 f869 	bl	8000808 <MPU_Read_Len>
 8000736:	4603      	mov	r3, r0
 8000738:	75fb      	strb	r3, [r7, #23]
	if (res == 0)
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d11a      	bne.n	8000776 <MPU_Get_Accelerometer+0x5a>
	{
		*ax = ((uint16_t)buf[0] << 8) | buf[1];
 8000740:	7c3b      	ldrb	r3, [r7, #16]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	7c7b      	ldrb	r3, [r7, #17]
 8000748:	b21b      	sxth	r3, r3
 800074a:	4313      	orrs	r3, r2
 800074c:	b21a      	sxth	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	801a      	strh	r2, [r3, #0]
		*ay = ((uint16_t)buf[2] << 8) | buf[3];
 8000752:	7cbb      	ldrb	r3, [r7, #18]
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	b21a      	sxth	r2, r3
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b21a      	sxth	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	801a      	strh	r2, [r3, #0]
		*az = ((uint16_t)buf[4] << 8) | buf[5];
 8000764:	7d3b      	ldrb	r3, [r7, #20]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	b21a      	sxth	r2, r3
 800076a:	7d7b      	ldrb	r3, [r7, #21]
 800076c:	b21b      	sxth	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b21a      	sxth	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	801a      	strh	r2, [r3, #0]
	}
	return res;
 8000776:	7dfb      	ldrb	r3, [r7, #23]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <MPU_Get_Magnetometer>:

// 读取磁力计值(原始值)，返回值:0,成功，其他,错误代码
// Read magnetometer value (original value), return value :0, success, other, error code
uint8_t MPU_Get_Magnetometer(int16_t *mx, int16_t *my, int16_t *mz)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(AK8963_ADDR, MAG_XOUT_L, 6, buf);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	2206      	movs	r2, #6
 8000792:	2103      	movs	r1, #3
 8000794:	200c      	movs	r0, #12
 8000796:	f000 f837 	bl	8000808 <MPU_Read_Len>
 800079a:	4603      	mov	r3, r0
 800079c:	75fb      	strb	r3, [r7, #23]
	if (res == 0)
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d11a      	bne.n	80007da <MPU_Get_Magnetometer+0x5a>
	{
		*mx = ((uint16_t)buf[1] << 8) | buf[0];
 80007a4:	7c7b      	ldrb	r3, [r7, #17]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b21a      	sxth	r2, r3
 80007aa:	7c3b      	ldrb	r3, [r7, #16]
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	801a      	strh	r2, [r3, #0]
		*my = ((uint16_t)buf[3] << 8) | buf[2];
 80007b6:	7cfb      	ldrb	r3, [r7, #19]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	7cbb      	ldrb	r3, [r7, #18]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	801a      	strh	r2, [r3, #0]
		*mz = ((uint16_t)buf[5] << 8) | buf[4];
 80007c8:	7d7b      	ldrb	r3, [r7, #21]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	7d3b      	ldrb	r3, [r7, #20]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	801a      	strh	r2, [r3, #0]
	}
	// AK8963每次读完以后都需要重新设置为单次测量模式
	// AK8963 needs to be reset to single measurement mode after each reading
	MPU_Write_Byte(AK8963_ADDR, MAG_CNTL1, 0X11);
 80007da:	2211      	movs	r2, #17
 80007dc:	210a      	movs	r1, #10
 80007de:	200c      	movs	r0, #12
 80007e0:	f000 f864 	bl	80008ac <MPU_Write_Byte>
	return res;
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <MPU_Delay_ms>:
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
// Millisecond delay function  毫秒级延时函数
void MPU_Delay_ms(uint16_t time)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 ffbe 	bl	800177c <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <MPU_Read_Len>:
}

// IIC连续读, 数据保存到buf中。返回值:0,正常, 其他,错误代码
// IIC reads continuously and saves data to BUF.  Return value :0, normal, otherwise, error code
uint8_t MPU_Read_Len(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	460b      	mov	r3, r1
 8000816:	71bb      	strb	r3, [r7, #6]
 8000818:	4613      	mov	r3, r2
 800081a:	717b      	strb	r3, [r7, #5]
	MPU_IIC_Start();
 800081c:	f000 f934 	bl	8000a88 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 0);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fa32 	bl	8000c90 <MPU_IIC_Send_Byte>
	if (MPU_IIC_Wait_Ack())
 800082c:	f000 f98c 	bl	8000b48 <MPU_IIC_Wait_Ack>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d003      	beq.n	800083e <MPU_Read_Len+0x36>
	{
		MPU_IIC_Stop();
 8000836:	f000 f957 	bl	8000ae8 <MPU_IIC_Stop>
		return 1;
 800083a:	2301      	movs	r3, #1
 800083c:	e032      	b.n	80008a4 <MPU_Read_Len+0x9c>
	}
	MPU_IIC_Send_Byte(reg);
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fa25 	bl	8000c90 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8000846:	f000 f97f 	bl	8000b48 <MPU_IIC_Wait_Ack>
	MPU_IIC_Start();
 800084a:	f000 f91d 	bl	8000a88 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 1);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	b25b      	sxtb	r3, r3
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	b25b      	sxtb	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fa17 	bl	8000c90 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8000862:	f000 f971 	bl	8000b48 <MPU_IIC_Wait_Ack>
	while (len)
 8000866:	e017      	b.n	8000898 <MPU_Read_Len+0x90>
	{
		if (len == 1)
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d107      	bne.n	800087e <MPU_Read_Len+0x76>
			*buf = MPU_IIC_Read_Byte(0);
 800086e:	2000      	movs	r0, #0
 8000870:	f000 fa56 	bl	8000d20 <MPU_IIC_Read_Byte>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e006      	b.n	800088c <MPU_Read_Len+0x84>
		else
			*buf = MPU_IIC_Read_Byte(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f000 fa4e 	bl	8000d20 <MPU_IIC_Read_Byte>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	701a      	strb	r2, [r3, #0]
		len--;
 800088c:	797b      	ldrb	r3, [r7, #5]
 800088e:	3b01      	subs	r3, #1
 8000890:	717b      	strb	r3, [r7, #5]
		buf++;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	603b      	str	r3, [r7, #0]
	while (len)
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1e4      	bne.n	8000868 <MPU_Read_Len+0x60>
	}
	MPU_IIC_Stop();
 800089e:	f000 f923 	bl	8000ae8 <MPU_IIC_Stop>
	return 0;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MPU_Write_Byte>:

// IIC写一个字节, 返回值:0,正常, 其他,错误代码
// IIC writes a byte, return value :0, normal, otherwise, error code
uint8_t MPU_Write_Byte(uint8_t addr, uint8_t reg, uint8_t data)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	460b      	mov	r3, r1
 80008b8:	71bb      	strb	r3, [r7, #6]
 80008ba:	4613      	mov	r3, r2
 80008bc:	717b      	strb	r3, [r7, #5]
	MPU_IIC_Start();
 80008be:	f000 f8e3 	bl	8000a88 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 0);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f9e1 	bl	8000c90 <MPU_IIC_Send_Byte>
	if (MPU_IIC_Wait_Ack())
 80008ce:	f000 f93b 	bl	8000b48 <MPU_IIC_Wait_Ack>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d003      	beq.n	80008e0 <MPU_Write_Byte+0x34>
	{
		MPU_IIC_Stop();
 80008d8:	f000 f906 	bl	8000ae8 <MPU_IIC_Stop>
		return 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	e015      	b.n	800090c <MPU_Write_Byte+0x60>
	}
	MPU_IIC_Send_Byte(reg);
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f9d4 	bl	8000c90 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 80008e8:	f000 f92e 	bl	8000b48 <MPU_IIC_Wait_Ack>
	MPU_IIC_Send_Byte(data);
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f9ce 	bl	8000c90 <MPU_IIC_Send_Byte>
	if (MPU_IIC_Wait_Ack())
 80008f4:	f000 f928 	bl	8000b48 <MPU_IIC_Wait_Ack>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <MPU_Write_Byte+0x5a>
	{
		MPU_IIC_Stop();
 80008fe:	f000 f8f3 	bl	8000ae8 <MPU_IIC_Stop>
		return 1;
 8000902:	2301      	movs	r3, #1
 8000904:	e002      	b.n	800090c <MPU_Write_Byte+0x60>
	}
	MPU_IIC_Stop();
 8000906:	f000 f8ef 	bl	8000ae8 <MPU_IIC_Stop>
	return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <MPU_Read_Byte>:

// IIC读一个字节, 返回读到的数据
// IIC reads one byte and returns the read data
uint8_t MPU_Read_Byte(uint8_t addr, uint8_t reg)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	460a      	mov	r2, r1
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	4613      	mov	r3, r2
 8000922:	71bb      	strb	r3, [r7, #6]
	uint8_t res;
	MPU_IIC_Start();
 8000924:	f000 f8b0 	bl	8000a88 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 0);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f9ae 	bl	8000c90 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8000934:	f000 f908 	bl	8000b48 <MPU_IIC_Wait_Ack>
	MPU_IIC_Send_Byte(reg);
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f9a8 	bl	8000c90 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8000940:	f000 f902 	bl	8000b48 <MPU_IIC_Wait_Ack>
	MPU_IIC_Start();
 8000944:	f000 f8a0 	bl	8000a88 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 1);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	b25b      	sxtb	r3, r3
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	b25b      	sxtb	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f99a 	bl	8000c90 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 800095c:	f000 f8f4 	bl	8000b48 <MPU_IIC_Wait_Ack>
	res = MPU_IIC_Read_Byte(0);
 8000960:	2000      	movs	r0, #0
 8000962:	f000 f9dd 	bl	8000d20 <MPU_IIC_Read_Byte>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
	MPU_IIC_Stop();
 800096a:	f000 f8bd 	bl	8000ae8 <MPU_IIC_Stop>
	return res;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MPU9250_Read_Data_Handle>:

// Read and print the data  读取并打印数据
void MPU9250_Read_Data_Handle(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	// Get accelerometer data  得到加速度传感器数据
	MPU_Get_Accelerometer(&aacx, &aacy, &aacz);
 800097c:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MPU9250_Read_Data_Handle+0x94>)
 800097e:	4924      	ldr	r1, [pc, #144]	; (8000a10 <MPU9250_Read_Data_Handle+0x98>)
 8000980:	4824      	ldr	r0, [pc, #144]	; (8000a14 <MPU9250_Read_Data_Handle+0x9c>)
 8000982:	f7ff fecb 	bl	800071c <MPU_Get_Accelerometer>
	// Get the gyroscope data  得到陀螺仪数据
	MPU_Get_Gyroscope(&gyrox, &gyroy, &gyroz);
 8000986:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <MPU9250_Read_Data_Handle+0xa0>)
 8000988:	4924      	ldr	r1, [pc, #144]	; (8000a1c <MPU9250_Read_Data_Handle+0xa4>)
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MPU9250_Read_Data_Handle+0xa8>)
 800098c:	f7ff fe94 	bl	80006b8 <MPU_Get_Gyroscope>
	// Get magnetometer data   得到磁力计数据
	MPU_Get_Magnetometer(&magx, &magy, &magz);
 8000990:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <MPU9250_Read_Data_Handle+0xac>)
 8000992:	4925      	ldr	r1, [pc, #148]	; (8000a28 <MPU9250_Read_Data_Handle+0xb0>)
 8000994:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MPU9250_Read_Data_Handle+0xb4>)
 8000996:	f7ff fef3 	bl	8000780 <MPU_Get_Magnetometer>

	// 为了打印不太快，每10个数据打印一次。
	// In order not to print too fast, print every 10 pieces of data
	static uint8_t show = 0;
	show++;
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <MPU9250_Read_Data_Handle+0xb8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MPU9250_Read_Data_Handle+0xb8>)
 80009a4:	701a      	strb	r2, [r3, #0]
	if (show > 10)
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MPU9250_Read_Data_Handle+0xb8>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b0a      	cmp	r3, #10
 80009ac:	d92c      	bls.n	8000a08 <MPU9250_Read_Data_Handle+0x90>
	{
		show = 0;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MPU9250_Read_Data_Handle+0xb8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
		printf("accel:%d, %d, %d\n", aacx, aacy, aacz);
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MPU9250_Read_Data_Handle+0x9c>)
 80009b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MPU9250_Read_Data_Handle+0x98>)
 80009be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MPU9250_Read_Data_Handle+0x94>)
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MPU9250_Read_Data_Handle+0xbc>)
 80009cc:	f002 ff5c 	bl	8003888 <iprintf>
		printf("gyro:%d, %d, %d\n", gyrox, gyroy, gyroz);
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MPU9250_Read_Data_Handle+0xa8>)
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MPU9250_Read_Data_Handle+0xa4>)
 80009da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MPU9250_Read_Data_Handle+0xa0>)
 80009e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <MPU9250_Read_Data_Handle+0xc0>)
 80009e8:	f002 ff4e 	bl	8003888 <iprintf>
		printf("mag:%d, %d, %d\n", magx, magy, magz);
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MPU9250_Read_Data_Handle+0xb4>)
 80009ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MPU9250_Read_Data_Handle+0xb0>)
 80009f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MPU9250_Read_Data_Handle+0xac>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <MPU9250_Read_Data_Handle+0xc4>)
 8000a04:	f002 ff40 	bl	8003888 <iprintf>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000a2 	.word	0x200000a2
 8000a10:	200000a0 	.word	0x200000a0
 8000a14:	2000009e 	.word	0x2000009e
 8000a18:	200000a8 	.word	0x200000a8
 8000a1c:	200000a6 	.word	0x200000a6
 8000a20:	200000a4 	.word	0x200000a4
 8000a24:	200000ae 	.word	0x200000ae
 8000a28:	200000ac 	.word	0x200000ac
 8000a2c:	200000aa 	.word	0x200000aa
 8000a30:	200000b0 	.word	0x200000b0
 8000a34:	08004904 	.word	0x08004904
 8000a38:	08004918 	.word	0x08004918
 8000a3c:	0800492c 	.word	0x0800492c

08000a40 <Delay_For_Pin>:
#include "bsp_mpuiic.h"


// Microsecond delay  微秒级延迟
static void Delay_For_Pin(uint8_t nCount)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
    for(; nCount != 0; nCount--)
 8000a4e:	e00b      	b.n	8000a68 <Delay_For_Pin+0x28>
    {
        for (i = 0; i < 10; i++);
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e002      	b.n	8000a5c <Delay_For_Pin+0x1c>
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b09      	cmp	r3, #9
 8000a60:	d9f9      	bls.n	8000a56 <Delay_For_Pin+0x16>
    for(; nCount != 0; nCount--)
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1f0      	bne.n	8000a50 <Delay_For_Pin+0x10>
    }
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <MPU_IIC_Init>:

#define delay_us  Delay_For_Pin

// Initialize the IIC  初始化IIC
void MPU_IIC_Init(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
	delay_us(1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff ffde 	bl	8000a40 <Delay_For_Pin>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <MPU_IIC_Start>:


// Generates the IIC initiation signal  产生IIC起始信号
void MPU_IIC_Start(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	MPU_SDA_OUT();
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000a92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a96:	6053      	str	r3, [r2, #4]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000a9e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000aa2:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000aac:	f001 fd37 	bl	800251e <HAL_GPIO_WritePin>
	MPU_IIC_SCL(1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000ab8:	f001 fd31 	bl	800251e <HAL_GPIO_WritePin>
	delay_us(4);
 8000abc:	2004      	movs	r0, #4
 8000abe:	f7ff ffbf 	bl	8000a40 <Delay_For_Pin>
 	MPU_IIC_SDA(0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000aca:	f001 fd28 	bl	800251e <HAL_GPIO_WritePin>
	delay_us(4);
 8000ace:	2004      	movs	r0, #4
 8000ad0:	f7ff ffb6 	bl	8000a40 <Delay_For_Pin>
	MPU_IIC_SCL(0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ada:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <MPU_IIC_Start+0x5c>)
 8000adc:	f001 fd1f 	bl	800251e <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <MPU_IIC_Stop>:

// Generates an IIC stop signal  产生IIC停止信号
void MPU_IIC_Stop(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	MPU_SDA_OUT();
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000af2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000af6:	6053      	str	r3, [r2, #4]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000afe:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000b02:	6053      	str	r3, [r2, #4]
	MPU_IIC_SCL(0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	480e      	ldr	r0, [pc, #56]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000b0c:	f001 fd07 	bl	800251e <HAL_GPIO_WritePin>
	MPU_IIC_SDA(0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000b18:	f001 fd01 	bl	800251e <HAL_GPIO_WritePin>
 	delay_us(4);
 8000b1c:	2004      	movs	r0, #4
 8000b1e:	f7ff ff8f 	bl	8000a40 <Delay_For_Pin>
	MPU_IIC_SCL(1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000b2a:	f001 fcf8 	bl	800251e <HAL_GPIO_WritePin>
	MPU_IIC_SDA(1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MPU_IIC_Stop+0x5c>)
 8000b36:	f001 fcf2 	bl	800251e <HAL_GPIO_WritePin>
	delay_us(4);
 8000b3a:	2004      	movs	r0, #4
 8000b3c:	f7ff ff80 	bl	8000a40 <Delay_For_Pin>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40010c00 	.word	0x40010c00

08000b48 <MPU_IIC_Wait_Ack>:
// 等待应答信号到来
// 返回值：1，接收应答失败. 0，接收应答成功
// Wait for the answer signal to arrive.
// Return value: 1, receive and reply failed 0, receive and reply succeeded
uint8_t MPU_IIC_Wait_Ack(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
	MPU_SDA_IN();
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000b58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000b5c:	6053      	str	r3, [r2, #4]
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b68:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(1);delay_us(1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000b72:	f001 fcd4 	bl	800251e <HAL_GPIO_WritePin>
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff ff62 	bl	8000a40 <Delay_For_Pin>
	MPU_IIC_SCL(1);delay_us(1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4812      	ldr	r0, [pc, #72]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000b84:	f001 fccb 	bl	800251e <HAL_GPIO_WritePin>
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff ff59 	bl	8000a40 <Delay_For_Pin>
	while(READ_SDA)
 8000b8e:	e009      	b.n	8000ba4 <MPU_IIC_Wait_Ack+0x5c>
	{
		ucErrTime++;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	3301      	adds	r3, #1
 8000b94:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2bfa      	cmp	r3, #250	; 0xfa
 8000b9a:	d903      	bls.n	8000ba4 <MPU_IIC_Wait_Ack+0x5c>
		{
			MPU_IIC_Stop();
 8000b9c:	f7ff ffa4 	bl	8000ae8 <MPU_IIC_Stop>
			return 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e00e      	b.n	8000bc2 <MPU_IIC_Wait_Ack+0x7a>
	while(READ_SDA)
 8000ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000baa:	f001 fca1 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1ed      	bne.n	8000b90 <MPU_IIC_Wait_Ack+0x48>
		}
	}
	MPU_IIC_SCL(0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MPU_IIC_Wait_Ack+0x84>)
 8000bbc:	f001 fcaf 	bl	800251e <HAL_GPIO_WritePin>
	return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40010c00 	.word	0x40010c00

08000bd0 <MPU_IIC_Ack>:

// Generate AN ACK reply  产生ACK应答
void MPU_IIC_Ack(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	MPU_IIC_SCL(0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000bdc:	f001 fc9f 	bl	800251e <HAL_GPIO_WritePin>
	MPU_SDA_OUT();
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000be6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000bea:	6053      	str	r3, [r2, #4]
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000bf2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000bf6:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000c00:	f001 fc8d 	bl	800251e <HAL_GPIO_WritePin>
	delay_us(2);
 8000c04:	2002      	movs	r0, #2
 8000c06:	f7ff ff1b 	bl	8000a40 <Delay_For_Pin>
	MPU_IIC_SCL(1);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000c12:	f001 fc84 	bl	800251e <HAL_GPIO_WritePin>
	delay_us(2);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f7ff ff12 	bl	8000a40 <Delay_For_Pin>
	MPU_IIC_SCL(0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	4802      	ldr	r0, [pc, #8]	; (8000c2c <MPU_IIC_Ack+0x5c>)
 8000c24:	f001 fc7b 	bl	800251e <HAL_GPIO_WritePin>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <MPU_IIC_NAck>:
// No ACK response is generated  不产生ACK应答
void MPU_IIC_NAck(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	MPU_IIC_SCL(0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c3c:	f001 fc6f 	bl	800251e <HAL_GPIO_WritePin>
	MPU_SDA_OUT();
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000c4a:	6053      	str	r3, [r2, #4]
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c52:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c56:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c60:	f001 fc5d 	bl	800251e <HAL_GPIO_WritePin>
	delay_us(2);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff feeb 	bl	8000a40 <Delay_For_Pin>
	MPU_IIC_SCL(1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c72:	f001 fc54 	bl	800251e <HAL_GPIO_WritePin>
	delay_us(2);
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fee2 	bl	8000a40 <Delay_For_Pin>
	MPU_IIC_SCL(0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c82:	4802      	ldr	r0, [pc, #8]	; (8000c8c <MPU_IIC_NAck+0x5c>)
 8000c84:	f001 fc4b 	bl	800251e <HAL_GPIO_WritePin>
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <MPU_IIC_Send_Byte>:

// IIC发送一个字节，返回从机有无应答，1，有应答，0，无应答
// The IIC sends a byte that returns whether the slave machine answered, 1, yes, 0, no
void MPU_IIC_Send_Byte(uint8_t txd)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
    uint8_t t;
	MPU_SDA_OUT();
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000ca0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ca4:	6053      	str	r3, [r2, #4]
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000cac:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000cb0:	6053      	str	r3, [r2, #4]
    MPU_IIC_SCL(0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4818      	ldr	r0, [pc, #96]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000cba:	f001 fc30 	bl	800251e <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e023      	b.n	8000d0c <MPU_IIC_Send_Byte+0x7c>
    {
        MPU_IIC_SDA((txd&0x80)>>7);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	09db      	lsrs	r3, r3, #7
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000cd2:	f001 fc24 	bl	800251e <HAL_GPIO_WritePin>
        txd<<=1;
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	71fb      	strb	r3, [r7, #7]
		delay_us(2);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff feaf 	bl	8000a40 <Delay_For_Pin>
		MPU_IIC_SCL(1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000cea:	f001 fc18 	bl	800251e <HAL_GPIO_WritePin>
		delay_us(2);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff fea6 	bl	8000a40 <Delay_For_Pin>
		MPU_IIC_SCL(0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfa:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MPU_IIC_Send_Byte+0x8c>)
 8000cfc:	f001 fc0f 	bl	800251e <HAL_GPIO_WritePin>
		delay_us(2);
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff fe9d 	bl	8000a40 <Delay_For_Pin>
    for(t=0;t<8;t++)
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	d9d8      	bls.n	8000cc4 <MPU_IIC_Send_Byte+0x34>
    }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <MPU_IIC_Read_Byte>:
// 读1个字节，ack=1时，发送ACK，ack=0，发送nACK
// Read 1 byte, ack=1, send ACK, ack=0, send nACK
uint8_t MPU_IIC_Read_Byte(unsigned char ack)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73bb      	strb	r3, [r7, #14]
	MPU_SDA_IN();
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MPU_IIC_Read_Byte+0x94>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <MPU_IIC_Read_Byte+0x94>)
 8000d34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d38:	6053      	str	r3, [r2, #4]
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MPU_IIC_Read_Byte+0x94>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <MPU_IIC_Read_Byte+0x94>)
 8000d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d44:	6053      	str	r3, [r2, #4]
    for(i=0;i<8;i++ )
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e022      	b.n	8000d92 <MPU_IIC_Read_Byte+0x72>
	{
        MPU_IIC_SCL(0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	4818      	ldr	r0, [pc, #96]	; (8000db4 <MPU_IIC_Read_Byte+0x94>)
 8000d54:	f001 fbe3 	bl	800251e <HAL_GPIO_WritePin>
        delay_us(2);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fe71 	bl	8000a40 <Delay_For_Pin>
		MPU_IIC_SCL(1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MPU_IIC_Read_Byte+0x94>)
 8000d66:	f001 fbda 	bl	800251e <HAL_GPIO_WritePin>
        receive<<=1;
 8000d6a:	7bbb      	ldrb	r3, [r7, #14]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <MPU_IIC_Read_Byte+0x94>)
 8000d76:	f001 fbbb 	bl	80024f0 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <MPU_IIC_Read_Byte+0x66>
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	3301      	adds	r3, #1
 8000d84:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff fe5a 	bl	8000a40 <Delay_For_Pin>
    for(i=0;i<8;i++ )
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	d9d9      	bls.n	8000d4c <MPU_IIC_Read_Byte+0x2c>
    }
    if (!ack)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <MPU_IIC_Read_Byte+0x84>
        MPU_IIC_NAck();
 8000d9e:	f7ff ff47 	bl	8000c30 <MPU_IIC_NAck>
 8000da2:	e001      	b.n	8000da8 <MPU_IIC_Read_Byte+0x88>
    else
        MPU_IIC_Ack();
 8000da4:	f7ff ff14 	bl	8000bd0 <MPU_IIC_Ack>
    return receive;
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <USART1_Init>:
}VelNow;


// Initialize USART1  初始化串口1
void USART1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4903      	ldr	r1, [pc, #12]	; (8000dcc <USART1_Init+0x14>)
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <USART1_Init+0x18>)
 8000dc2:	f002 f8d6 	bl	8002f72 <HAL_UART_Receive_IT>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000b1 	.word	0x200000b1
 8000dd0:	200000dc 	.word	0x200000dc

08000dd4 <USART1_Data_Init>:
void USART1_Data_Init(unsigned char* p1, short* p2)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	receVelPtr = p2;
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <USART1_Data_Init+0x20>)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	6013      	str	r3, [r2, #0]
	receModePtr = p1;
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <USART1_Data_Init+0x24>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	200000c0 	.word	0x200000c0
 8000df8:	200000c4 	.word	0x200000c4

08000dfc <USART1_Revice_Speed>:
void USART1_Send_U8(uint8_t ch)
{
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
}
void USART1_Revice_Speed(uint8_t Rx_Temp)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
    switch (Rx_Flag)
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <USART1_Revice_Speed+0xa4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d026      	beq.n	8000e5c <USART1_Revice_Speed+0x60>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	dc3b      	bgt.n	8000e8a <USART1_Revice_Speed+0x8e>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <USART1_Revice_Speed+0x20>
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00b      	beq.n	8000e32 <USART1_Revice_Speed+0x36>
            Rx_Flag = 0;
            New_Frame = 1;
        }
        break;
    default:
        break;
 8000e1a:	e036      	b.n	8000e8a <USART1_Revice_Speed+0x8e>
        if (Rx_Temp == header[0])
 8000e1c:	2255      	movs	r2, #85	; 0x55
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d134      	bne.n	8000e8e <USART1_Revice_Speed+0x92>
            Rx_Data[0] = header[0];
 8000e24:	2255      	movs	r2, #85	; 0x55
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <USART1_Revice_Speed+0xa8>)
 8000e28:	701a      	strb	r2, [r3, #0]
            Rx_Flag = 1;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <USART1_Revice_Speed+0xa4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
        break;
 8000e30:	e02d      	b.n	8000e8e <USART1_Revice_Speed+0x92>
        if (Rx_Temp == header[1])
 8000e32:	22aa      	movs	r2, #170	; 0xaa
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d109      	bne.n	8000e4e <USART1_Revice_Speed+0x52>
            Rx_Data[1] = header[1];
 8000e3a:	22aa      	movs	r2, #170	; 0xaa
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <USART1_Revice_Speed+0xa8>)
 8000e3e:	705a      	strb	r2, [r3, #1]
            Rx_Flag = 2;
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <USART1_Revice_Speed+0xa4>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
            Rx_index = 2;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <USART1_Revice_Speed+0xac>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	701a      	strb	r2, [r3, #0]
        break;
 8000e4c:	e022      	b.n	8000e94 <USART1_Revice_Speed+0x98>
            Rx_Flag = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <USART1_Revice_Speed+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
            Rx_Data[0] = 0x0;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <USART1_Revice_Speed+0xa8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
        break;
 8000e5a:	e01b      	b.n	8000e94 <USART1_Revice_Speed+0x98>
        Rx_Data[Rx_index] = Rx_Temp;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <USART1_Revice_Speed+0xac>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <USART1_Revice_Speed+0xa8>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	5453      	strb	r3, [r2, r1]
        Rx_index++;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <USART1_Revice_Speed+0xac>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <USART1_Revice_Speed+0xac>)
 8000e72:	701a      	strb	r2, [r3, #0]
        if (Rx_index >= RX_MAX_BUF)
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <USART1_Revice_Speed+0xac>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d90a      	bls.n	8000e92 <USART1_Revice_Speed+0x96>
            Rx_Flag = 0;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <USART1_Revice_Speed+0xa4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
            New_Frame = 1;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <USART1_Revice_Speed+0xb0>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
        break;
 8000e88:	e003      	b.n	8000e92 <USART1_Revice_Speed+0x96>
        break;
 8000e8a:	bf00      	nop
 8000e8c:	e002      	b.n	8000e94 <USART1_Revice_Speed+0x98>
        break;
 8000e8e:	bf00      	nop
 8000e90:	e000      	b.n	8000e94 <USART1_Revice_Speed+0x98>
        break;
 8000e92:	bf00      	nop
    }
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200000be 	.word	0x200000be
 8000ea4:	200000b4 	.word	0x200000b4
 8000ea8:	200000bd 	.word	0x200000bd
 8000eac:	200000b2 	.word	0x200000b2

08000eb0 <usartSendMeterData>:
{
	int16_t d;
	unsigned char data[2];
}gxData, gyData, gzData;
void usartSendMeterData(int16_t gx, int16_t gy, int16_t gz)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	807b      	strh	r3, [r7, #2]
	unsigned char buf[12] = {0};
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
	int i, length = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
	gxData.d  = gx;
 8000ed4:	4a39      	ldr	r2, [pc, #228]	; (8000fbc <usartSendMeterData+0x10c>)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	8013      	strh	r3, [r2, #0]
	gyData.d  = gy;
 8000eda:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <usartSendMeterData+0x110>)
 8000edc:	88bb      	ldrh	r3, [r7, #4]
 8000ede:	8013      	strh	r3, [r2, #0]
	gzData.d  = gz;
 8000ee0:	4a38      	ldr	r2, [pc, #224]	; (8000fc4 <usartSendMeterData+0x114>)
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 2; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e00c      	b.n	8000f06 <usartSendMeterData+0x56>
		buf[i] = header[i]; // buf[0] buf[1]
 8000eec:	4a36      	ldr	r2, [pc, #216]	; (8000fc8 <usartSendMeterData+0x118>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	7819      	ldrb	r1, [r3, #0]
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4413      	add	r3, r2
 8000efc:	460a      	mov	r2, r1
 8000efe:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	3301      	adds	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	ddef      	ble.n	8000eec <usartSendMeterData+0x3c>
	length = 6;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	61bb      	str	r3, [r7, #24]
	buf[2] = length;
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < 2; ++i)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e020      	b.n	8000f5e <usartSendMeterData+0xae>
	{
		buf[3+i] = gxData.data[i];
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	3303      	adds	r3, #3
 8000f20:	4926      	ldr	r1, [pc, #152]	; (8000fbc <usartSendMeterData+0x10c>)
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	440a      	add	r2, r1
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	3320      	adds	r3, #32
 8000f2a:	443b      	add	r3, r7
 8000f2c:	f803 2c14 	strb.w	r2, [r3, #-20]
		buf[5+i] = gyData.data[i];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3305      	adds	r3, #5
 8000f34:	4922      	ldr	r1, [pc, #136]	; (8000fc0 <usartSendMeterData+0x110>)
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	440a      	add	r2, r1
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	3320      	adds	r3, #32
 8000f3e:	443b      	add	r3, r7
 8000f40:	f803 2c14 	strb.w	r2, [r3, #-20]
		buf[7+i] = gzData.data[i];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3307      	adds	r3, #7
 8000f48:	491e      	ldr	r1, [pc, #120]	; (8000fc4 <usartSendMeterData+0x114>)
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	440a      	add	r2, r1
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	3320      	adds	r3, #32
 8000f52:	443b      	add	r3, r7
 8000f54:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 2; ++i)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	dddb      	ble.n	8000f1c <usartSendMeterData+0x6c>
	}
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3303      	adds	r3, #3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	1cdc      	adds	r4, r3, #3
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f828 	bl	8000fcc <getCrc8>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f104 0320 	add.w	r3, r4, #32
 8000f84:	443b      	add	r3, r7
 8000f86:	f803 2c14 	strb.w	r2, [r3, #-20]
	buf[3 + length + 1] = ender[0];              // buf[11]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	220d      	movs	r2, #13
 8000f90:	3320      	adds	r3, #32
 8000f92:	443b      	add	r3, r7
 8000f94:	f803 2c14 	strb.w	r2, [r3, #-20]
	buf[3 + length + 2] = ender[1];              // buf[12]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	3305      	adds	r3, #5
 8000f9c:	220a      	movs	r2, #10
 8000f9e:	3320      	adds	r3, #32
 8000fa0:	443b      	add	r3, r7
 8000fa2:	f803 2c14 	strb.w	r2, [r3, #-20]

	USART_Send_String(buf,sizeof(buf));
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	210c      	movs	r1, #12
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f841 	bl	8001034 <USART_Send_String>
}
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200000c8 	.word	0x200000c8
 8000fc0:	200000cc 	.word	0x200000cc
 8000fc4:	200000d0 	.word	0x200000d0
 8000fc8:	0800494c 	.word	0x0800494c

08000fcc <getCrc8>:
unsigned char getCrc8(unsigned char *ptr, unsigned short len)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
	unsigned char crc;
		unsigned char i;
		crc = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
		while(len--)
 8000fdc:	e01f      	b.n	800101e <getCrc8+0x52>
		{
			crc ^= *ptr++;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4053      	eors	r3, r2
 8000fea:	73fb      	strb	r3, [r7, #15]
			for(i = 0; i < 8; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	73bb      	strb	r3, [r7, #14]
 8000ff0:	e012      	b.n	8001018 <getCrc8+0x4c>
			{
				if(crc&0x01)
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <getCrc8+0x40>
	                crc=(crc>>1)^0x8C;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001006:	43db      	mvns	r3, r3
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e002      	b.n	8001012 <getCrc8+0x46>
				else
	                crc >>= 1;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
			for(i = 0; i < 8; i++)
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	3301      	adds	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	2b07      	cmp	r3, #7
 800101c:	d9e9      	bls.n	8000ff2 <getCrc8+0x26>
		while(len--)
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	807a      	strh	r2, [r7, #2]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1da      	bne.n	8000fde <getCrc8+0x12>
			}
		}
		return crc;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <USART_Send_String>:
void USART_Send_String(uint8_t *p,uint16_t sendSize)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
	static int length =0;
	while(length<sendSize)
 8001040:	e012      	b.n	8001068 <USART_Send_String+0x34>
	{

		while( !(USART1->SR&(0x01<<7)) );
 8001042:	bf00      	nop
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <USART_Send_String+0x50>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f9      	beq.n	8001044 <USART_Send_String+0x10>
		USART1->DR=*p;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <USART_Send_String+0x50>)
 8001056:	605a      	str	r2, [r3, #4]
		p++;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
		length++;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <USART_Send_String+0x54>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <USART_Send_String+0x54>)
 8001066:	6013      	str	r3, [r2, #0]
	while(length<sendSize)
 8001068:	887a      	ldrh	r2, [r7, #2]
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <USART_Send_String+0x54>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	dce7      	bgt.n	8001042 <USART_Send_String+0xe>
	}
	length =0;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <USART_Send_String+0x54>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40013800 	.word	0x40013800
 8001088:	200000d4 	.word	0x200000d4

0800108c <HAL_UART_RxCpltCallback>:
    #endif
}

// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    //USART1_Send_U8(RxTemp);
    USART1_Revice_Speed(RxTemp);
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_UART_RxCpltCallback+0x24>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff feaf 	bl	8000dfc <USART1_Revice_Speed>
    // Continue receiving data  继续接收数据
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	4903      	ldr	r1, [pc, #12]	; (80010b0 <HAL_UART_RxCpltCallback+0x24>)
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <HAL_UART_RxCpltCallback+0x28>)
 80010a4:	f001 ff65 	bl	8002f72 <HAL_UART_Receive_IT>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000b1 	.word	0x200000b1
 80010b4:	200000dc 	.word	0x200000dc

080010b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	2201      	movs	r2, #1
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <__io_putchar+0x20>)
 80010ca:	f001 fec0 	bl	8002e4e <HAL_UART_Transmit>
    return ch;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000dc 	.word	0x200000dc

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_DMA_Init+0x38>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <MX_DMA_Init+0x38>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_DMA_Init+0x38>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	200e      	movs	r0, #14
 8001100:	f000 fc37 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001104:	200e      	movs	r0, #14
 8001106:	f000 fc50 	bl	80019aa <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <MX_GPIO_Init+0x114>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a3e      	ldr	r2, [pc, #248]	; (800122c <MX_GPIO_Init+0x114>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <MX_GPIO_Init+0x114>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <MX_GPIO_Init+0x114>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a38      	ldr	r2, [pc, #224]	; (800122c <MX_GPIO_Init+0x114>)
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <MX_GPIO_Init+0x114>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <MX_GPIO_Init+0x114>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a32      	ldr	r2, [pc, #200]	; (800122c <MX_GPIO_Init+0x114>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <MX_GPIO_Init+0x114>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_GPIO_Init+0x114>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a2c      	ldr	r2, [pc, #176]	; (800122c <MX_GPIO_Init+0x114>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <MX_GPIO_Init+0x114>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f242 0120 	movw	r1, #8224	; 0x2020
 8001192:	4827      	ldr	r0, [pc, #156]	; (8001230 <MX_GPIO_Init+0x118>)
 8001194:	f001 f9c3 	bl	800251e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU_SCL_Pin|MPU_SDA_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800119e:	4825      	ldr	r0, [pc, #148]	; (8001234 <MX_GPIO_Init+0x11c>)
 80011a0:	f001 f9bd 	bl	800251e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_AD0_GPIO_Port, MPU_AD0_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011aa:	4822      	ldr	r0, [pc, #136]	; (8001234 <MX_GPIO_Init+0x11c>)
 80011ac:	f001 f9b7 	bl	800251e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 80011b0:	f242 0320 	movw	r3, #8224	; 0x2020
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	4819      	ldr	r0, [pc, #100]	; (8001230 <MX_GPIO_Init+0x118>)
 80011ca:	f000 fffd 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 80011ce:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4813      	ldr	r0, [pc, #76]	; (8001234 <MX_GPIO_Init+0x11c>)
 80011e8:	f000 ffee 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_AD0_Pin;
 80011ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_AD0_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <MX_GPIO_Init+0x11c>)
 8001206:	f000 ffdf 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800120a:	2304      	movs	r3, #4
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_GPIO_Init+0x120>)
 800121e:	f000 ffd3 	bl	80021c8 <HAL_GPIO_Init>

}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40011000 	.word	0x40011000
 8001234:	40010c00 	.word	0x40010c00
 8001238:	40011400 	.word	0x40011400

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f000 fa3a 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 f80b 	bl	800125e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f7ff ff66 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 800124c:	f7ff ff46 	bl	80010dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001250:	f000 f964 	bl	800151c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Bsp_Init();
 8001254:	f7ff f800 	bl	8000258 <Bsp_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Bsp_Loop();
 8001258:	f7ff f82e 	bl	80002b8 <Bsp_Loop>
 800125c:	e7fc      	b.n	8001258 <main+0x1c>

0800125e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b090      	sub	sp, #64	; 0x40
 8001262:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	2228      	movs	r2, #40	; 0x28
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fb03 	bl	8003878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001288:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800129c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 f96a 	bl	8002580 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012b2:	f000 f819 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2302      	movs	r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2102      	movs	r1, #2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fbd7 	bl	8002a84 <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012dc:	f000 f804 	bl	80012e8 <Error_Handler>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3740      	adds	r7, #64	; 0x40
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_MspInit+0x5c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_MspInit+0x5c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_MspInit+0x60>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_MspInit+0x60>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139e:	f000 f9d1 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA1_Channel4_IRQHandler+0x10>)
 80013ae:	f000 fccf 	bl	8001d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000120 	.word	0x20000120

080013bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <USART1_IRQHandler+0x10>)
 80013c2:	f001 fe07 	bl	8002fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200000dc 	.word	0x200000dc

080013d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
	}

return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e009      	b.n	8001430 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe47 	bl	80010b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf1      	blt.n	800141c <_write+0x12>
	}
	return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_close>:

int _close(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	return -1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001468:	605a      	str	r2, [r3, #4]
	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <_isatty>:

int _isatty(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
	...

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f002 f9a6 	bl	8003824 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000c000 	.word	0x2000c000
 8001504:	00000400 	.word	0x00000400
 8001508:	200000d8 	.word	0x200000d8
 800150c:	20000178 	.word	0x20000178

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART1_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001554:	f001 fc2e 	bl	8002db4 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f7ff fec3 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200000dc 	.word	0x200000dc
 800156c:	40013800 	.word	0x40013800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a33      	ldr	r2, [pc, #204]	; (8001658 <HAL_UART_MspInit+0xe8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d15f      	bne.n	8001650 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_UART_MspInit+0xec>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a31      	ldr	r2, [pc, #196]	; (800165c <HAL_UART_MspInit+0xec>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_UART_MspInit+0xec>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <HAL_UART_MspInit+0xec>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a2b      	ldr	r2, [pc, #172]	; (800165c <HAL_UART_MspInit+0xec>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <HAL_UART_MspInit+0xec>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	4822      	ldr	r0, [pc, #136]	; (8001660 <HAL_UART_MspInit+0xf0>)
 80015d6:	f000 fdf7 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	481c      	ldr	r0, [pc, #112]	; (8001660 <HAL_UART_MspInit+0xf0>)
 80015f0:	f000 fdea 	bl	80021c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_UART_MspInit+0xf4>)
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_UART_MspInit+0xf8>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_UART_MspInit+0xf4>)
 80015fc:	2210      	movs	r2, #16
 80015fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_UART_MspInit+0xf4>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_UART_MspInit+0xf4>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001626:	f000 f9db 	bl	80019e0 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001630:	f7ff fe5a 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_UART_MspInit+0xf4>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2025      	movs	r0, #37	; 0x25
 8001646:	f000 f994 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800164a:	2025      	movs	r0, #37	; 0x25
 800164c:	f000 f9ad 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013800 	.word	0x40013800
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800
 8001664:	20000120 	.word	0x20000120
 8001668:	40020044 	.word	0x40020044

0800166c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	; (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	; (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001692:	f7ff ff3d 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001696:	f002 f8cb 	bl	8003830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169a:	f7ff fdcf 	bl	800123c <main>
  bx lr
 800169e:	4770      	bx	lr
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016a8:	08004a08 	.word	0x08004a08
  ldr r2, =_sbss
 80016ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016b0:	20000178 	.word	0x20000178

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x28>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x28>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 f947 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fe0e 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f95f 	bl	80019c6 <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 f927 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000004 	.word	0x20000004
 800173c:	2000000c 	.word	0x2000000c
 8001740:	20000008 	.word	0x20000008

08001744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x1c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x20>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_IncTick+0x20>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	2000000c 	.word	0x2000000c
 8001764:	20000164 	.word	0x20000164

08001768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <HAL_GetTick+0x10>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	20000164 	.word	0x20000164

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff fff0 	bl	8001768 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffe0 	bl	8001768 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4906      	ldr	r1, [pc, #24]	; (800185c <__NVIC_EnableIRQ+0x34>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff90 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff2d 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff42 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff90 	bl	80018b4 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5f 	bl	8001860 <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff35 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e059      	b.n	8001aaa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_DMA_Init+0xd4>)
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d80f      	bhi.n	8001a22 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_DMA_Init+0xd8>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_DMA_Init+0xdc>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	009a      	lsls	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <HAL_DMA_Init+0xe0>)
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a20:	e00e      	b.n	8001a40 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_DMA_Init+0xe4>)
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_DMA_Init+0xdc>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	009a      	lsls	r2, r3, #2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_DMA_Init+0xe8>)
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	40020407 	.word	0x40020407
 8001ab8:	bffdfff8 	.word	0xbffdfff8
 8001abc:	cccccccd 	.word	0xcccccccd
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	bffdfbf8 	.word	0xbffdfbf8
 8001ac8:	40020400 	.word	0x40020400

08001acc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d008      	beq.n	8001af4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e020      	b.n	8001b36 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 020e 	bic.w	r2, r2, #14
 8001b02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d005      	beq.n	8001b62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e0d6      	b.n	8001d10 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 020e 	bic.w	r2, r2, #14
 8001b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <HAL_DMA_Abort_IT+0x1dc>)
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d958      	bls.n	8001c40 <HAL_DMA_Abort_IT+0x100>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a63      	ldr	r2, [pc, #396]	; (8001d20 <HAL_DMA_Abort_IT+0x1e0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04f      	beq.n	8001c38 <HAL_DMA_Abort_IT+0xf8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a61      	ldr	r2, [pc, #388]	; (8001d24 <HAL_DMA_Abort_IT+0x1e4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d048      	beq.n	8001c34 <HAL_DMA_Abort_IT+0xf4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <HAL_DMA_Abort_IT+0x1e8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_Abort_IT+0xee>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a5e      	ldr	r2, [pc, #376]	; (8001d2c <HAL_DMA_Abort_IT+0x1ec>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d038      	beq.n	8001c28 <HAL_DMA_Abort_IT+0xe8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a5d      	ldr	r2, [pc, #372]	; (8001d30 <HAL_DMA_Abort_IT+0x1f0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d030      	beq.n	8001c22 <HAL_DMA_Abort_IT+0xe2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5b      	ldr	r2, [pc, #364]	; (8001d34 <HAL_DMA_Abort_IT+0x1f4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d028      	beq.n	8001c1c <HAL_DMA_Abort_IT+0xdc>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a53      	ldr	r2, [pc, #332]	; (8001d1c <HAL_DMA_Abort_IT+0x1dc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d020      	beq.n	8001c16 <HAL_DMA_Abort_IT+0xd6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a57      	ldr	r2, [pc, #348]	; (8001d38 <HAL_DMA_Abort_IT+0x1f8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_DMA_Abort_IT+0xd2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a56      	ldr	r2, [pc, #344]	; (8001d3c <HAL_DMA_Abort_IT+0x1fc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_Abort_IT+0xce>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a54      	ldr	r2, [pc, #336]	; (8001d40 <HAL_DMA_Abort_IT+0x200>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00a      	beq.n	8001c08 <HAL_DMA_Abort_IT+0xc8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a53      	ldr	r2, [pc, #332]	; (8001d44 <HAL_DMA_Abort_IT+0x204>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <HAL_DMA_Abort_IT+0xc2>
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	e01b      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c06:	e018      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0c:	e015      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c0e:	2310      	movs	r3, #16
 8001c10:	e013      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e011      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c1a:	e00e      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c20:	e00b      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c26:	e008      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	e005      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c32:	e002      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c34:	2310      	movs	r3, #16
 8001c36:	e000      	b.n	8001c3a <HAL_DMA_Abort_IT+0xfa>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4a43      	ldr	r2, [pc, #268]	; (8001d48 <HAL_DMA_Abort_IT+0x208>)
 8001c3c:	6053      	str	r3, [r2, #4]
 8001c3e:	e057      	b.n	8001cf0 <HAL_DMA_Abort_IT+0x1b0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a36      	ldr	r2, [pc, #216]	; (8001d20 <HAL_DMA_Abort_IT+0x1e0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d04f      	beq.n	8001cea <HAL_DMA_Abort_IT+0x1aa>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a35      	ldr	r2, [pc, #212]	; (8001d24 <HAL_DMA_Abort_IT+0x1e4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d048      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x1a6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a33      	ldr	r2, [pc, #204]	; (8001d28 <HAL_DMA_Abort_IT+0x1e8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d040      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x1a0>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <HAL_DMA_Abort_IT+0x1ec>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d038      	beq.n	8001cda <HAL_DMA_Abort_IT+0x19a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a30      	ldr	r2, [pc, #192]	; (8001d30 <HAL_DMA_Abort_IT+0x1f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d030      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x194>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a2f      	ldr	r2, [pc, #188]	; (8001d34 <HAL_DMA_Abort_IT+0x1f4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d028      	beq.n	8001cce <HAL_DMA_Abort_IT+0x18e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_DMA_Abort_IT+0x1dc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d020      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x188>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <HAL_DMA_Abort_IT+0x1f8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d019      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x184>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <HAL_DMA_Abort_IT+0x1fc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d012      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x180>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <HAL_DMA_Abort_IT+0x200>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00a      	beq.n	8001cba <HAL_DMA_Abort_IT+0x17a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <HAL_DMA_Abort_IT+0x204>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d102      	bne.n	8001cb4 <HAL_DMA_Abort_IT+0x174>
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	e01b      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb8:	e018      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbe:	e015      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	e013      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e011      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ccc:	e00e      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cd2:	e00b      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd8:	e008      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	e005      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce4:	e002      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	e000      	b.n	8001cec <HAL_DMA_Abort_IT+0x1ac>
 8001cea:	2301      	movs	r3, #1
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_DMA_Abort_IT+0x20c>)
 8001cee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
    } 
  }
  return status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40020080 	.word	0x40020080
 8001d20:	40020008 	.word	0x40020008
 8001d24:	4002001c 	.word	0x4002001c
 8001d28:	40020030 	.word	0x40020030
 8001d2c:	40020044 	.word	0x40020044
 8001d30:	40020058 	.word	0x40020058
 8001d34:	4002006c 	.word	0x4002006c
 8001d38:	40020408 	.word	0x40020408
 8001d3c:	4002041c 	.word	0x4002041c
 8001d40:	40020430 	.word	0x40020430
 8001d44:	40020444 	.word	0x40020444
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020000 	.word	0x40020000

08001d50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80f1 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x20c>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80eb 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <HAL_DMA_IRQHandler+0x1d8>)
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d958      	bls.n	8001e62 <HAL_DMA_IRQHandler+0x112>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_DMA_IRQHandler+0x1dc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d04f      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x10a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <HAL_DMA_IRQHandler+0x1e0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d048      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x106>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5a      	ldr	r2, [pc, #360]	; (8001f34 <HAL_DMA_IRQHandler+0x1e4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d040      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x100>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a59      	ldr	r2, [pc, #356]	; (8001f38 <HAL_DMA_IRQHandler+0x1e8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d038      	beq.n	8001e4a <HAL_DMA_IRQHandler+0xfa>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a57      	ldr	r2, [pc, #348]	; (8001f3c <HAL_DMA_IRQHandler+0x1ec>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d030      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xf4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a56      	ldr	r2, [pc, #344]	; (8001f40 <HAL_DMA_IRQHandler+0x1f0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d028      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xee>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_DMA_IRQHandler+0x1d8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d020      	beq.n	8001e38 <HAL_DMA_IRQHandler+0xe8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_DMA_IRQHandler+0x1f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d019      	beq.n	8001e34 <HAL_DMA_IRQHandler+0xe4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a50      	ldr	r2, [pc, #320]	; (8001f48 <HAL_DMA_IRQHandler+0x1f8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xe0>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_DMA_IRQHandler+0x1fc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00a      	beq.n	8001e2a <HAL_DMA_IRQHandler+0xda>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_DMA_IRQHandler+0x200>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d102      	bne.n	8001e24 <HAL_DMA_IRQHandler+0xd4>
 8001e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e22:	e01b      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e28:	e018      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2e:	e015      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e30:	2340      	movs	r3, #64	; 0x40
 8001e32:	e013      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e011      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e3c:	e00e      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e42:	e00b      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e48:	e008      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e4e:	e005      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e54:	e002      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e56:	2340      	movs	r3, #64	; 0x40
 8001e58:	e000      	b.n	8001e5c <HAL_DMA_IRQHandler+0x10c>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <HAL_DMA_IRQHandler+0x204>)
 8001e5e:	6053      	str	r3, [r2, #4]
 8001e60:	e057      	b.n	8001f12 <HAL_DMA_IRQHandler+0x1c2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <HAL_DMA_IRQHandler+0x1dc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d04f      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x1bc>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <HAL_DMA_IRQHandler+0x1e0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d048      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x1b8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a2e      	ldr	r2, [pc, #184]	; (8001f34 <HAL_DMA_IRQHandler+0x1e4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d040      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x1b2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2c      	ldr	r2, [pc, #176]	; (8001f38 <HAL_DMA_IRQHandler+0x1e8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d038      	beq.n	8001efc <HAL_DMA_IRQHandler+0x1ac>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2b      	ldr	r2, [pc, #172]	; (8001f3c <HAL_DMA_IRQHandler+0x1ec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d030      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x1a6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_DMA_IRQHandler+0x1f0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d028      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x1a0>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <HAL_DMA_IRQHandler+0x1d8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d020      	beq.n	8001eea <HAL_DMA_IRQHandler+0x19a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <HAL_DMA_IRQHandler+0x1f4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x196>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_DMA_IRQHandler+0x1f8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d012      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x192>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <HAL_DMA_IRQHandler+0x1fc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00a      	beq.n	8001edc <HAL_DMA_IRQHandler+0x18c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <HAL_DMA_IRQHandler+0x200>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d102      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x186>
 8001ed0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ed4:	e01b      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001ed6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001eda:	e018      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee0:	e015      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	e013      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e011      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001eea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001eee:	e00e      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001ef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ef4:	e00b      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001ef6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001efa:	e008      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001efc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f00:	e005      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f06:	e002      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001f08:	2340      	movs	r3, #64	; 0x40
 8001f0a:	e000      	b.n	8001f0e <HAL_DMA_IRQHandler+0x1be>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_DMA_IRQHandler+0x208>)
 8001f10:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8136 	beq.w	8002188 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f24:	e130      	b.n	8002188 <HAL_DMA_IRQHandler+0x438>
 8001f26:	bf00      	nop
 8001f28:	40020080 	.word	0x40020080
 8001f2c:	40020008 	.word	0x40020008
 8001f30:	4002001c 	.word	0x4002001c
 8001f34:	40020030 	.word	0x40020030
 8001f38:	40020044 	.word	0x40020044
 8001f3c:	40020058 	.word	0x40020058
 8001f40:	4002006c 	.word	0x4002006c
 8001f44:	40020408 	.word	0x40020408
 8001f48:	4002041c 	.word	0x4002041c
 8001f4c:	40020430 	.word	0x40020430
 8001f50:	40020444 	.word	0x40020444
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2202      	movs	r2, #2
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80dd 	beq.w	8002128 <HAL_DMA_IRQHandler+0x3d8>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80d7 	beq.w	8002128 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10b      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 020a 	bic.w	r2, r2, #10
 8001f96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <HAL_DMA_IRQHandler+0x444>)
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d958      	bls.n	800205e <HAL_DMA_IRQHandler+0x30e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a79      	ldr	r2, [pc, #484]	; (8002198 <HAL_DMA_IRQHandler+0x448>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d04f      	beq.n	8002056 <HAL_DMA_IRQHandler+0x306>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a78      	ldr	r2, [pc, #480]	; (800219c <HAL_DMA_IRQHandler+0x44c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d048      	beq.n	8002052 <HAL_DMA_IRQHandler+0x302>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a76      	ldr	r2, [pc, #472]	; (80021a0 <HAL_DMA_IRQHandler+0x450>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_DMA_IRQHandler+0x2fc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_DMA_IRQHandler+0x454>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d038      	beq.n	8002046 <HAL_DMA_IRQHandler+0x2f6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a73      	ldr	r2, [pc, #460]	; (80021a8 <HAL_DMA_IRQHandler+0x458>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d030      	beq.n	8002040 <HAL_DMA_IRQHandler+0x2f0>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a72      	ldr	r2, [pc, #456]	; (80021ac <HAL_DMA_IRQHandler+0x45c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d028      	beq.n	800203a <HAL_DMA_IRQHandler+0x2ea>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a69      	ldr	r2, [pc, #420]	; (8002194 <HAL_DMA_IRQHandler+0x444>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d020      	beq.n	8002034 <HAL_DMA_IRQHandler+0x2e4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <HAL_DMA_IRQHandler+0x460>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d019      	beq.n	8002030 <HAL_DMA_IRQHandler+0x2e0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <HAL_DMA_IRQHandler+0x464>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d012      	beq.n	800202c <HAL_DMA_IRQHandler+0x2dc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6b      	ldr	r2, [pc, #428]	; (80021b8 <HAL_DMA_IRQHandler+0x468>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00a      	beq.n	8002026 <HAL_DMA_IRQHandler+0x2d6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_DMA_IRQHandler+0x46c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d102      	bne.n	8002020 <HAL_DMA_IRQHandler+0x2d0>
 800201a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201e:	e01b      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002024:	e018      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202a:	e015      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 800202c:	2320      	movs	r3, #32
 800202e:	e013      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002030:	2302      	movs	r3, #2
 8002032:	e011      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002038:	e00e      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 800203a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800203e:	e00b      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002044:	e008      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204a:	e005      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 800204c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002050:	e002      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002052:	2320      	movs	r3, #32
 8002054:	e000      	b.n	8002058 <HAL_DMA_IRQHandler+0x308>
 8002056:	2302      	movs	r3, #2
 8002058:	4a59      	ldr	r2, [pc, #356]	; (80021c0 <HAL_DMA_IRQHandler+0x470>)
 800205a:	6053      	str	r3, [r2, #4]
 800205c:	e057      	b.n	800210e <HAL_DMA_IRQHandler+0x3be>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a4d      	ldr	r2, [pc, #308]	; (8002198 <HAL_DMA_IRQHandler+0x448>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d04f      	beq.n	8002108 <HAL_DMA_IRQHandler+0x3b8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a4b      	ldr	r2, [pc, #300]	; (800219c <HAL_DMA_IRQHandler+0x44c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d048      	beq.n	8002104 <HAL_DMA_IRQHandler+0x3b4>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a4a      	ldr	r2, [pc, #296]	; (80021a0 <HAL_DMA_IRQHandler+0x450>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d040      	beq.n	80020fe <HAL_DMA_IRQHandler+0x3ae>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a48      	ldr	r2, [pc, #288]	; (80021a4 <HAL_DMA_IRQHandler+0x454>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d038      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x3a8>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a47      	ldr	r2, [pc, #284]	; (80021a8 <HAL_DMA_IRQHandler+0x458>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d030      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x3a2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a45      	ldr	r2, [pc, #276]	; (80021ac <HAL_DMA_IRQHandler+0x45c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d028      	beq.n	80020ec <HAL_DMA_IRQHandler+0x39c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a3d      	ldr	r2, [pc, #244]	; (8002194 <HAL_DMA_IRQHandler+0x444>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d020      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x396>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a41      	ldr	r2, [pc, #260]	; (80021b0 <HAL_DMA_IRQHandler+0x460>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d019      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x392>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <HAL_DMA_IRQHandler+0x464>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d012      	beq.n	80020de <HAL_DMA_IRQHandler+0x38e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3e      	ldr	r2, [pc, #248]	; (80021b8 <HAL_DMA_IRQHandler+0x468>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00a      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x388>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <HAL_DMA_IRQHandler+0x46c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d102      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x382>
 80020cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d0:	e01b      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d6:	e018      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020dc:	e015      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020de:	2320      	movs	r3, #32
 80020e0:	e013      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e011      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ea:	e00e      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020f0:	e00b      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f6:	e008      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fc:	e005      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 80020fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002102:	e002      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 8002104:	2320      	movs	r3, #32
 8002106:	e000      	b.n	800210a <HAL_DMA_IRQHandler+0x3ba>
 8002108:	2302      	movs	r3, #2
 800210a:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <HAL_DMA_IRQHandler+0x474>)
 800210c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	d034      	beq.n	8002188 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002126:	e02f      	b.n	8002188 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2208      	movs	r2, #8
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d028      	beq.n	800218a <HAL_DMA_IRQHandler+0x43a>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d023      	beq.n	800218a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 020e 	bic.w	r2, r2, #14
 8002150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
    }
  }
  return;
 8002188:	bf00      	nop
 800218a:	bf00      	nop
}
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020080 	.word	0x40020080
 8002198:	40020008 	.word	0x40020008
 800219c:	4002001c 	.word	0x4002001c
 80021a0:	40020030 	.word	0x40020030
 80021a4:	40020044 	.word	0x40020044
 80021a8:	40020058 	.word	0x40020058
 80021ac:	4002006c 	.word	0x4002006c
 80021b0:	40020408 	.word	0x40020408
 80021b4:	4002041c 	.word	0x4002041c
 80021b8:	40020430 	.word	0x40020430
 80021bc:	40020444 	.word	0x40020444
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b08b      	sub	sp, #44	; 0x2c
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e179      	b.n	80024d0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021dc:	2201      	movs	r2, #1
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8168 	bne.w	80024ca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a96      	ldr	r2, [pc, #600]	; (8002458 <HAL_GPIO_Init+0x290>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d05e      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002204:	4a94      	ldr	r2, [pc, #592]	; (8002458 <HAL_GPIO_Init+0x290>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d875      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800220a:	4a94      	ldr	r2, [pc, #592]	; (800245c <HAL_GPIO_Init+0x294>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d058      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002210:	4a92      	ldr	r2, [pc, #584]	; (800245c <HAL_GPIO_Init+0x294>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d86f      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002216:	4a92      	ldr	r2, [pc, #584]	; (8002460 <HAL_GPIO_Init+0x298>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d052      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 800221c:	4a90      	ldr	r2, [pc, #576]	; (8002460 <HAL_GPIO_Init+0x298>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d869      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002222:	4a90      	ldr	r2, [pc, #576]	; (8002464 <HAL_GPIO_Init+0x29c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d04c      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002228:	4a8e      	ldr	r2, [pc, #568]	; (8002464 <HAL_GPIO_Init+0x29c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d863      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800222e:	4a8e      	ldr	r2, [pc, #568]	; (8002468 <HAL_GPIO_Init+0x2a0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d046      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
 8002234:	4a8c      	ldr	r2, [pc, #560]	; (8002468 <HAL_GPIO_Init+0x2a0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d85d      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 800223a:	2b12      	cmp	r3, #18
 800223c:	d82a      	bhi.n	8002294 <HAL_GPIO_Init+0xcc>
 800223e:	2b12      	cmp	r3, #18
 8002240:	d859      	bhi.n	80022f6 <HAL_GPIO_Init+0x12e>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <HAL_GPIO_Init+0x80>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	080022c3 	.word	0x080022c3
 800224c:	0800229d 	.word	0x0800229d
 8002250:	080022af 	.word	0x080022af
 8002254:	080022f1 	.word	0x080022f1
 8002258:	080022f7 	.word	0x080022f7
 800225c:	080022f7 	.word	0x080022f7
 8002260:	080022f7 	.word	0x080022f7
 8002264:	080022f7 	.word	0x080022f7
 8002268:	080022f7 	.word	0x080022f7
 800226c:	080022f7 	.word	0x080022f7
 8002270:	080022f7 	.word	0x080022f7
 8002274:	080022f7 	.word	0x080022f7
 8002278:	080022f7 	.word	0x080022f7
 800227c:	080022f7 	.word	0x080022f7
 8002280:	080022f7 	.word	0x080022f7
 8002284:	080022f7 	.word	0x080022f7
 8002288:	080022f7 	.word	0x080022f7
 800228c:	080022a5 	.word	0x080022a5
 8002290:	080022b9 	.word	0x080022b9
 8002294:	4a75      	ldr	r2, [pc, #468]	; (800246c <HAL_GPIO_Init+0x2a4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800229a:	e02c      	b.n	80022f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	623b      	str	r3, [r7, #32]
          break;
 80022a2:	e029      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	3304      	adds	r3, #4
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e024      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	3308      	adds	r3, #8
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e01f      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	330c      	adds	r3, #12
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e01a      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ca:	2304      	movs	r3, #4
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e013      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d8:	2308      	movs	r3, #8
 80022da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	611a      	str	r2, [r3, #16]
          break;
 80022e2:	e009      	b.n	80022f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e4:	2308      	movs	r3, #8
 80022e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	615a      	str	r2, [r3, #20]
          break;
 80022ee:	e003      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
          break;
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x130>
          break;
 80022f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2bff      	cmp	r3, #255	; 0xff
 80022fc:	d801      	bhi.n	8002302 <HAL_GPIO_Init+0x13a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	e001      	b.n	8002306 <HAL_GPIO_Init+0x13e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2bff      	cmp	r3, #255	; 0xff
 800230c:	d802      	bhi.n	8002314 <HAL_GPIO_Init+0x14c>
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x152>
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	3b08      	subs	r3, #8
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	210f      	movs	r1, #15
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	431a      	orrs	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80c1 	beq.w	80024ca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002348:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_GPIO_Init+0x2a8>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a48      	ldr	r2, [pc, #288]	; (8002470 <HAL_GPIO_Init+0x2a8>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_GPIO_Init+0x2a8>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002360:	4a44      	ldr	r2, [pc, #272]	; (8002474 <HAL_GPIO_Init+0x2ac>)
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3c      	ldr	r2, [pc, #240]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d01f      	beq.n	80023cc <HAL_GPIO_Init+0x204>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3b      	ldr	r2, [pc, #236]	; (800247c <HAL_GPIO_Init+0x2b4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d019      	beq.n	80023c8 <HAL_GPIO_Init+0x200>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <HAL_GPIO_Init+0x2b8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_GPIO_Init+0x1fc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a39      	ldr	r2, [pc, #228]	; (8002484 <HAL_GPIO_Init+0x2bc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00d      	beq.n	80023c0 <HAL_GPIO_Init+0x1f8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a38      	ldr	r2, [pc, #224]	; (8002488 <HAL_GPIO_Init+0x2c0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_Init+0x1f4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_GPIO_Init+0x2c4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_GPIO_Init+0x1f0>
 80023b4:	2305      	movs	r3, #5
 80023b6:	e00a      	b.n	80023ce <HAL_GPIO_Init+0x206>
 80023b8:	2306      	movs	r3, #6
 80023ba:	e008      	b.n	80023ce <HAL_GPIO_Init+0x206>
 80023bc:	2304      	movs	r3, #4
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x206>
 80023c0:	2303      	movs	r3, #3
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x206>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x206>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x206>
 80023cc:	2300      	movs	r3, #0
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023de:	4925      	ldr	r1, [pc, #148]	; (8002474 <HAL_GPIO_Init+0x2ac>)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4924      	ldr	r1, [pc, #144]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4920      	ldr	r1, [pc, #128]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 8002410:	4013      	ands	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	491a      	ldr	r1, [pc, #104]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 8002438:	4013      	ands	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d025      	beq.n	8002494 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4910      	ldr	r1, [pc, #64]	; (8002490 <HAL_GPIO_Init+0x2c8>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]
 8002454:	e025      	b.n	80024a2 <HAL_GPIO_Init+0x2da>
 8002456:	bf00      	nop
 8002458:	10320000 	.word	0x10320000
 800245c:	10310000 	.word	0x10310000
 8002460:	10220000 	.word	0x10220000
 8002464:	10210000 	.word	0x10210000
 8002468:	10120000 	.word	0x10120000
 800246c:	10110000 	.word	0x10110000
 8002470:	40021000 	.word	0x40021000
 8002474:	40010000 	.word	0x40010000
 8002478:	40010800 	.word	0x40010800
 800247c:	40010c00 	.word	0x40010c00
 8002480:	40011000 	.word	0x40011000
 8002484:	40011400 	.word	0x40011400
 8002488:	40011800 	.word	0x40011800
 800248c:	40011c00 	.word	0x40011c00
 8002490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_GPIO_Init+0x324>)
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	43db      	mvns	r3, r3
 800249c:	4913      	ldr	r1, [pc, #76]	; (80024ec <HAL_GPIO_Init+0x324>)
 800249e:	4013      	ands	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_GPIO_Init+0x324>)
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_GPIO_Init+0x324>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
 80024ba:	e006      	b.n	80024ca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_GPIO_Init+0x324>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	4909      	ldr	r1, [pc, #36]	; (80024ec <HAL_GPIO_Init+0x324>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3301      	adds	r3, #1
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f47f ae7e 	bne.w	80021dc <HAL_GPIO_Init+0x14>
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	372c      	adds	r7, #44	; 0x2c
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e001      	b.n	8002512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	807b      	strh	r3, [r7, #2]
 800252a:	4613      	mov	r3, r2
 800252c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252e:	787b      	ldrb	r3, [r7, #1]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002534:	887a      	ldrh	r2, [r7, #2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800253a:	e003      	b.n	8002544 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	611a      	str	r2, [r3, #16]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4013      	ands	r3, r2
 8002566:	041a      	lsls	r2, r3, #16
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43d9      	mvns	r1, r3
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	400b      	ands	r3, r1
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e272      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8087 	beq.w	80026ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d00c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ac:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d112      	bne.n	80025de <HAL_RCC_OscConfig+0x5e>
 80025b8:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d10b      	bne.n	80025de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d06c      	beq.n	80026ac <HAL_RCC_OscConfig+0x12c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d168      	bne.n	80026ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e24c      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x76>
 80025e8:	4b80      	ldr	r3, [pc, #512]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a7f      	ldr	r2, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e02e      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x98>
 80025fe:	4b7b      	ldr	r3, [pc, #492]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7a      	ldr	r2, [pc, #488]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b78      	ldr	r3, [pc, #480]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a77      	ldr	r2, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0xbc>
 8002622:	4b72      	ldr	r3, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a71      	ldr	r2, [pc, #452]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xd4>
 800263c:	4b6b      	ldr	r3, [pc, #428]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6a      	ldr	r2, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a67      	ldr	r2, [pc, #412]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff f884 	bl	8001768 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff f880 	bl	8001768 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e200      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xe4>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff f870 	bl	8001768 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f86c 	bl	8001768 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1ec      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b53      	ldr	r3, [pc, #332]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x10c>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ba:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x18c>
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x176>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c0      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4939      	ldr	r1, [pc, #228]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7ff f825 	bl	8001768 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff f821 	bl	8001768 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a1      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4927      	ldr	r1, [pc, #156]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_RCC_OscConfig+0x270>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff f804 	bl	8001768 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002764:	f7ff f800 	bl	8001768 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e180      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d03a      	beq.n	8002804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d019      	beq.n	80027ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <HAL_RCC_OscConfig+0x274>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe ffe4 	bl	8001768 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe ffe0 	bl	8001768 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e160      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_OscConfig+0x26c>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f000 fad8 	bl	8002d78 <RCC_Delay>
 80027c8:	e01c      	b.n	8002804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RCC_OscConfig+0x274>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7fe ffca 	bl	8001768 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d6:	e00f      	b.n	80027f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe ffc6 	bl	8001768 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d908      	bls.n	80027f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e146      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	42420000 	.word	0x42420000
 80027f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e9      	bne.n	80027d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a6 	beq.w	800295e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b8b      	ldr	r3, [pc, #556]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a87      	ldr	r2, [pc, #540]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	2b00      	cmp	r3, #0
 8002848:	d118      	bne.n	800287c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284a:	4b7f      	ldr	r3, [pc, #508]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7e      	ldr	r2, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002856:	f7fe ff87 	bl	8001768 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7fe ff83 	bl	8001768 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e103      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b75      	ldr	r3, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x4c8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x312>
 8002884:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	e02d      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x334>
 800289a:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a69      	ldr	r2, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a66      	ldr	r2, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6213      	str	r3, [r2, #32]
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x356>
 80028bc:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a60      	ldr	r2, [pc, #384]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x36e>
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6213      	str	r3, [r2, #32]
 80028e2:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7fe ff37 	bl	8001768 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe ff33 	bl	8001768 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0b1      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x37e>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7fe ff21 	bl	8001768 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe ff1d 	bl	8001768 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e09b      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8087 	beq.w	8002a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d061      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d146      	bne.n	8002a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fef1 	bl	8001768 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe feed 	bl	8001768 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e06d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	4921      	ldr	r1, [pc, #132]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a19      	ldr	r1, [r3, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	430b      	orrs	r3, r1
 80029d6:	491b      	ldr	r1, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe fec1 	bl	8001768 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe febd 	bl	8001768 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e03d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x46a>
 8002a08:	e035      	b.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe feaa 	bl	8001768 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fea6 	bl	8001768 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e026      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x498>
 8002a36:	e01e      	b.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e019      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_OscConfig+0x500>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d0      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4965      	ldr	r1, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d040      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e073      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06b      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4936      	ldr	r1, [pc, #216]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fdf8 	bl	8001768 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe fdf4 	bl	8001768 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e053      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d210      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1cc>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fd56 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08004950 	.word	0x08004950
 8002c50:	20000004 	.word	0x20000004
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b490      	push	{r4, r7}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c60:	1d3c      	adds	r4, r7, #4
 8002c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c68:	f240 2301 	movw	r3, #513	; 0x201
 8002c6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x46>
 8002c96:	e02b      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c9a:	623b      	str	r3, [r7, #32]
      break;
 8002c9c:	e02b      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3328      	adds	r3, #40	; 0x28
 8002ca8:	443b      	add	r3, r7
 8002caa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0c5b      	lsrs	r3, r3, #17
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	3328      	adds	r3, #40	; 0x28
 8002cc6:	443b      	add	r3, r7
 8002cc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ccc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	e004      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	623b      	str	r3, [r7, #32]
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf2:	623b      	str	r3, [r7, #32]
      break;
 8002cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc90      	pop	{r4, r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	0800493c 	.word	0x0800493c
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	003d0900 	.word	0x003d0900

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff2 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08004960 	.word	0x08004960

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffde 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0adb      	lsrs	r3, r3, #11
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08004960 	.word	0x08004960

08002d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <RCC_Delay+0x34>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <RCC_Delay+0x38>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	0a5b      	lsrs	r3, r3, #9
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d94:	bf00      	nop
  }
  while (Delay --);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	60fa      	str	r2, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <RCC_Delay+0x1c>
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	20000004 	.word	0x20000004
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e03f      	b.n	8002e46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fbc8 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fc85 	bl	8003708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b08a      	sub	sp, #40	; 0x28
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d17c      	bne.n	8002f68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_UART_Transmit+0x2c>
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e075      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Transmit+0x3e>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e06e      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2221      	movs	r2, #33	; 0x21
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea2:	f7fe fc61 	bl	8001768 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebc:	d108      	bne.n	8002ed0 <HAL_UART_Transmit+0x82>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e003      	b.n	8002ed8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ee0:	e02a      	b.n	8002f38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa38 	bl	8003362 <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e036      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3302      	adds	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e007      	b.n	8002f2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1cf      	bne.n	8002ee2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fa08 	bl	8003362 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e006      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d11d      	bne.n	8002fc8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_UART_Receive_IT+0x26>
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e016      	b.n	8002fca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Receive_IT+0x38>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e00f      	b.n	8002fca <HAL_UART_Receive_IT+0x58>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fa19 	bl	80033f6 <UART_Start_Receive_IT>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	e000      	b.n	8002fca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x52>
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fac9 	bl	80035b6 <UART_Receive_IT>
      return;
 8003024:	e17b      	b.n	800331e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80b1 	beq.w	8003190 <HAL_UART_IRQHandler+0x1bc>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_UART_IRQHandler+0x70>
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80a6 	beq.w	8003190 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_UART_IRQHandler+0x90>
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_UART_IRQHandler+0xb0>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f043 0202 	orr.w	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_UART_IRQHandler+0xd0>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0204 	orr.w	r2, r3, #4
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00f      	beq.n	80030ce <HAL_UART_IRQHandler+0xfa>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <HAL_UART_IRQHandler+0xee>
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f043 0208 	orr.w	r2, r3, #8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 811e 	beq.w	8003314 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_UART_IRQHandler+0x11e>
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fa62 	bl	80035b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_UART_IRQHandler+0x146>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d031      	beq.n	800317e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9a4 	bl	8003468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d023      	beq.n	8003176 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	4a76      	ldr	r2, [pc, #472]	; (8003324 <HAL_UART_IRQHandler+0x350>)
 800314c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fcf4 	bl	8001b40 <HAL_DMA_Abort_IT>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d016      	beq.n	800318c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003168:	4610      	mov	r0, r2
 800316a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316c:	e00e      	b.n	800318c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8e3 	bl	800333a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	e00a      	b.n	800318c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8df 	bl	800333a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	e006      	b.n	800318c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8db 	bl	800333a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800318a:	e0c3      	b.n	8003314 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	bf00      	nop
    return;
 800318e:	e0c1      	b.n	8003314 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80a1 	bne.w	80032dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 809b 	beq.w	80032dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8095 	beq.w	80032dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d04e      	beq.n	8003274 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80031e0:	8a3b      	ldrh	r3, [r7, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8098 	beq.w	8003318 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ec:	8a3a      	ldrh	r2, [r7, #16]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	f080 8092 	bcs.w	8003318 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8a3a      	ldrh	r2, [r7, #16]
 80031f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b20      	cmp	r3, #32
 8003202:	d02b      	beq.n	800325c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003212:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003232:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0210 	bic.w	r2, r2, #16
 8003250:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fc38 	bl	8001acc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003264:	b29b      	uxth	r3, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	b29b      	uxth	r3, r3
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f86d 	bl	800334c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003272:	e051      	b.n	8003318 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800327c:	b29b      	uxth	r3, r3
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d047      	beq.n	800331c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800328c:	8a7b      	ldrh	r3, [r7, #18]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d044      	beq.n	800331c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0210 	bic.w	r2, r2, #16
 80032ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032d0:	8a7b      	ldrh	r3, [r7, #18]
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f839 	bl	800334c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032da:	e01f      	b.n	800331c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_UART_IRQHandler+0x324>
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8f9 	bl	80034e8 <UART_Transmit_IT>
    return;
 80032f6:	e012      	b.n	800331e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_UART_IRQHandler+0x34a>
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f93a 	bl	8003586 <UART_EndTransmit_IT>
    return;
 8003312:	e004      	b.n	800331e <HAL_UART_IRQHandler+0x34a>
    return;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <HAL_UART_IRQHandler+0x34a>
      return;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_UART_IRQHandler+0x34a>
      return;
 800331c:	bf00      	nop
  }
}
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	080034c1 	.word	0x080034c1

08003328 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003372:	e02c      	b.n	80033ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d028      	beq.n	80033ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <UART_WaitOnFlagUntilTimeout+0x30>
 8003382:	f7fe f9f1 	bl	8001768 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d21d      	bcs.n	80033ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e00f      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d0c3      	beq.n	8003374 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	4613      	mov	r3, r2
 8003402:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2222      	movs	r2, #34	; 0x22
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800343a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0220 	orr.w	r2, r2, #32
 800345a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800347e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0210 	bic.w	r2, r2, #16
 80034a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff ff2d 	bl	800333a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b21      	cmp	r3, #33	; 0x21
 80034fa:	d13e      	bne.n	800357a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d114      	bne.n	8003530 <UART_Transmit_IT+0x48>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d110      	bne.n	8003530 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003522:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	1c9a      	adds	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]
 800352e:	e008      	b.n	8003542 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	1c59      	adds	r1, r3, #1
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6211      	str	r1, [r2, #32]
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4619      	mov	r1, r3
 8003550:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003564:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003574:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff febe 	bl	8003328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b22      	cmp	r3, #34	; 0x22
 80035c8:	f040 8099 	bne.w	80036fe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d4:	d117      	bne.n	8003606 <UART_Receive_IT+0x50>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d113      	bne.n	8003606 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	1c9a      	adds	r2, r3, #2
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
 8003604:	e026      	b.n	8003654 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003618:	d007      	beq.n	800362a <UART_Receive_IT+0x74>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <UART_Receive_IT+0x82>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	e008      	b.n	800364a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003644:	b2da      	uxtb	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29b      	uxth	r3, r3
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4619      	mov	r1, r3
 8003662:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003664:	2b00      	cmp	r3, #0
 8003666:	d148      	bne.n	80036fa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0220 	bic.w	r2, r2, #32
 8003676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d123      	bne.n	80036f0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0210 	bic.w	r2, r2, #16
 80036bc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d10a      	bne.n	80036e2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036e6:	4619      	mov	r1, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fe2f 	bl	800334c <HAL_UARTEx_RxEventCallback>
 80036ee:	e002      	b.n	80036f6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7fd fccb 	bl	800108c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e002      	b.n	8003700 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003742:	f023 030c 	bic.w	r3, r3, #12
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	430b      	orrs	r3, r1
 800374e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2c      	ldr	r2, [pc, #176]	; (800381c <UART_SetConfig+0x114>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d103      	bne.n	8003778 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7ff faee 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	e002      	b.n	800377e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003778:	f7ff fad6 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 800377c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	009a      	lsls	r2, r3, #2
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <UART_SetConfig+0x118>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	0119      	lsls	r1, r3, #4
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009a      	lsls	r2, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <UART_SetConfig+0x118>)
 80037b6:	fba3 0302 	umull	r0, r3, r3, r2
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2064      	movs	r0, #100	; 0x64
 80037be:	fb00 f303 	mul.w	r3, r0, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	3332      	adds	r3, #50	; 0x32
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <UART_SetConfig+0x118>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d4:	4419      	add	r1, r3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009a      	lsls	r2, r3, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <UART_SetConfig+0x118>)
 80037ee:	fba3 0302 	umull	r0, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2064      	movs	r0, #100	; 0x64
 80037f6:	fb00 f303 	mul.w	r3, r0, r3
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	3332      	adds	r3, #50	; 0x32
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <UART_SetConfig+0x118>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	f003 020f 	and.w	r2, r3, #15
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	440a      	add	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40013800 	.word	0x40013800
 8003820:	51eb851f 	.word	0x51eb851f

08003824 <__errno>:
 8003824:	4b01      	ldr	r3, [pc, #4]	; (800382c <__errno+0x8>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000010 	.word	0x20000010

08003830 <__libc_init_array>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	2600      	movs	r6, #0
 8003834:	4d0c      	ldr	r5, [pc, #48]	; (8003868 <__libc_init_array+0x38>)
 8003836:	4c0d      	ldr	r4, [pc, #52]	; (800386c <__libc_init_array+0x3c>)
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	42a6      	cmp	r6, r4
 800383e:	d109      	bne.n	8003854 <__libc_init_array+0x24>
 8003840:	f001 f82c 	bl	800489c <_init>
 8003844:	2600      	movs	r6, #0
 8003846:	4d0a      	ldr	r5, [pc, #40]	; (8003870 <__libc_init_array+0x40>)
 8003848:	4c0a      	ldr	r4, [pc, #40]	; (8003874 <__libc_init_array+0x44>)
 800384a:	1b64      	subs	r4, r4, r5
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	42a6      	cmp	r6, r4
 8003850:	d105      	bne.n	800385e <__libc_init_array+0x2e>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	f855 3b04 	ldr.w	r3, [r5], #4
 8003858:	4798      	blx	r3
 800385a:	3601      	adds	r6, #1
 800385c:	e7ee      	b.n	800383c <__libc_init_array+0xc>
 800385e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003862:	4798      	blx	r3
 8003864:	3601      	adds	r6, #1
 8003866:	e7f2      	b.n	800384e <__libc_init_array+0x1e>
 8003868:	08004a00 	.word	0x08004a00
 800386c:	08004a00 	.word	0x08004a00
 8003870:	08004a00 	.word	0x08004a00
 8003874:	08004a04 	.word	0x08004a04

08003878 <memset>:
 8003878:	4603      	mov	r3, r0
 800387a:	4402      	add	r2, r0
 800387c:	4293      	cmp	r3, r2
 800387e:	d100      	bne.n	8003882 <memset+0xa>
 8003880:	4770      	bx	lr
 8003882:	f803 1b01 	strb.w	r1, [r3], #1
 8003886:	e7f9      	b.n	800387c <memset+0x4>

08003888 <iprintf>:
 8003888:	b40f      	push	{r0, r1, r2, r3}
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <iprintf+0x2c>)
 800388c:	b513      	push	{r0, r1, r4, lr}
 800388e:	681c      	ldr	r4, [r3, #0]
 8003890:	b124      	cbz	r4, 800389c <iprintf+0x14>
 8003892:	69a3      	ldr	r3, [r4, #24]
 8003894:	b913      	cbnz	r3, 800389c <iprintf+0x14>
 8003896:	4620      	mov	r0, r4
 8003898:	f000 fa5a 	bl	8003d50 <__sinit>
 800389c:	ab05      	add	r3, sp, #20
 800389e:	4620      	mov	r0, r4
 80038a0:	9a04      	ldr	r2, [sp, #16]
 80038a2:	68a1      	ldr	r1, [r4, #8]
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	f000 fc5d 	bl	8004164 <_vfiprintf_r>
 80038aa:	b002      	add	sp, #8
 80038ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038b0:	b004      	add	sp, #16
 80038b2:	4770      	bx	lr
 80038b4:	20000010 	.word	0x20000010

080038b8 <_puts_r>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	460e      	mov	r6, r1
 80038bc:	4605      	mov	r5, r0
 80038be:	b118      	cbz	r0, 80038c8 <_puts_r+0x10>
 80038c0:	6983      	ldr	r3, [r0, #24]
 80038c2:	b90b      	cbnz	r3, 80038c8 <_puts_r+0x10>
 80038c4:	f000 fa44 	bl	8003d50 <__sinit>
 80038c8:	69ab      	ldr	r3, [r5, #24]
 80038ca:	68ac      	ldr	r4, [r5, #8]
 80038cc:	b913      	cbnz	r3, 80038d4 <_puts_r+0x1c>
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 fa3e 	bl	8003d50 <__sinit>
 80038d4:	4b2c      	ldr	r3, [pc, #176]	; (8003988 <_puts_r+0xd0>)
 80038d6:	429c      	cmp	r4, r3
 80038d8:	d120      	bne.n	800391c <_puts_r+0x64>
 80038da:	686c      	ldr	r4, [r5, #4]
 80038dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038de:	07db      	lsls	r3, r3, #31
 80038e0:	d405      	bmi.n	80038ee <_puts_r+0x36>
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	0598      	lsls	r0, r3, #22
 80038e6:	d402      	bmi.n	80038ee <_puts_r+0x36>
 80038e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ea:	f000 facf 	bl	8003e8c <__retarget_lock_acquire_recursive>
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	0719      	lsls	r1, r3, #28
 80038f2:	d51d      	bpl.n	8003930 <_puts_r+0x78>
 80038f4:	6923      	ldr	r3, [r4, #16]
 80038f6:	b1db      	cbz	r3, 8003930 <_puts_r+0x78>
 80038f8:	3e01      	subs	r6, #1
 80038fa:	68a3      	ldr	r3, [r4, #8]
 80038fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003900:	3b01      	subs	r3, #1
 8003902:	60a3      	str	r3, [r4, #8]
 8003904:	bb39      	cbnz	r1, 8003956 <_puts_r+0x9e>
 8003906:	2b00      	cmp	r3, #0
 8003908:	da38      	bge.n	800397c <_puts_r+0xc4>
 800390a:	4622      	mov	r2, r4
 800390c:	210a      	movs	r1, #10
 800390e:	4628      	mov	r0, r5
 8003910:	f000 f848 	bl	80039a4 <__swbuf_r>
 8003914:	3001      	adds	r0, #1
 8003916:	d011      	beq.n	800393c <_puts_r+0x84>
 8003918:	250a      	movs	r5, #10
 800391a:	e011      	b.n	8003940 <_puts_r+0x88>
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <_puts_r+0xd4>)
 800391e:	429c      	cmp	r4, r3
 8003920:	d101      	bne.n	8003926 <_puts_r+0x6e>
 8003922:	68ac      	ldr	r4, [r5, #8]
 8003924:	e7da      	b.n	80038dc <_puts_r+0x24>
 8003926:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <_puts_r+0xd8>)
 8003928:	429c      	cmp	r4, r3
 800392a:	bf08      	it	eq
 800392c:	68ec      	ldreq	r4, [r5, #12]
 800392e:	e7d5      	b.n	80038dc <_puts_r+0x24>
 8003930:	4621      	mov	r1, r4
 8003932:	4628      	mov	r0, r5
 8003934:	f000 f888 	bl	8003a48 <__swsetup_r>
 8003938:	2800      	cmp	r0, #0
 800393a:	d0dd      	beq.n	80038f8 <_puts_r+0x40>
 800393c:	f04f 35ff 	mov.w	r5, #4294967295
 8003940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003942:	07da      	lsls	r2, r3, #31
 8003944:	d405      	bmi.n	8003952 <_puts_r+0x9a>
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	059b      	lsls	r3, r3, #22
 800394a:	d402      	bmi.n	8003952 <_puts_r+0x9a>
 800394c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800394e:	f000 fa9e 	bl	8003e8e <__retarget_lock_release_recursive>
 8003952:	4628      	mov	r0, r5
 8003954:	bd70      	pop	{r4, r5, r6, pc}
 8003956:	2b00      	cmp	r3, #0
 8003958:	da04      	bge.n	8003964 <_puts_r+0xac>
 800395a:	69a2      	ldr	r2, [r4, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	dc06      	bgt.n	800396e <_puts_r+0xb6>
 8003960:	290a      	cmp	r1, #10
 8003962:	d004      	beq.n	800396e <_puts_r+0xb6>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	6022      	str	r2, [r4, #0]
 800396a:	7019      	strb	r1, [r3, #0]
 800396c:	e7c5      	b.n	80038fa <_puts_r+0x42>
 800396e:	4622      	mov	r2, r4
 8003970:	4628      	mov	r0, r5
 8003972:	f000 f817 	bl	80039a4 <__swbuf_r>
 8003976:	3001      	adds	r0, #1
 8003978:	d1bf      	bne.n	80038fa <_puts_r+0x42>
 800397a:	e7df      	b.n	800393c <_puts_r+0x84>
 800397c:	250a      	movs	r5, #10
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	6022      	str	r2, [r4, #0]
 8003984:	701d      	strb	r5, [r3, #0]
 8003986:	e7db      	b.n	8003940 <_puts_r+0x88>
 8003988:	0800498c 	.word	0x0800498c
 800398c:	080049ac 	.word	0x080049ac
 8003990:	0800496c 	.word	0x0800496c

08003994 <puts>:
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <puts+0xc>)
 8003996:	4601      	mov	r1, r0
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f7ff bf8d 	b.w	80038b8 <_puts_r>
 800399e:	bf00      	nop
 80039a0:	20000010 	.word	0x20000010

080039a4 <__swbuf_r>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	460e      	mov	r6, r1
 80039a8:	4614      	mov	r4, r2
 80039aa:	4605      	mov	r5, r0
 80039ac:	b118      	cbz	r0, 80039b6 <__swbuf_r+0x12>
 80039ae:	6983      	ldr	r3, [r0, #24]
 80039b0:	b90b      	cbnz	r3, 80039b6 <__swbuf_r+0x12>
 80039b2:	f000 f9cd 	bl	8003d50 <__sinit>
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <__swbuf_r+0x98>)
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d12b      	bne.n	8003a14 <__swbuf_r+0x70>
 80039bc:	686c      	ldr	r4, [r5, #4]
 80039be:	69a3      	ldr	r3, [r4, #24]
 80039c0:	60a3      	str	r3, [r4, #8]
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	071a      	lsls	r2, r3, #28
 80039c6:	d52f      	bpl.n	8003a28 <__swbuf_r+0x84>
 80039c8:	6923      	ldr	r3, [r4, #16]
 80039ca:	b36b      	cbz	r3, 8003a28 <__swbuf_r+0x84>
 80039cc:	6923      	ldr	r3, [r4, #16]
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	b2f6      	uxtb	r6, r6
 80039d2:	1ac0      	subs	r0, r0, r3
 80039d4:	6963      	ldr	r3, [r4, #20]
 80039d6:	4637      	mov	r7, r6
 80039d8:	4283      	cmp	r3, r0
 80039da:	dc04      	bgt.n	80039e6 <__swbuf_r+0x42>
 80039dc:	4621      	mov	r1, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 f922 	bl	8003c28 <_fflush_r>
 80039e4:	bb30      	cbnz	r0, 8003a34 <__swbuf_r+0x90>
 80039e6:	68a3      	ldr	r3, [r4, #8]
 80039e8:	3001      	adds	r0, #1
 80039ea:	3b01      	subs	r3, #1
 80039ec:	60a3      	str	r3, [r4, #8]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	6022      	str	r2, [r4, #0]
 80039f4:	701e      	strb	r6, [r3, #0]
 80039f6:	6963      	ldr	r3, [r4, #20]
 80039f8:	4283      	cmp	r3, r0
 80039fa:	d004      	beq.n	8003a06 <__swbuf_r+0x62>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	07db      	lsls	r3, r3, #31
 8003a00:	d506      	bpl.n	8003a10 <__swbuf_r+0x6c>
 8003a02:	2e0a      	cmp	r6, #10
 8003a04:	d104      	bne.n	8003a10 <__swbuf_r+0x6c>
 8003a06:	4621      	mov	r1, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 f90d 	bl	8003c28 <_fflush_r>
 8003a0e:	b988      	cbnz	r0, 8003a34 <__swbuf_r+0x90>
 8003a10:	4638      	mov	r0, r7
 8003a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <__swbuf_r+0x9c>)
 8003a16:	429c      	cmp	r4, r3
 8003a18:	d101      	bne.n	8003a1e <__swbuf_r+0x7a>
 8003a1a:	68ac      	ldr	r4, [r5, #8]
 8003a1c:	e7cf      	b.n	80039be <__swbuf_r+0x1a>
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <__swbuf_r+0xa0>)
 8003a20:	429c      	cmp	r4, r3
 8003a22:	bf08      	it	eq
 8003a24:	68ec      	ldreq	r4, [r5, #12]
 8003a26:	e7ca      	b.n	80039be <__swbuf_r+0x1a>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f000 f80c 	bl	8003a48 <__swsetup_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d0cb      	beq.n	80039cc <__swbuf_r+0x28>
 8003a34:	f04f 37ff 	mov.w	r7, #4294967295
 8003a38:	e7ea      	b.n	8003a10 <__swbuf_r+0x6c>
 8003a3a:	bf00      	nop
 8003a3c:	0800498c 	.word	0x0800498c
 8003a40:	080049ac 	.word	0x080049ac
 8003a44:	0800496c 	.word	0x0800496c

08003a48 <__swsetup_r>:
 8003a48:	4b32      	ldr	r3, [pc, #200]	; (8003b14 <__swsetup_r+0xcc>)
 8003a4a:	b570      	push	{r4, r5, r6, lr}
 8003a4c:	681d      	ldr	r5, [r3, #0]
 8003a4e:	4606      	mov	r6, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	b125      	cbz	r5, 8003a5e <__swsetup_r+0x16>
 8003a54:	69ab      	ldr	r3, [r5, #24]
 8003a56:	b913      	cbnz	r3, 8003a5e <__swsetup_r+0x16>
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 f979 	bl	8003d50 <__sinit>
 8003a5e:	4b2e      	ldr	r3, [pc, #184]	; (8003b18 <__swsetup_r+0xd0>)
 8003a60:	429c      	cmp	r4, r3
 8003a62:	d10f      	bne.n	8003a84 <__swsetup_r+0x3c>
 8003a64:	686c      	ldr	r4, [r5, #4]
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a6c:	0719      	lsls	r1, r3, #28
 8003a6e:	d42c      	bmi.n	8003aca <__swsetup_r+0x82>
 8003a70:	06dd      	lsls	r5, r3, #27
 8003a72:	d411      	bmi.n	8003a98 <__swsetup_r+0x50>
 8003a74:	2309      	movs	r3, #9
 8003a76:	6033      	str	r3, [r6, #0]
 8003a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	e03e      	b.n	8003b02 <__swsetup_r+0xba>
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <__swsetup_r+0xd4>)
 8003a86:	429c      	cmp	r4, r3
 8003a88:	d101      	bne.n	8003a8e <__swsetup_r+0x46>
 8003a8a:	68ac      	ldr	r4, [r5, #8]
 8003a8c:	e7eb      	b.n	8003a66 <__swsetup_r+0x1e>
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <__swsetup_r+0xd8>)
 8003a90:	429c      	cmp	r4, r3
 8003a92:	bf08      	it	eq
 8003a94:	68ec      	ldreq	r4, [r5, #12]
 8003a96:	e7e6      	b.n	8003a66 <__swsetup_r+0x1e>
 8003a98:	0758      	lsls	r0, r3, #29
 8003a9a:	d512      	bpl.n	8003ac2 <__swsetup_r+0x7a>
 8003a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a9e:	b141      	cbz	r1, 8003ab2 <__swsetup_r+0x6a>
 8003aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	d002      	beq.n	8003aae <__swsetup_r+0x66>
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 fa57 	bl	8003f5c <_free_r>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ab2:	89a3      	ldrh	r3, [r4, #12]
 8003ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ab8:	81a3      	strh	r3, [r4, #12]
 8003aba:	2300      	movs	r3, #0
 8003abc:	6063      	str	r3, [r4, #4]
 8003abe:	6923      	ldr	r3, [r4, #16]
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	f043 0308 	orr.w	r3, r3, #8
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	b94b      	cbnz	r3, 8003ae2 <__swsetup_r+0x9a>
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d003      	beq.n	8003ae2 <__swsetup_r+0x9a>
 8003ada:	4621      	mov	r1, r4
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f9fd 	bl	8003edc <__smakebuf_r>
 8003ae2:	89a0      	ldrh	r0, [r4, #12]
 8003ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ae8:	f010 0301 	ands.w	r3, r0, #1
 8003aec:	d00a      	beq.n	8003b04 <__swsetup_r+0xbc>
 8003aee:	2300      	movs	r3, #0
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	6963      	ldr	r3, [r4, #20]
 8003af4:	425b      	negs	r3, r3
 8003af6:	61a3      	str	r3, [r4, #24]
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	b943      	cbnz	r3, 8003b0e <__swsetup_r+0xc6>
 8003afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b00:	d1ba      	bne.n	8003a78 <__swsetup_r+0x30>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	0781      	lsls	r1, r0, #30
 8003b06:	bf58      	it	pl
 8003b08:	6963      	ldrpl	r3, [r4, #20]
 8003b0a:	60a3      	str	r3, [r4, #8]
 8003b0c:	e7f4      	b.n	8003af8 <__swsetup_r+0xb0>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e7f7      	b.n	8003b02 <__swsetup_r+0xba>
 8003b12:	bf00      	nop
 8003b14:	20000010 	.word	0x20000010
 8003b18:	0800498c 	.word	0x0800498c
 8003b1c:	080049ac 	.word	0x080049ac
 8003b20:	0800496c 	.word	0x0800496c

08003b24 <__sflush_r>:
 8003b24:	898a      	ldrh	r2, [r1, #12]
 8003b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b28:	4605      	mov	r5, r0
 8003b2a:	0710      	lsls	r0, r2, #28
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	d457      	bmi.n	8003be0 <__sflush_r+0xbc>
 8003b30:	684b      	ldr	r3, [r1, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	dc04      	bgt.n	8003b40 <__sflush_r+0x1c>
 8003b36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	dc01      	bgt.n	8003b40 <__sflush_r+0x1c>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b42:	2e00      	cmp	r6, #0
 8003b44:	d0fa      	beq.n	8003b3c <__sflush_r+0x18>
 8003b46:	2300      	movs	r3, #0
 8003b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b4c:	682f      	ldr	r7, [r5, #0]
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	d032      	beq.n	8003bb8 <__sflush_r+0x94>
 8003b52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	075a      	lsls	r2, r3, #29
 8003b58:	d505      	bpl.n	8003b66 <__sflush_r+0x42>
 8003b5a:	6863      	ldr	r3, [r4, #4]
 8003b5c:	1ac0      	subs	r0, r0, r3
 8003b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b60:	b10b      	cbz	r3, 8003b66 <__sflush_r+0x42>
 8003b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b64:	1ac0      	subs	r0, r0, r3
 8003b66:	2300      	movs	r3, #0
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	6a21      	ldr	r1, [r4, #32]
 8003b70:	47b0      	blx	r6
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	d106      	bne.n	8003b86 <__sflush_r+0x62>
 8003b78:	6829      	ldr	r1, [r5, #0]
 8003b7a:	291d      	cmp	r1, #29
 8003b7c:	d82c      	bhi.n	8003bd8 <__sflush_r+0xb4>
 8003b7e:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <__sflush_r+0x100>)
 8003b80:	40ca      	lsrs	r2, r1
 8003b82:	07d6      	lsls	r6, r2, #31
 8003b84:	d528      	bpl.n	8003bd8 <__sflush_r+0xb4>
 8003b86:	2200      	movs	r2, #0
 8003b88:	6062      	str	r2, [r4, #4]
 8003b8a:	6922      	ldr	r2, [r4, #16]
 8003b8c:	04d9      	lsls	r1, r3, #19
 8003b8e:	6022      	str	r2, [r4, #0]
 8003b90:	d504      	bpl.n	8003b9c <__sflush_r+0x78>
 8003b92:	1c42      	adds	r2, r0, #1
 8003b94:	d101      	bne.n	8003b9a <__sflush_r+0x76>
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	b903      	cbnz	r3, 8003b9c <__sflush_r+0x78>
 8003b9a:	6560      	str	r0, [r4, #84]	; 0x54
 8003b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b9e:	602f      	str	r7, [r5, #0]
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	d0cb      	beq.n	8003b3c <__sflush_r+0x18>
 8003ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	d002      	beq.n	8003bb2 <__sflush_r+0x8e>
 8003bac:	4628      	mov	r0, r5
 8003bae:	f000 f9d5 	bl	8003f5c <_free_r>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8003bb6:	e7c2      	b.n	8003b3e <__sflush_r+0x1a>
 8003bb8:	6a21      	ldr	r1, [r4, #32]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	47b0      	blx	r6
 8003bc0:	1c41      	adds	r1, r0, #1
 8003bc2:	d1c7      	bne.n	8003b54 <__sflush_r+0x30>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0c4      	beq.n	8003b54 <__sflush_r+0x30>
 8003bca:	2b1d      	cmp	r3, #29
 8003bcc:	d001      	beq.n	8003bd2 <__sflush_r+0xae>
 8003bce:	2b16      	cmp	r3, #22
 8003bd0:	d101      	bne.n	8003bd6 <__sflush_r+0xb2>
 8003bd2:	602f      	str	r7, [r5, #0]
 8003bd4:	e7b2      	b.n	8003b3c <__sflush_r+0x18>
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bdc:	81a3      	strh	r3, [r4, #12]
 8003bde:	e7ae      	b.n	8003b3e <__sflush_r+0x1a>
 8003be0:	690f      	ldr	r7, [r1, #16]
 8003be2:	2f00      	cmp	r7, #0
 8003be4:	d0aa      	beq.n	8003b3c <__sflush_r+0x18>
 8003be6:	0793      	lsls	r3, r2, #30
 8003be8:	bf18      	it	ne
 8003bea:	2300      	movne	r3, #0
 8003bec:	680e      	ldr	r6, [r1, #0]
 8003bee:	bf08      	it	eq
 8003bf0:	694b      	ldreq	r3, [r1, #20]
 8003bf2:	1bf6      	subs	r6, r6, r7
 8003bf4:	600f      	str	r7, [r1, #0]
 8003bf6:	608b      	str	r3, [r1, #8]
 8003bf8:	2e00      	cmp	r6, #0
 8003bfa:	dd9f      	ble.n	8003b3c <__sflush_r+0x18>
 8003bfc:	4633      	mov	r3, r6
 8003bfe:	463a      	mov	r2, r7
 8003c00:	4628      	mov	r0, r5
 8003c02:	6a21      	ldr	r1, [r4, #32]
 8003c04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c08:	47e0      	blx	ip
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	dc06      	bgt.n	8003c1c <__sflush_r+0xf8>
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c18:	81a3      	strh	r3, [r4, #12]
 8003c1a:	e790      	b.n	8003b3e <__sflush_r+0x1a>
 8003c1c:	4407      	add	r7, r0
 8003c1e:	1a36      	subs	r6, r6, r0
 8003c20:	e7ea      	b.n	8003bf8 <__sflush_r+0xd4>
 8003c22:	bf00      	nop
 8003c24:	20400001 	.word	0x20400001

08003c28 <_fflush_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	690b      	ldr	r3, [r1, #16]
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	b913      	cbnz	r3, 8003c38 <_fflush_r+0x10>
 8003c32:	2500      	movs	r5, #0
 8003c34:	4628      	mov	r0, r5
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	b118      	cbz	r0, 8003c42 <_fflush_r+0x1a>
 8003c3a:	6983      	ldr	r3, [r0, #24]
 8003c3c:	b90b      	cbnz	r3, 8003c42 <_fflush_r+0x1a>
 8003c3e:	f000 f887 	bl	8003d50 <__sinit>
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <_fflush_r+0x6c>)
 8003c44:	429c      	cmp	r4, r3
 8003c46:	d11b      	bne.n	8003c80 <_fflush_r+0x58>
 8003c48:	686c      	ldr	r4, [r5, #4]
 8003c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ef      	beq.n	8003c32 <_fflush_r+0xa>
 8003c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c54:	07d0      	lsls	r0, r2, #31
 8003c56:	d404      	bmi.n	8003c62 <_fflush_r+0x3a>
 8003c58:	0599      	lsls	r1, r3, #22
 8003c5a:	d402      	bmi.n	8003c62 <_fflush_r+0x3a>
 8003c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c5e:	f000 f915 	bl	8003e8c <__retarget_lock_acquire_recursive>
 8003c62:	4628      	mov	r0, r5
 8003c64:	4621      	mov	r1, r4
 8003c66:	f7ff ff5d 	bl	8003b24 <__sflush_r>
 8003c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	07da      	lsls	r2, r3, #31
 8003c70:	d4e0      	bmi.n	8003c34 <_fflush_r+0xc>
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	059b      	lsls	r3, r3, #22
 8003c76:	d4dd      	bmi.n	8003c34 <_fflush_r+0xc>
 8003c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c7a:	f000 f908 	bl	8003e8e <__retarget_lock_release_recursive>
 8003c7e:	e7d9      	b.n	8003c34 <_fflush_r+0xc>
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <_fflush_r+0x70>)
 8003c82:	429c      	cmp	r4, r3
 8003c84:	d101      	bne.n	8003c8a <_fflush_r+0x62>
 8003c86:	68ac      	ldr	r4, [r5, #8]
 8003c88:	e7df      	b.n	8003c4a <_fflush_r+0x22>
 8003c8a:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <_fflush_r+0x74>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	bf08      	it	eq
 8003c90:	68ec      	ldreq	r4, [r5, #12]
 8003c92:	e7da      	b.n	8003c4a <_fflush_r+0x22>
 8003c94:	0800498c 	.word	0x0800498c
 8003c98:	080049ac 	.word	0x080049ac
 8003c9c:	0800496c 	.word	0x0800496c

08003ca0 <std>:
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	b510      	push	{r4, lr}
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8003caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cae:	6083      	str	r3, [r0, #8]
 8003cb0:	8181      	strh	r1, [r0, #12]
 8003cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8003cb4:	81c2      	strh	r2, [r0, #14]
 8003cb6:	6183      	str	r3, [r0, #24]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	2208      	movs	r2, #8
 8003cbc:	305c      	adds	r0, #92	; 0x5c
 8003cbe:	f7ff fddb 	bl	8003878 <memset>
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <std+0x38>)
 8003cc4:	6224      	str	r4, [r4, #32]
 8003cc6:	6263      	str	r3, [r4, #36]	; 0x24
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <std+0x3c>)
 8003cca:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <std+0x40>)
 8003cce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <std+0x44>)
 8003cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	bf00      	nop
 8003cd8:	08004711 	.word	0x08004711
 8003cdc:	08004733 	.word	0x08004733
 8003ce0:	0800476b 	.word	0x0800476b
 8003ce4:	0800478f 	.word	0x0800478f

08003ce8 <_cleanup_r>:
 8003ce8:	4901      	ldr	r1, [pc, #4]	; (8003cf0 <_cleanup_r+0x8>)
 8003cea:	f000 b8af 	b.w	8003e4c <_fwalk_reent>
 8003cee:	bf00      	nop
 8003cf0:	08003c29 	.word	0x08003c29

08003cf4 <__sfmoreglue>:
 8003cf4:	2268      	movs	r2, #104	; 0x68
 8003cf6:	b570      	push	{r4, r5, r6, lr}
 8003cf8:	1e4d      	subs	r5, r1, #1
 8003cfa:	4355      	muls	r5, r2
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d02:	f000 f993 	bl	800402c <_malloc_r>
 8003d06:	4604      	mov	r4, r0
 8003d08:	b140      	cbz	r0, 8003d1c <__sfmoreglue+0x28>
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8003d10:	300c      	adds	r0, #12
 8003d12:	60a0      	str	r0, [r4, #8]
 8003d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d18:	f7ff fdae 	bl	8003878 <memset>
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}

08003d20 <__sfp_lock_acquire>:
 8003d20:	4801      	ldr	r0, [pc, #4]	; (8003d28 <__sfp_lock_acquire+0x8>)
 8003d22:	f000 b8b3 	b.w	8003e8c <__retarget_lock_acquire_recursive>
 8003d26:	bf00      	nop
 8003d28:	20000169 	.word	0x20000169

08003d2c <__sfp_lock_release>:
 8003d2c:	4801      	ldr	r0, [pc, #4]	; (8003d34 <__sfp_lock_release+0x8>)
 8003d2e:	f000 b8ae 	b.w	8003e8e <__retarget_lock_release_recursive>
 8003d32:	bf00      	nop
 8003d34:	20000169 	.word	0x20000169

08003d38 <__sinit_lock_acquire>:
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <__sinit_lock_acquire+0x8>)
 8003d3a:	f000 b8a7 	b.w	8003e8c <__retarget_lock_acquire_recursive>
 8003d3e:	bf00      	nop
 8003d40:	2000016a 	.word	0x2000016a

08003d44 <__sinit_lock_release>:
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <__sinit_lock_release+0x8>)
 8003d46:	f000 b8a2 	b.w	8003e8e <__retarget_lock_release_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	2000016a 	.word	0x2000016a

08003d50 <__sinit>:
 8003d50:	b510      	push	{r4, lr}
 8003d52:	4604      	mov	r4, r0
 8003d54:	f7ff fff0 	bl	8003d38 <__sinit_lock_acquire>
 8003d58:	69a3      	ldr	r3, [r4, #24]
 8003d5a:	b11b      	cbz	r3, 8003d64 <__sinit+0x14>
 8003d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d60:	f7ff bff0 	b.w	8003d44 <__sinit_lock_release>
 8003d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d68:	6523      	str	r3, [r4, #80]	; 0x50
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <__sinit+0x68>)
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <__sinit+0x6c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d72:	42a3      	cmp	r3, r4
 8003d74:	bf08      	it	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	4620      	mov	r0, r4
 8003d7a:	bf08      	it	eq
 8003d7c:	61a3      	streq	r3, [r4, #24]
 8003d7e:	f000 f81f 	bl	8003dc0 <__sfp>
 8003d82:	6060      	str	r0, [r4, #4]
 8003d84:	4620      	mov	r0, r4
 8003d86:	f000 f81b 	bl	8003dc0 <__sfp>
 8003d8a:	60a0      	str	r0, [r4, #8]
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f000 f817 	bl	8003dc0 <__sfp>
 8003d92:	2200      	movs	r2, #0
 8003d94:	2104      	movs	r1, #4
 8003d96:	60e0      	str	r0, [r4, #12]
 8003d98:	6860      	ldr	r0, [r4, #4]
 8003d9a:	f7ff ff81 	bl	8003ca0 <std>
 8003d9e:	2201      	movs	r2, #1
 8003da0:	2109      	movs	r1, #9
 8003da2:	68a0      	ldr	r0, [r4, #8]
 8003da4:	f7ff ff7c 	bl	8003ca0 <std>
 8003da8:	2202      	movs	r2, #2
 8003daa:	2112      	movs	r1, #18
 8003dac:	68e0      	ldr	r0, [r4, #12]
 8003dae:	f7ff ff77 	bl	8003ca0 <std>
 8003db2:	2301      	movs	r3, #1
 8003db4:	61a3      	str	r3, [r4, #24]
 8003db6:	e7d1      	b.n	8003d5c <__sinit+0xc>
 8003db8:	08004968 	.word	0x08004968
 8003dbc:	08003ce9 	.word	0x08003ce9

08003dc0 <__sfp>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	4607      	mov	r7, r0
 8003dc4:	f7ff ffac 	bl	8003d20 <__sfp_lock_acquire>
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <__sfp+0x84>)
 8003dca:	681e      	ldr	r6, [r3, #0]
 8003dcc:	69b3      	ldr	r3, [r6, #24]
 8003dce:	b913      	cbnz	r3, 8003dd6 <__sfp+0x16>
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f7ff ffbd 	bl	8003d50 <__sinit>
 8003dd6:	3648      	adds	r6, #72	; 0x48
 8003dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	d503      	bpl.n	8003de8 <__sfp+0x28>
 8003de0:	6833      	ldr	r3, [r6, #0]
 8003de2:	b30b      	cbz	r3, 8003e28 <__sfp+0x68>
 8003de4:	6836      	ldr	r6, [r6, #0]
 8003de6:	e7f7      	b.n	8003dd8 <__sfp+0x18>
 8003de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dec:	b9d5      	cbnz	r5, 8003e24 <__sfp+0x64>
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <__sfp+0x88>)
 8003df0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003df4:	60e3      	str	r3, [r4, #12]
 8003df6:	6665      	str	r5, [r4, #100]	; 0x64
 8003df8:	f000 f847 	bl	8003e8a <__retarget_lock_init_recursive>
 8003dfc:	f7ff ff96 	bl	8003d2c <__sfp_lock_release>
 8003e00:	2208      	movs	r2, #8
 8003e02:	4629      	mov	r1, r5
 8003e04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e0c:	6025      	str	r5, [r4, #0]
 8003e0e:	61a5      	str	r5, [r4, #24]
 8003e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e14:	f7ff fd30 	bl	8003878 <memset>
 8003e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e20:	4620      	mov	r0, r4
 8003e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e24:	3468      	adds	r4, #104	; 0x68
 8003e26:	e7d9      	b.n	8003ddc <__sfp+0x1c>
 8003e28:	2104      	movs	r1, #4
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	f7ff ff62 	bl	8003cf4 <__sfmoreglue>
 8003e30:	4604      	mov	r4, r0
 8003e32:	6030      	str	r0, [r6, #0]
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d1d5      	bne.n	8003de4 <__sfp+0x24>
 8003e38:	f7ff ff78 	bl	8003d2c <__sfp_lock_release>
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	e7ee      	b.n	8003e20 <__sfp+0x60>
 8003e42:	bf00      	nop
 8003e44:	08004968 	.word	0x08004968
 8003e48:	ffff0001 	.word	0xffff0001

08003e4c <_fwalk_reent>:
 8003e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e50:	4606      	mov	r6, r0
 8003e52:	4688      	mov	r8, r1
 8003e54:	2700      	movs	r7, #0
 8003e56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8003e62:	d505      	bpl.n	8003e70 <_fwalk_reent+0x24>
 8003e64:	6824      	ldr	r4, [r4, #0]
 8003e66:	2c00      	cmp	r4, #0
 8003e68:	d1f7      	bne.n	8003e5a <_fwalk_reent+0xe>
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e70:	89ab      	ldrh	r3, [r5, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d907      	bls.n	8003e86 <_fwalk_reent+0x3a>
 8003e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	d003      	beq.n	8003e86 <_fwalk_reent+0x3a>
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4630      	mov	r0, r6
 8003e82:	47c0      	blx	r8
 8003e84:	4307      	orrs	r7, r0
 8003e86:	3568      	adds	r5, #104	; 0x68
 8003e88:	e7e9      	b.n	8003e5e <_fwalk_reent+0x12>

08003e8a <__retarget_lock_init_recursive>:
 8003e8a:	4770      	bx	lr

08003e8c <__retarget_lock_acquire_recursive>:
 8003e8c:	4770      	bx	lr

08003e8e <__retarget_lock_release_recursive>:
 8003e8e:	4770      	bx	lr

08003e90 <__swhatbuf_r>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	460e      	mov	r6, r1
 8003e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e98:	4614      	mov	r4, r2
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	461d      	mov	r5, r3
 8003e9e:	b096      	sub	sp, #88	; 0x58
 8003ea0:	da08      	bge.n	8003eb4 <__swhatbuf_r+0x24>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ea8:	602a      	str	r2, [r5, #0]
 8003eaa:	061a      	lsls	r2, r3, #24
 8003eac:	d410      	bmi.n	8003ed0 <__swhatbuf_r+0x40>
 8003eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eb2:	e00e      	b.n	8003ed2 <__swhatbuf_r+0x42>
 8003eb4:	466a      	mov	r2, sp
 8003eb6:	f000 fc91 	bl	80047dc <_fstat_r>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	dbf1      	blt.n	8003ea2 <__swhatbuf_r+0x12>
 8003ebe:	9a01      	ldr	r2, [sp, #4]
 8003ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ec8:	425a      	negs	r2, r3
 8003eca:	415a      	adcs	r2, r3
 8003ecc:	602a      	str	r2, [r5, #0]
 8003ece:	e7ee      	b.n	8003eae <__swhatbuf_r+0x1e>
 8003ed0:	2340      	movs	r3, #64	; 0x40
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	b016      	add	sp, #88	; 0x58
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003edc <__smakebuf_r>:
 8003edc:	898b      	ldrh	r3, [r1, #12]
 8003ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ee0:	079d      	lsls	r5, r3, #30
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	d507      	bpl.n	8003ef8 <__smakebuf_r+0x1c>
 8003ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	6123      	str	r3, [r4, #16]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	6163      	str	r3, [r4, #20]
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	466a      	mov	r2, sp
 8003efa:	ab01      	add	r3, sp, #4
 8003efc:	f7ff ffc8 	bl	8003e90 <__swhatbuf_r>
 8003f00:	9900      	ldr	r1, [sp, #0]
 8003f02:	4605      	mov	r5, r0
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f891 	bl	800402c <_malloc_r>
 8003f0a:	b948      	cbnz	r0, 8003f20 <__smakebuf_r+0x44>
 8003f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f10:	059a      	lsls	r2, r3, #22
 8003f12:	d4ef      	bmi.n	8003ef4 <__smakebuf_r+0x18>
 8003f14:	f023 0303 	bic.w	r3, r3, #3
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	e7e3      	b.n	8003ee8 <__smakebuf_r+0xc>
 8003f20:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <__smakebuf_r+0x7c>)
 8003f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	6020      	str	r0, [r4, #0]
 8003f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f2c:	81a3      	strh	r3, [r4, #12]
 8003f2e:	9b00      	ldr	r3, [sp, #0]
 8003f30:	6120      	str	r0, [r4, #16]
 8003f32:	6163      	str	r3, [r4, #20]
 8003f34:	9b01      	ldr	r3, [sp, #4]
 8003f36:	b15b      	cbz	r3, 8003f50 <__smakebuf_r+0x74>
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f3e:	f000 fc5f 	bl	8004800 <_isatty_r>
 8003f42:	b128      	cbz	r0, 8003f50 <__smakebuf_r+0x74>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	81a3      	strh	r3, [r4, #12]
 8003f50:	89a0      	ldrh	r0, [r4, #12]
 8003f52:	4305      	orrs	r5, r0
 8003f54:	81a5      	strh	r5, [r4, #12]
 8003f56:	e7cd      	b.n	8003ef4 <__smakebuf_r+0x18>
 8003f58:	08003ce9 	.word	0x08003ce9

08003f5c <_free_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4605      	mov	r5, r0
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d040      	beq.n	8003fe6 <_free_r+0x8a>
 8003f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f68:	1f0c      	subs	r4, r1, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfb8      	it	lt
 8003f6e:	18e4      	addlt	r4, r4, r3
 8003f70:	f000 fc76 	bl	8004860 <__malloc_lock>
 8003f74:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <_free_r+0x8c>)
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	b933      	cbnz	r3, 8003f88 <_free_r+0x2c>
 8003f7a:	6063      	str	r3, [r4, #4]
 8003f7c:	6014      	str	r4, [r2, #0]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f84:	f000 bc72 	b.w	800486c <__malloc_unlock>
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d908      	bls.n	8003f9e <_free_r+0x42>
 8003f8c:	6820      	ldr	r0, [r4, #0]
 8003f8e:	1821      	adds	r1, r4, r0
 8003f90:	428b      	cmp	r3, r1
 8003f92:	bf01      	itttt	eq
 8003f94:	6819      	ldreq	r1, [r3, #0]
 8003f96:	685b      	ldreq	r3, [r3, #4]
 8003f98:	1809      	addeq	r1, r1, r0
 8003f9a:	6021      	streq	r1, [r4, #0]
 8003f9c:	e7ed      	b.n	8003f7a <_free_r+0x1e>
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	b10b      	cbz	r3, 8003fa8 <_free_r+0x4c>
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d9fa      	bls.n	8003f9e <_free_r+0x42>
 8003fa8:	6811      	ldr	r1, [r2, #0]
 8003faa:	1850      	adds	r0, r2, r1
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d10b      	bne.n	8003fc8 <_free_r+0x6c>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	4401      	add	r1, r0
 8003fb4:	1850      	adds	r0, r2, r1
 8003fb6:	4283      	cmp	r3, r0
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	d1e0      	bne.n	8003f7e <_free_r+0x22>
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4401      	add	r1, r0
 8003fc2:	6011      	str	r1, [r2, #0]
 8003fc4:	6053      	str	r3, [r2, #4]
 8003fc6:	e7da      	b.n	8003f7e <_free_r+0x22>
 8003fc8:	d902      	bls.n	8003fd0 <_free_r+0x74>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	602b      	str	r3, [r5, #0]
 8003fce:	e7d6      	b.n	8003f7e <_free_r+0x22>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	1821      	adds	r1, r4, r0
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	bf01      	itttt	eq
 8003fd8:	6819      	ldreq	r1, [r3, #0]
 8003fda:	685b      	ldreq	r3, [r3, #4]
 8003fdc:	1809      	addeq	r1, r1, r0
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	6063      	str	r3, [r4, #4]
 8003fe2:	6054      	str	r4, [r2, #4]
 8003fe4:	e7cb      	b.n	8003f7e <_free_r+0x22>
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	2000016c 	.word	0x2000016c

08003fec <sbrk_aligned>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4e0e      	ldr	r6, [pc, #56]	; (8004028 <sbrk_aligned+0x3c>)
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	6831      	ldr	r1, [r6, #0]
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	b911      	cbnz	r1, 8003ffe <sbrk_aligned+0x12>
 8003ff8:	f000 fb7a 	bl	80046f0 <_sbrk_r>
 8003ffc:	6030      	str	r0, [r6, #0]
 8003ffe:	4621      	mov	r1, r4
 8004000:	4628      	mov	r0, r5
 8004002:	f000 fb75 	bl	80046f0 <_sbrk_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	d00a      	beq.n	8004020 <sbrk_aligned+0x34>
 800400a:	1cc4      	adds	r4, r0, #3
 800400c:	f024 0403 	bic.w	r4, r4, #3
 8004010:	42a0      	cmp	r0, r4
 8004012:	d007      	beq.n	8004024 <sbrk_aligned+0x38>
 8004014:	1a21      	subs	r1, r4, r0
 8004016:	4628      	mov	r0, r5
 8004018:	f000 fb6a 	bl	80046f0 <_sbrk_r>
 800401c:	3001      	adds	r0, #1
 800401e:	d101      	bne.n	8004024 <sbrk_aligned+0x38>
 8004020:	f04f 34ff 	mov.w	r4, #4294967295
 8004024:	4620      	mov	r0, r4
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	20000170 	.word	0x20000170

0800402c <_malloc_r>:
 800402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004030:	1ccd      	adds	r5, r1, #3
 8004032:	f025 0503 	bic.w	r5, r5, #3
 8004036:	3508      	adds	r5, #8
 8004038:	2d0c      	cmp	r5, #12
 800403a:	bf38      	it	cc
 800403c:	250c      	movcc	r5, #12
 800403e:	2d00      	cmp	r5, #0
 8004040:	4607      	mov	r7, r0
 8004042:	db01      	blt.n	8004048 <_malloc_r+0x1c>
 8004044:	42a9      	cmp	r1, r5
 8004046:	d905      	bls.n	8004054 <_malloc_r+0x28>
 8004048:	230c      	movs	r3, #12
 800404a:	2600      	movs	r6, #0
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4630      	mov	r0, r6
 8004050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004054:	4e2e      	ldr	r6, [pc, #184]	; (8004110 <_malloc_r+0xe4>)
 8004056:	f000 fc03 	bl	8004860 <__malloc_lock>
 800405a:	6833      	ldr	r3, [r6, #0]
 800405c:	461c      	mov	r4, r3
 800405e:	bb34      	cbnz	r4, 80040ae <_malloc_r+0x82>
 8004060:	4629      	mov	r1, r5
 8004062:	4638      	mov	r0, r7
 8004064:	f7ff ffc2 	bl	8003fec <sbrk_aligned>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	4604      	mov	r4, r0
 800406c:	d14d      	bne.n	800410a <_malloc_r+0xde>
 800406e:	6834      	ldr	r4, [r6, #0]
 8004070:	4626      	mov	r6, r4
 8004072:	2e00      	cmp	r6, #0
 8004074:	d140      	bne.n	80040f8 <_malloc_r+0xcc>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	4631      	mov	r1, r6
 800407a:	4638      	mov	r0, r7
 800407c:	eb04 0803 	add.w	r8, r4, r3
 8004080:	f000 fb36 	bl	80046f0 <_sbrk_r>
 8004084:	4580      	cmp	r8, r0
 8004086:	d13a      	bne.n	80040fe <_malloc_r+0xd2>
 8004088:	6821      	ldr	r1, [r4, #0]
 800408a:	3503      	adds	r5, #3
 800408c:	1a6d      	subs	r5, r5, r1
 800408e:	f025 0503 	bic.w	r5, r5, #3
 8004092:	3508      	adds	r5, #8
 8004094:	2d0c      	cmp	r5, #12
 8004096:	bf38      	it	cc
 8004098:	250c      	movcc	r5, #12
 800409a:	4638      	mov	r0, r7
 800409c:	4629      	mov	r1, r5
 800409e:	f7ff ffa5 	bl	8003fec <sbrk_aligned>
 80040a2:	3001      	adds	r0, #1
 80040a4:	d02b      	beq.n	80040fe <_malloc_r+0xd2>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	442b      	add	r3, r5
 80040aa:	6023      	str	r3, [r4, #0]
 80040ac:	e00e      	b.n	80040cc <_malloc_r+0xa0>
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	1b52      	subs	r2, r2, r5
 80040b2:	d41e      	bmi.n	80040f2 <_malloc_r+0xc6>
 80040b4:	2a0b      	cmp	r2, #11
 80040b6:	d916      	bls.n	80040e6 <_malloc_r+0xba>
 80040b8:	1961      	adds	r1, r4, r5
 80040ba:	42a3      	cmp	r3, r4
 80040bc:	6025      	str	r5, [r4, #0]
 80040be:	bf18      	it	ne
 80040c0:	6059      	strne	r1, [r3, #4]
 80040c2:	6863      	ldr	r3, [r4, #4]
 80040c4:	bf08      	it	eq
 80040c6:	6031      	streq	r1, [r6, #0]
 80040c8:	5162      	str	r2, [r4, r5]
 80040ca:	604b      	str	r3, [r1, #4]
 80040cc:	4638      	mov	r0, r7
 80040ce:	f104 060b 	add.w	r6, r4, #11
 80040d2:	f000 fbcb 	bl	800486c <__malloc_unlock>
 80040d6:	f026 0607 	bic.w	r6, r6, #7
 80040da:	1d23      	adds	r3, r4, #4
 80040dc:	1af2      	subs	r2, r6, r3
 80040de:	d0b6      	beq.n	800404e <_malloc_r+0x22>
 80040e0:	1b9b      	subs	r3, r3, r6
 80040e2:	50a3      	str	r3, [r4, r2]
 80040e4:	e7b3      	b.n	800404e <_malloc_r+0x22>
 80040e6:	6862      	ldr	r2, [r4, #4]
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	bf0c      	ite	eq
 80040ec:	6032      	streq	r2, [r6, #0]
 80040ee:	605a      	strne	r2, [r3, #4]
 80040f0:	e7ec      	b.n	80040cc <_malloc_r+0xa0>
 80040f2:	4623      	mov	r3, r4
 80040f4:	6864      	ldr	r4, [r4, #4]
 80040f6:	e7b2      	b.n	800405e <_malloc_r+0x32>
 80040f8:	4634      	mov	r4, r6
 80040fa:	6876      	ldr	r6, [r6, #4]
 80040fc:	e7b9      	b.n	8004072 <_malloc_r+0x46>
 80040fe:	230c      	movs	r3, #12
 8004100:	4638      	mov	r0, r7
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	f000 fbb2 	bl	800486c <__malloc_unlock>
 8004108:	e7a1      	b.n	800404e <_malloc_r+0x22>
 800410a:	6025      	str	r5, [r4, #0]
 800410c:	e7de      	b.n	80040cc <_malloc_r+0xa0>
 800410e:	bf00      	nop
 8004110:	2000016c 	.word	0x2000016c

08004114 <__sfputc_r>:
 8004114:	6893      	ldr	r3, [r2, #8]
 8004116:	b410      	push	{r4}
 8004118:	3b01      	subs	r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	6093      	str	r3, [r2, #8]
 800411e:	da07      	bge.n	8004130 <__sfputc_r+0x1c>
 8004120:	6994      	ldr	r4, [r2, #24]
 8004122:	42a3      	cmp	r3, r4
 8004124:	db01      	blt.n	800412a <__sfputc_r+0x16>
 8004126:	290a      	cmp	r1, #10
 8004128:	d102      	bne.n	8004130 <__sfputc_r+0x1c>
 800412a:	bc10      	pop	{r4}
 800412c:	f7ff bc3a 	b.w	80039a4 <__swbuf_r>
 8004130:	6813      	ldr	r3, [r2, #0]
 8004132:	1c58      	adds	r0, r3, #1
 8004134:	6010      	str	r0, [r2, #0]
 8004136:	7019      	strb	r1, [r3, #0]
 8004138:	4608      	mov	r0, r1
 800413a:	bc10      	pop	{r4}
 800413c:	4770      	bx	lr

0800413e <__sfputs_r>:
 800413e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004140:	4606      	mov	r6, r0
 8004142:	460f      	mov	r7, r1
 8004144:	4614      	mov	r4, r2
 8004146:	18d5      	adds	r5, r2, r3
 8004148:	42ac      	cmp	r4, r5
 800414a:	d101      	bne.n	8004150 <__sfputs_r+0x12>
 800414c:	2000      	movs	r0, #0
 800414e:	e007      	b.n	8004160 <__sfputs_r+0x22>
 8004150:	463a      	mov	r2, r7
 8004152:	4630      	mov	r0, r6
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	f7ff ffdc 	bl	8004114 <__sfputc_r>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d1f3      	bne.n	8004148 <__sfputs_r+0xa>
 8004160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004164 <_vfiprintf_r>:
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	460d      	mov	r5, r1
 800416a:	4614      	mov	r4, r2
 800416c:	4698      	mov	r8, r3
 800416e:	4606      	mov	r6, r0
 8004170:	b09d      	sub	sp, #116	; 0x74
 8004172:	b118      	cbz	r0, 800417c <_vfiprintf_r+0x18>
 8004174:	6983      	ldr	r3, [r0, #24]
 8004176:	b90b      	cbnz	r3, 800417c <_vfiprintf_r+0x18>
 8004178:	f7ff fdea 	bl	8003d50 <__sinit>
 800417c:	4b89      	ldr	r3, [pc, #548]	; (80043a4 <_vfiprintf_r+0x240>)
 800417e:	429d      	cmp	r5, r3
 8004180:	d11b      	bne.n	80041ba <_vfiprintf_r+0x56>
 8004182:	6875      	ldr	r5, [r6, #4]
 8004184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004186:	07d9      	lsls	r1, r3, #31
 8004188:	d405      	bmi.n	8004196 <_vfiprintf_r+0x32>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	059a      	lsls	r2, r3, #22
 800418e:	d402      	bmi.n	8004196 <_vfiprintf_r+0x32>
 8004190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004192:	f7ff fe7b 	bl	8003e8c <__retarget_lock_acquire_recursive>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	071b      	lsls	r3, r3, #28
 800419a:	d501      	bpl.n	80041a0 <_vfiprintf_r+0x3c>
 800419c:	692b      	ldr	r3, [r5, #16]
 800419e:	b9eb      	cbnz	r3, 80041dc <_vfiprintf_r+0x78>
 80041a0:	4629      	mov	r1, r5
 80041a2:	4630      	mov	r0, r6
 80041a4:	f7ff fc50 	bl	8003a48 <__swsetup_r>
 80041a8:	b1c0      	cbz	r0, 80041dc <_vfiprintf_r+0x78>
 80041aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041ac:	07dc      	lsls	r4, r3, #31
 80041ae:	d50e      	bpl.n	80041ce <_vfiprintf_r+0x6a>
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	b01d      	add	sp, #116	; 0x74
 80041b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ba:	4b7b      	ldr	r3, [pc, #492]	; (80043a8 <_vfiprintf_r+0x244>)
 80041bc:	429d      	cmp	r5, r3
 80041be:	d101      	bne.n	80041c4 <_vfiprintf_r+0x60>
 80041c0:	68b5      	ldr	r5, [r6, #8]
 80041c2:	e7df      	b.n	8004184 <_vfiprintf_r+0x20>
 80041c4:	4b79      	ldr	r3, [pc, #484]	; (80043ac <_vfiprintf_r+0x248>)
 80041c6:	429d      	cmp	r5, r3
 80041c8:	bf08      	it	eq
 80041ca:	68f5      	ldreq	r5, [r6, #12]
 80041cc:	e7da      	b.n	8004184 <_vfiprintf_r+0x20>
 80041ce:	89ab      	ldrh	r3, [r5, #12]
 80041d0:	0598      	lsls	r0, r3, #22
 80041d2:	d4ed      	bmi.n	80041b0 <_vfiprintf_r+0x4c>
 80041d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041d6:	f7ff fe5a 	bl	8003e8e <__retarget_lock_release_recursive>
 80041da:	e7e9      	b.n	80041b0 <_vfiprintf_r+0x4c>
 80041dc:	2300      	movs	r3, #0
 80041de:	9309      	str	r3, [sp, #36]	; 0x24
 80041e0:	2320      	movs	r3, #32
 80041e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041e6:	2330      	movs	r3, #48	; 0x30
 80041e8:	f04f 0901 	mov.w	r9, #1
 80041ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80041f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80043b0 <_vfiprintf_r+0x24c>
 80041f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041f8:	4623      	mov	r3, r4
 80041fa:	469a      	mov	sl, r3
 80041fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004200:	b10a      	cbz	r2, 8004206 <_vfiprintf_r+0xa2>
 8004202:	2a25      	cmp	r2, #37	; 0x25
 8004204:	d1f9      	bne.n	80041fa <_vfiprintf_r+0x96>
 8004206:	ebba 0b04 	subs.w	fp, sl, r4
 800420a:	d00b      	beq.n	8004224 <_vfiprintf_r+0xc0>
 800420c:	465b      	mov	r3, fp
 800420e:	4622      	mov	r2, r4
 8004210:	4629      	mov	r1, r5
 8004212:	4630      	mov	r0, r6
 8004214:	f7ff ff93 	bl	800413e <__sfputs_r>
 8004218:	3001      	adds	r0, #1
 800421a:	f000 80aa 	beq.w	8004372 <_vfiprintf_r+0x20e>
 800421e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004220:	445a      	add	r2, fp
 8004222:	9209      	str	r2, [sp, #36]	; 0x24
 8004224:	f89a 3000 	ldrb.w	r3, [sl]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80a2 	beq.w	8004372 <_vfiprintf_r+0x20e>
 800422e:	2300      	movs	r3, #0
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004238:	f10a 0a01 	add.w	sl, sl, #1
 800423c:	9304      	str	r3, [sp, #16]
 800423e:	9307      	str	r3, [sp, #28]
 8004240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004244:	931a      	str	r3, [sp, #104]	; 0x68
 8004246:	4654      	mov	r4, sl
 8004248:	2205      	movs	r2, #5
 800424a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424e:	4858      	ldr	r0, [pc, #352]	; (80043b0 <_vfiprintf_r+0x24c>)
 8004250:	f000 faf8 	bl	8004844 <memchr>
 8004254:	9a04      	ldr	r2, [sp, #16]
 8004256:	b9d8      	cbnz	r0, 8004290 <_vfiprintf_r+0x12c>
 8004258:	06d1      	lsls	r1, r2, #27
 800425a:	bf44      	itt	mi
 800425c:	2320      	movmi	r3, #32
 800425e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004262:	0713      	lsls	r3, r2, #28
 8004264:	bf44      	itt	mi
 8004266:	232b      	movmi	r3, #43	; 0x2b
 8004268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800426c:	f89a 3000 	ldrb.w	r3, [sl]
 8004270:	2b2a      	cmp	r3, #42	; 0x2a
 8004272:	d015      	beq.n	80042a0 <_vfiprintf_r+0x13c>
 8004274:	4654      	mov	r4, sl
 8004276:	2000      	movs	r0, #0
 8004278:	f04f 0c0a 	mov.w	ip, #10
 800427c:	9a07      	ldr	r2, [sp, #28]
 800427e:	4621      	mov	r1, r4
 8004280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004284:	3b30      	subs	r3, #48	; 0x30
 8004286:	2b09      	cmp	r3, #9
 8004288:	d94e      	bls.n	8004328 <_vfiprintf_r+0x1c4>
 800428a:	b1b0      	cbz	r0, 80042ba <_vfiprintf_r+0x156>
 800428c:	9207      	str	r2, [sp, #28]
 800428e:	e014      	b.n	80042ba <_vfiprintf_r+0x156>
 8004290:	eba0 0308 	sub.w	r3, r0, r8
 8004294:	fa09 f303 	lsl.w	r3, r9, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	46a2      	mov	sl, r4
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	e7d2      	b.n	8004246 <_vfiprintf_r+0xe2>
 80042a0:	9b03      	ldr	r3, [sp, #12]
 80042a2:	1d19      	adds	r1, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	9103      	str	r1, [sp, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bfbb      	ittet	lt
 80042ac:	425b      	neglt	r3, r3
 80042ae:	f042 0202 	orrlt.w	r2, r2, #2
 80042b2:	9307      	strge	r3, [sp, #28]
 80042b4:	9307      	strlt	r3, [sp, #28]
 80042b6:	bfb8      	it	lt
 80042b8:	9204      	strlt	r2, [sp, #16]
 80042ba:	7823      	ldrb	r3, [r4, #0]
 80042bc:	2b2e      	cmp	r3, #46	; 0x2e
 80042be:	d10c      	bne.n	80042da <_vfiprintf_r+0x176>
 80042c0:	7863      	ldrb	r3, [r4, #1]
 80042c2:	2b2a      	cmp	r3, #42	; 0x2a
 80042c4:	d135      	bne.n	8004332 <_vfiprintf_r+0x1ce>
 80042c6:	9b03      	ldr	r3, [sp, #12]
 80042c8:	3402      	adds	r4, #2
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	9203      	str	r2, [sp, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bfb8      	it	lt
 80042d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042d8:	9305      	str	r3, [sp, #20]
 80042da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80043b4 <_vfiprintf_r+0x250>
 80042de:	2203      	movs	r2, #3
 80042e0:	4650      	mov	r0, sl
 80042e2:	7821      	ldrb	r1, [r4, #0]
 80042e4:	f000 faae 	bl	8004844 <memchr>
 80042e8:	b140      	cbz	r0, 80042fc <_vfiprintf_r+0x198>
 80042ea:	2340      	movs	r3, #64	; 0x40
 80042ec:	eba0 000a 	sub.w	r0, r0, sl
 80042f0:	fa03 f000 	lsl.w	r0, r3, r0
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	3401      	adds	r4, #1
 80042f8:	4303      	orrs	r3, r0
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	2206      	movs	r2, #6
 8004302:	482d      	ldr	r0, [pc, #180]	; (80043b8 <_vfiprintf_r+0x254>)
 8004304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004308:	f000 fa9c 	bl	8004844 <memchr>
 800430c:	2800      	cmp	r0, #0
 800430e:	d03f      	beq.n	8004390 <_vfiprintf_r+0x22c>
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <_vfiprintf_r+0x258>)
 8004312:	bb1b      	cbnz	r3, 800435c <_vfiprintf_r+0x1f8>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	3307      	adds	r3, #7
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	3308      	adds	r3, #8
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004322:	443b      	add	r3, r7
 8004324:	9309      	str	r3, [sp, #36]	; 0x24
 8004326:	e767      	b.n	80041f8 <_vfiprintf_r+0x94>
 8004328:	460c      	mov	r4, r1
 800432a:	2001      	movs	r0, #1
 800432c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004330:	e7a5      	b.n	800427e <_vfiprintf_r+0x11a>
 8004332:	2300      	movs	r3, #0
 8004334:	f04f 0c0a 	mov.w	ip, #10
 8004338:	4619      	mov	r1, r3
 800433a:	3401      	adds	r4, #1
 800433c:	9305      	str	r3, [sp, #20]
 800433e:	4620      	mov	r0, r4
 8004340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004344:	3a30      	subs	r2, #48	; 0x30
 8004346:	2a09      	cmp	r2, #9
 8004348:	d903      	bls.n	8004352 <_vfiprintf_r+0x1ee>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0c5      	beq.n	80042da <_vfiprintf_r+0x176>
 800434e:	9105      	str	r1, [sp, #20]
 8004350:	e7c3      	b.n	80042da <_vfiprintf_r+0x176>
 8004352:	4604      	mov	r4, r0
 8004354:	2301      	movs	r3, #1
 8004356:	fb0c 2101 	mla	r1, ip, r1, r2
 800435a:	e7f0      	b.n	800433e <_vfiprintf_r+0x1da>
 800435c:	ab03      	add	r3, sp, #12
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	462a      	mov	r2, r5
 8004362:	4630      	mov	r0, r6
 8004364:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <_vfiprintf_r+0x25c>)
 8004366:	a904      	add	r1, sp, #16
 8004368:	f3af 8000 	nop.w
 800436c:	4607      	mov	r7, r0
 800436e:	1c78      	adds	r0, r7, #1
 8004370:	d1d6      	bne.n	8004320 <_vfiprintf_r+0x1bc>
 8004372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004374:	07d9      	lsls	r1, r3, #31
 8004376:	d405      	bmi.n	8004384 <_vfiprintf_r+0x220>
 8004378:	89ab      	ldrh	r3, [r5, #12]
 800437a:	059a      	lsls	r2, r3, #22
 800437c:	d402      	bmi.n	8004384 <_vfiprintf_r+0x220>
 800437e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004380:	f7ff fd85 	bl	8003e8e <__retarget_lock_release_recursive>
 8004384:	89ab      	ldrh	r3, [r5, #12]
 8004386:	065b      	lsls	r3, r3, #25
 8004388:	f53f af12 	bmi.w	80041b0 <_vfiprintf_r+0x4c>
 800438c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800438e:	e711      	b.n	80041b4 <_vfiprintf_r+0x50>
 8004390:	ab03      	add	r3, sp, #12
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	462a      	mov	r2, r5
 8004396:	4630      	mov	r0, r6
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <_vfiprintf_r+0x25c>)
 800439a:	a904      	add	r1, sp, #16
 800439c:	f000 f882 	bl	80044a4 <_printf_i>
 80043a0:	e7e4      	b.n	800436c <_vfiprintf_r+0x208>
 80043a2:	bf00      	nop
 80043a4:	0800498c 	.word	0x0800498c
 80043a8:	080049ac 	.word	0x080049ac
 80043ac:	0800496c 	.word	0x0800496c
 80043b0:	080049cc 	.word	0x080049cc
 80043b4:	080049d2 	.word	0x080049d2
 80043b8:	080049d6 	.word	0x080049d6
 80043bc:	00000000 	.word	0x00000000
 80043c0:	0800413f 	.word	0x0800413f

080043c4 <_printf_common>:
 80043c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	4616      	mov	r6, r2
 80043ca:	4699      	mov	r9, r3
 80043cc:	688a      	ldr	r2, [r1, #8]
 80043ce:	690b      	ldr	r3, [r1, #16]
 80043d0:	4607      	mov	r7, r0
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bfb8      	it	lt
 80043d6:	4613      	movlt	r3, r2
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043de:	460c      	mov	r4, r1
 80043e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e4:	b10a      	cbz	r2, 80043ea <_printf_common+0x26>
 80043e6:	3301      	adds	r3, #1
 80043e8:	6033      	str	r3, [r6, #0]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	0699      	lsls	r1, r3, #26
 80043ee:	bf42      	ittt	mi
 80043f0:	6833      	ldrmi	r3, [r6, #0]
 80043f2:	3302      	addmi	r3, #2
 80043f4:	6033      	strmi	r3, [r6, #0]
 80043f6:	6825      	ldr	r5, [r4, #0]
 80043f8:	f015 0506 	ands.w	r5, r5, #6
 80043fc:	d106      	bne.n	800440c <_printf_common+0x48>
 80043fe:	f104 0a19 	add.w	sl, r4, #25
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	6832      	ldr	r2, [r6, #0]
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	42ab      	cmp	r3, r5
 800440a:	dc28      	bgt.n	800445e <_printf_common+0x9a>
 800440c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004410:	1e13      	subs	r3, r2, #0
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	bf18      	it	ne
 8004416:	2301      	movne	r3, #1
 8004418:	0692      	lsls	r2, r2, #26
 800441a:	d42d      	bmi.n	8004478 <_printf_common+0xb4>
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004424:	47c0      	blx	r8
 8004426:	3001      	adds	r0, #1
 8004428:	d020      	beq.n	800446c <_printf_common+0xa8>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	68e5      	ldr	r5, [r4, #12]
 800442e:	f003 0306 	and.w	r3, r3, #6
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf18      	it	ne
 8004436:	2500      	movne	r5, #0
 8004438:	6832      	ldr	r2, [r6, #0]
 800443a:	f04f 0600 	mov.w	r6, #0
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	bf08      	it	eq
 8004442:	1aad      	subeq	r5, r5, r2
 8004444:	6922      	ldr	r2, [r4, #16]
 8004446:	bf08      	it	eq
 8004448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800444c:	4293      	cmp	r3, r2
 800444e:	bfc4      	itt	gt
 8004450:	1a9b      	subgt	r3, r3, r2
 8004452:	18ed      	addgt	r5, r5, r3
 8004454:	341a      	adds	r4, #26
 8004456:	42b5      	cmp	r5, r6
 8004458:	d11a      	bne.n	8004490 <_printf_common+0xcc>
 800445a:	2000      	movs	r0, #0
 800445c:	e008      	b.n	8004470 <_printf_common+0xac>
 800445e:	2301      	movs	r3, #1
 8004460:	4652      	mov	r2, sl
 8004462:	4649      	mov	r1, r9
 8004464:	4638      	mov	r0, r7
 8004466:	47c0      	blx	r8
 8004468:	3001      	adds	r0, #1
 800446a:	d103      	bne.n	8004474 <_printf_common+0xb0>
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004474:	3501      	adds	r5, #1
 8004476:	e7c4      	b.n	8004402 <_printf_common+0x3e>
 8004478:	2030      	movs	r0, #48	; 0x30
 800447a:	18e1      	adds	r1, r4, r3
 800447c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004486:	4422      	add	r2, r4
 8004488:	3302      	adds	r3, #2
 800448a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800448e:	e7c5      	b.n	800441c <_printf_common+0x58>
 8004490:	2301      	movs	r3, #1
 8004492:	4622      	mov	r2, r4
 8004494:	4649      	mov	r1, r9
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	3001      	adds	r0, #1
 800449c:	d0e6      	beq.n	800446c <_printf_common+0xa8>
 800449e:	3601      	adds	r6, #1
 80044a0:	e7d9      	b.n	8004456 <_printf_common+0x92>
	...

080044a4 <_printf_i>:
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	7e0f      	ldrb	r7, [r1, #24]
 80044aa:	4691      	mov	r9, r2
 80044ac:	2f78      	cmp	r7, #120	; 0x78
 80044ae:	4680      	mov	r8, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	469a      	mov	sl, r3
 80044b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ba:	d807      	bhi.n	80044cc <_printf_i+0x28>
 80044bc:	2f62      	cmp	r7, #98	; 0x62
 80044be:	d80a      	bhi.n	80044d6 <_printf_i+0x32>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	f000 80d9 	beq.w	8004678 <_printf_i+0x1d4>
 80044c6:	2f58      	cmp	r7, #88	; 0x58
 80044c8:	f000 80a4 	beq.w	8004614 <_printf_i+0x170>
 80044cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044d4:	e03a      	b.n	800454c <_printf_i+0xa8>
 80044d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044da:	2b15      	cmp	r3, #21
 80044dc:	d8f6      	bhi.n	80044cc <_printf_i+0x28>
 80044de:	a101      	add	r1, pc, #4	; (adr r1, 80044e4 <_printf_i+0x40>)
 80044e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	08004551 	.word	0x08004551
 80044ec:	080044cd 	.word	0x080044cd
 80044f0:	080044cd 	.word	0x080044cd
 80044f4:	080044cd 	.word	0x080044cd
 80044f8:	080044cd 	.word	0x080044cd
 80044fc:	08004551 	.word	0x08004551
 8004500:	080044cd 	.word	0x080044cd
 8004504:	080044cd 	.word	0x080044cd
 8004508:	080044cd 	.word	0x080044cd
 800450c:	080044cd 	.word	0x080044cd
 8004510:	0800465f 	.word	0x0800465f
 8004514:	08004581 	.word	0x08004581
 8004518:	08004641 	.word	0x08004641
 800451c:	080044cd 	.word	0x080044cd
 8004520:	080044cd 	.word	0x080044cd
 8004524:	08004681 	.word	0x08004681
 8004528:	080044cd 	.word	0x080044cd
 800452c:	08004581 	.word	0x08004581
 8004530:	080044cd 	.word	0x080044cd
 8004534:	080044cd 	.word	0x080044cd
 8004538:	08004649 	.word	0x08004649
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e0a4      	b.n	800469a <_printf_i+0x1f6>
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	6829      	ldr	r1, [r5, #0]
 8004554:	0606      	lsls	r6, r0, #24
 8004556:	f101 0304 	add.w	r3, r1, #4
 800455a:	d50a      	bpl.n	8004572 <_printf_i+0xce>
 800455c:	680e      	ldr	r6, [r1, #0]
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	2e00      	cmp	r6, #0
 8004562:	da03      	bge.n	800456c <_printf_i+0xc8>
 8004564:	232d      	movs	r3, #45	; 0x2d
 8004566:	4276      	negs	r6, r6
 8004568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800456c:	230a      	movs	r3, #10
 800456e:	485e      	ldr	r0, [pc, #376]	; (80046e8 <_printf_i+0x244>)
 8004570:	e019      	b.n	80045a6 <_printf_i+0x102>
 8004572:	680e      	ldr	r6, [r1, #0]
 8004574:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	bf18      	it	ne
 800457c:	b236      	sxthne	r6, r6
 800457e:	e7ef      	b.n	8004560 <_printf_i+0xbc>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	1d19      	adds	r1, r3, #4
 8004586:	6029      	str	r1, [r5, #0]
 8004588:	0601      	lsls	r1, r0, #24
 800458a:	d501      	bpl.n	8004590 <_printf_i+0xec>
 800458c:	681e      	ldr	r6, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0xf2>
 8004590:	0646      	lsls	r6, r0, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0xe8>
 8004594:	881e      	ldrh	r6, [r3, #0]
 8004596:	2f6f      	cmp	r7, #111	; 0x6f
 8004598:	bf0c      	ite	eq
 800459a:	2308      	moveq	r3, #8
 800459c:	230a      	movne	r3, #10
 800459e:	4852      	ldr	r0, [pc, #328]	; (80046e8 <_printf_i+0x244>)
 80045a0:	2100      	movs	r1, #0
 80045a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045a6:	6865      	ldr	r5, [r4, #4]
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	bfa8      	it	ge
 80045ac:	6821      	ldrge	r1, [r4, #0]
 80045ae:	60a5      	str	r5, [r4, #8]
 80045b0:	bfa4      	itt	ge
 80045b2:	f021 0104 	bicge.w	r1, r1, #4
 80045b6:	6021      	strge	r1, [r4, #0]
 80045b8:	b90e      	cbnz	r6, 80045be <_printf_i+0x11a>
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	d04d      	beq.n	800465a <_printf_i+0x1b6>
 80045be:	4615      	mov	r5, r2
 80045c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80045c4:	fb03 6711 	mls	r7, r3, r1, r6
 80045c8:	5dc7      	ldrb	r7, [r0, r7]
 80045ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ce:	4637      	mov	r7, r6
 80045d0:	42bb      	cmp	r3, r7
 80045d2:	460e      	mov	r6, r1
 80045d4:	d9f4      	bls.n	80045c0 <_printf_i+0x11c>
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d10b      	bne.n	80045f2 <_printf_i+0x14e>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	07de      	lsls	r6, r3, #31
 80045de:	d508      	bpl.n	80045f2 <_printf_i+0x14e>
 80045e0:	6923      	ldr	r3, [r4, #16]
 80045e2:	6861      	ldr	r1, [r4, #4]
 80045e4:	4299      	cmp	r1, r3
 80045e6:	bfde      	ittt	le
 80045e8:	2330      	movle	r3, #48	; 0x30
 80045ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045f2:	1b52      	subs	r2, r2, r5
 80045f4:	6122      	str	r2, [r4, #16]
 80045f6:	464b      	mov	r3, r9
 80045f8:	4621      	mov	r1, r4
 80045fa:	4640      	mov	r0, r8
 80045fc:	f8cd a000 	str.w	sl, [sp]
 8004600:	aa03      	add	r2, sp, #12
 8004602:	f7ff fedf 	bl	80043c4 <_printf_common>
 8004606:	3001      	adds	r0, #1
 8004608:	d14c      	bne.n	80046a4 <_printf_i+0x200>
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	b004      	add	sp, #16
 8004610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004614:	4834      	ldr	r0, [pc, #208]	; (80046e8 <_printf_i+0x244>)
 8004616:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800461a:	6829      	ldr	r1, [r5, #0]
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004622:	6029      	str	r1, [r5, #0]
 8004624:	061d      	lsls	r5, r3, #24
 8004626:	d514      	bpl.n	8004652 <_printf_i+0x1ae>
 8004628:	07df      	lsls	r7, r3, #31
 800462a:	bf44      	itt	mi
 800462c:	f043 0320 	orrmi.w	r3, r3, #32
 8004630:	6023      	strmi	r3, [r4, #0]
 8004632:	b91e      	cbnz	r6, 800463c <_printf_i+0x198>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	f023 0320 	bic.w	r3, r3, #32
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	2310      	movs	r3, #16
 800463e:	e7af      	b.n	80045a0 <_printf_i+0xfc>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	f043 0320 	orr.w	r3, r3, #32
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	2378      	movs	r3, #120	; 0x78
 800464a:	4828      	ldr	r0, [pc, #160]	; (80046ec <_printf_i+0x248>)
 800464c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004650:	e7e3      	b.n	800461a <_printf_i+0x176>
 8004652:	0659      	lsls	r1, r3, #25
 8004654:	bf48      	it	mi
 8004656:	b2b6      	uxthmi	r6, r6
 8004658:	e7e6      	b.n	8004628 <_printf_i+0x184>
 800465a:	4615      	mov	r5, r2
 800465c:	e7bb      	b.n	80045d6 <_printf_i+0x132>
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	6826      	ldr	r6, [r4, #0]
 8004662:	1d18      	adds	r0, r3, #4
 8004664:	6961      	ldr	r1, [r4, #20]
 8004666:	6028      	str	r0, [r5, #0]
 8004668:	0635      	lsls	r5, r6, #24
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	d501      	bpl.n	8004672 <_printf_i+0x1ce>
 800466e:	6019      	str	r1, [r3, #0]
 8004670:	e002      	b.n	8004678 <_printf_i+0x1d4>
 8004672:	0670      	lsls	r0, r6, #25
 8004674:	d5fb      	bpl.n	800466e <_printf_i+0x1ca>
 8004676:	8019      	strh	r1, [r3, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	4615      	mov	r5, r2
 800467c:	6123      	str	r3, [r4, #16]
 800467e:	e7ba      	b.n	80045f6 <_printf_i+0x152>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	2100      	movs	r1, #0
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	602a      	str	r2, [r5, #0]
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	6862      	ldr	r2, [r4, #4]
 800468c:	4628      	mov	r0, r5
 800468e:	f000 f8d9 	bl	8004844 <memchr>
 8004692:	b108      	cbz	r0, 8004698 <_printf_i+0x1f4>
 8004694:	1b40      	subs	r0, r0, r5
 8004696:	6060      	str	r0, [r4, #4]
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	6123      	str	r3, [r4, #16]
 800469c:	2300      	movs	r3, #0
 800469e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a2:	e7a8      	b.n	80045f6 <_printf_i+0x152>
 80046a4:	462a      	mov	r2, r5
 80046a6:	4649      	mov	r1, r9
 80046a8:	4640      	mov	r0, r8
 80046aa:	6923      	ldr	r3, [r4, #16]
 80046ac:	47d0      	blx	sl
 80046ae:	3001      	adds	r0, #1
 80046b0:	d0ab      	beq.n	800460a <_printf_i+0x166>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	079b      	lsls	r3, r3, #30
 80046b6:	d413      	bmi.n	80046e0 <_printf_i+0x23c>
 80046b8:	68e0      	ldr	r0, [r4, #12]
 80046ba:	9b03      	ldr	r3, [sp, #12]
 80046bc:	4298      	cmp	r0, r3
 80046be:	bfb8      	it	lt
 80046c0:	4618      	movlt	r0, r3
 80046c2:	e7a4      	b.n	800460e <_printf_i+0x16a>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4632      	mov	r2, r6
 80046c8:	4649      	mov	r1, r9
 80046ca:	4640      	mov	r0, r8
 80046cc:	47d0      	blx	sl
 80046ce:	3001      	adds	r0, #1
 80046d0:	d09b      	beq.n	800460a <_printf_i+0x166>
 80046d2:	3501      	adds	r5, #1
 80046d4:	68e3      	ldr	r3, [r4, #12]
 80046d6:	9903      	ldr	r1, [sp, #12]
 80046d8:	1a5b      	subs	r3, r3, r1
 80046da:	42ab      	cmp	r3, r5
 80046dc:	dcf2      	bgt.n	80046c4 <_printf_i+0x220>
 80046de:	e7eb      	b.n	80046b8 <_printf_i+0x214>
 80046e0:	2500      	movs	r5, #0
 80046e2:	f104 0619 	add.w	r6, r4, #25
 80046e6:	e7f5      	b.n	80046d4 <_printf_i+0x230>
 80046e8:	080049dd 	.word	0x080049dd
 80046ec:	080049ee 	.word	0x080049ee

080046f0 <_sbrk_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	2300      	movs	r3, #0
 80046f4:	4d05      	ldr	r5, [pc, #20]	; (800470c <_sbrk_r+0x1c>)
 80046f6:	4604      	mov	r4, r0
 80046f8:	4608      	mov	r0, r1
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	f7fc fed2 	bl	80014a4 <_sbrk>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_sbrk_r+0x1a>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_sbrk_r+0x1a>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	20000174 	.word	0x20000174

08004710 <__sread>:
 8004710:	b510      	push	{r4, lr}
 8004712:	460c      	mov	r4, r1
 8004714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004718:	f000 f8ae 	bl	8004878 <_read_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	bfab      	itete	ge
 8004720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004722:	89a3      	ldrhlt	r3, [r4, #12]
 8004724:	181b      	addge	r3, r3, r0
 8004726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800472a:	bfac      	ite	ge
 800472c:	6563      	strge	r3, [r4, #84]	; 0x54
 800472e:	81a3      	strhlt	r3, [r4, #12]
 8004730:	bd10      	pop	{r4, pc}

08004732 <__swrite>:
 8004732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004736:	461f      	mov	r7, r3
 8004738:	898b      	ldrh	r3, [r1, #12]
 800473a:	4605      	mov	r5, r0
 800473c:	05db      	lsls	r3, r3, #23
 800473e:	460c      	mov	r4, r1
 8004740:	4616      	mov	r6, r2
 8004742:	d505      	bpl.n	8004750 <__swrite+0x1e>
 8004744:	2302      	movs	r3, #2
 8004746:	2200      	movs	r2, #0
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	f000 f868 	bl	8004820 <_lseek_r>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	4632      	mov	r2, r6
 8004754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	4628      	mov	r0, r5
 800475c:	463b      	mov	r3, r7
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004766:	f000 b817 	b.w	8004798 <_write_r>

0800476a <__sseek>:
 800476a:	b510      	push	{r4, lr}
 800476c:	460c      	mov	r4, r1
 800476e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004772:	f000 f855 	bl	8004820 <_lseek_r>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	bf15      	itete	ne
 800477c:	6560      	strne	r0, [r4, #84]	; 0x54
 800477e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004786:	81a3      	strheq	r3, [r4, #12]
 8004788:	bf18      	it	ne
 800478a:	81a3      	strhne	r3, [r4, #12]
 800478c:	bd10      	pop	{r4, pc}

0800478e <__sclose>:
 800478e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004792:	f000 b813 	b.w	80047bc <_close_r>
	...

08004798 <_write_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	2200      	movs	r2, #0
 80047a2:	4d05      	ldr	r5, [pc, #20]	; (80047b8 <_write_r+0x20>)
 80047a4:	602a      	str	r2, [r5, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f7fc fe2f 	bl	800140a <_write>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d102      	bne.n	80047b6 <_write_r+0x1e>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	b103      	cbz	r3, 80047b6 <_write_r+0x1e>
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	20000174 	.word	0x20000174

080047bc <_close_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	2300      	movs	r3, #0
 80047c0:	4d05      	ldr	r5, [pc, #20]	; (80047d8 <_close_r+0x1c>)
 80047c2:	4604      	mov	r4, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	f7fc fe3b 	bl	8001442 <_close>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_close_r+0x1a>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_close_r+0x1a>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	20000174 	.word	0x20000174

080047dc <_fstat_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	2300      	movs	r3, #0
 80047e0:	4d06      	ldr	r5, [pc, #24]	; (80047fc <_fstat_r+0x20>)
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	602b      	str	r3, [r5, #0]
 80047ea:	f7fc fe35 	bl	8001458 <_fstat>
 80047ee:	1c43      	adds	r3, r0, #1
 80047f0:	d102      	bne.n	80047f8 <_fstat_r+0x1c>
 80047f2:	682b      	ldr	r3, [r5, #0]
 80047f4:	b103      	cbz	r3, 80047f8 <_fstat_r+0x1c>
 80047f6:	6023      	str	r3, [r4, #0]
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
 80047fa:	bf00      	nop
 80047fc:	20000174 	.word	0x20000174

08004800 <_isatty_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	2300      	movs	r3, #0
 8004804:	4d05      	ldr	r5, [pc, #20]	; (800481c <_isatty_r+0x1c>)
 8004806:	4604      	mov	r4, r0
 8004808:	4608      	mov	r0, r1
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	f7fc fe33 	bl	8001476 <_isatty>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d102      	bne.n	800481a <_isatty_r+0x1a>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b103      	cbz	r3, 800481a <_isatty_r+0x1a>
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20000174 	.word	0x20000174

08004820 <_lseek_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4604      	mov	r4, r0
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	2200      	movs	r2, #0
 800482a:	4d05      	ldr	r5, [pc, #20]	; (8004840 <_lseek_r+0x20>)
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fc fe2b 	bl	800148a <_lseek>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_lseek_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_lseek_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000174 	.word	0x20000174

08004844 <memchr>:
 8004844:	4603      	mov	r3, r0
 8004846:	b510      	push	{r4, lr}
 8004848:	b2c9      	uxtb	r1, r1
 800484a:	4402      	add	r2, r0
 800484c:	4293      	cmp	r3, r2
 800484e:	4618      	mov	r0, r3
 8004850:	d101      	bne.n	8004856 <memchr+0x12>
 8004852:	2000      	movs	r0, #0
 8004854:	e003      	b.n	800485e <memchr+0x1a>
 8004856:	7804      	ldrb	r4, [r0, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	428c      	cmp	r4, r1
 800485c:	d1f6      	bne.n	800484c <memchr+0x8>
 800485e:	bd10      	pop	{r4, pc}

08004860 <__malloc_lock>:
 8004860:	4801      	ldr	r0, [pc, #4]	; (8004868 <__malloc_lock+0x8>)
 8004862:	f7ff bb13 	b.w	8003e8c <__retarget_lock_acquire_recursive>
 8004866:	bf00      	nop
 8004868:	20000168 	.word	0x20000168

0800486c <__malloc_unlock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_unlock+0x8>)
 800486e:	f7ff bb0e 	b.w	8003e8e <__retarget_lock_release_recursive>
 8004872:	bf00      	nop
 8004874:	20000168 	.word	0x20000168

08004878 <_read_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	2200      	movs	r2, #0
 8004882:	4d05      	ldr	r5, [pc, #20]	; (8004898 <_read_r+0x20>)
 8004884:	602a      	str	r2, [r5, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f7fc fda2 	bl	80013d0 <_read>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_read_r+0x1e>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_read_r+0x1e>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	20000174 	.word	0x20000174

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
