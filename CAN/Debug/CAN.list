
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064dc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006878  08006878  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006878  08006878  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006878  08006878  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800687c  0800687c  0001687c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  080068f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080068f0  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aefc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0b  00000000  00000000  0002af95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2a4  00000000  00000000  0002f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbdb  00000000  00000000  0004b504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009563b  00000000  00000000  0005b0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f071a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  000f076c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	080066ac 	.word	0x080066ac

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	080066ac 	.word	0x080066ac

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <Bsp_Led_Show_State_Handle>:
short Ctrl_Vy =0;
short Ctrl_Vw =0;
// LED显示当前运行状态，每10毫秒调用一次，LED灯每200毫秒闪烁一次。
// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
void Bsp_Led_Show_State_Handle(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	static uint8_t led_count = 0;
	led_count++;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <Bsp_Led_Show_State_Handle+0x2c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <Bsp_Led_Show_State_Handle+0x2c>)
 8000a22:	701a      	strb	r2, [r3, #0]
	if (led_count > 20)
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <Bsp_Led_Show_State_Handle+0x2c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b14      	cmp	r3, #20
 8000a2a:	d907      	bls.n	8000a3c <Bsp_Led_Show_State_Handle+0x28>
	{
		led_count = 0;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <Bsp_Led_Show_State_Handle+0x2c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 8000a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <Bsp_Led_Show_State_Handle+0x30>)
 8000a38:	f003 fc91 	bl	800435e <HAL_GPIO_TogglePin>
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000096 	.word	0x20000096
 8000a44:	40011000 	.word	0x40011000

08000a48 <Bsp_Init>:


// The peripheral device is initialized  外设设备初始化
void Bsp_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	uint8_t res = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
	Can_Init();
 8000a52:	f000 f937 	bl	8000cc4 <Can_Init>
	Bsp_Data_Init(&ReceVelMode, &ReceVel);
 8000a56:	4910      	ldr	r1, [pc, #64]	; (8000a98 <Bsp_Init+0x50>)
 8000a58:	4810      	ldr	r0, [pc, #64]	; (8000a9c <Bsp_Init+0x54>)
 8000a5a:	f000 f82b 	bl	8000ab4 <Bsp_Data_Init>
	Bsp_Data_Init1(&Ctrl_Vx, &Ctrl_Vy, &Ctrl_Vw);
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <Bsp_Init+0x58>)
 8000a60:	4910      	ldr	r1, [pc, #64]	; (8000aa4 <Bsp_Init+0x5c>)
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <Bsp_Init+0x60>)
 8000a64:	f000 f833 	bl	8000ace <Bsp_Data_Init1>
	USART1_Init();
 8000a68:	f001 f8d8 	bl	8001c1c <USART1_Init>
	res = MPU9250_Init();
 8000a6c:	f000 fc44 	bl	80012f8 <MPU9250_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
	if (res != 0)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <Bsp_Init+0x3a>
	{
		printf("MPU9250 INIT ERROR\n");
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <Bsp_Init+0x64>)
 8000a7c:	f004 fe92 	bl	80057a4 <puts>
		while(1);
 8000a80:	e7fe      	b.n	8000a80 <Bsp_Init+0x38>
	}
	Beep_On_Time(50);
 8000a82:	2032      	movs	r0, #50	; 0x32
 8000a84:	f000 f8bc 	bl	8000c00 <Beep_On_Time>
	printf("start\n");
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <Bsp_Init+0x68>)
 8000a8a:	f004 fe8b 	bl	80057a4 <puts>




}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000008e 	.word	0x2000008e
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	20000094 	.word	0x20000094
 8000aa4:	20000092 	.word	0x20000092
 8000aa8:	20000090 	.word	0x20000090
 8000aac:	080066c4 	.word	0x080066c4
 8000ab0:	080066d8 	.word	0x080066d8

08000ab4 <Bsp_Data_Init>:
void Bsp_Data_Init(unsigned char* p1, short* p2)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	USART1_Data_Init(p1, p2);
 8000abe:	6839      	ldr	r1, [r7, #0]
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f001 f8b9 	bl	8001c38 <USART1_Data_Init>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <Bsp_Data_Init1>:
void Bsp_Data_Init1(short* p1, short* p2, short* p3)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
	USART1_Data_Init1(p1, p2, p3);
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f001 f8be 	bl	8001c60 <USART1_Data_Init1>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <Ctrl_robot_moving>:
void Ctrl_robot_moving(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
	int result = USART1_Parse_Robot_Speed();
 8000af2:	f001 f929 	bl	8001d48 <USART1_Parse_Robot_Speed>
 8000af6:	4603      	mov	r3, r0
 8000af8:	607b      	str	r3, [r7, #4]
	static uint8_t count = 0;
	if(result == 0)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d106      	bne.n	8000b0e <Ctrl_robot_moving+0x22>
	{
		count++;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <Ctrl_robot_moving+0x68>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <Ctrl_robot_moving+0x68>)
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	e002      	b.n	8000b14 <Ctrl_robot_moving+0x28>
	}
	else
		count = 0;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <Ctrl_robot_moving+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
	if(count > 20)
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <Ctrl_robot_moving+0x68>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b14      	cmp	r3, #20
 8000b1a:	d90b      	bls.n	8000b34 <Ctrl_robot_moving+0x48>
	{
		count = 0;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <Ctrl_robot_moving+0x68>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		Ctrl_Vx = 0;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <Ctrl_robot_moving+0x6c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	801a      	strh	r2, [r3, #0]
		Ctrl_Vy = 0;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <Ctrl_robot_moving+0x70>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	801a      	strh	r2, [r3, #0]
		Ctrl_Vw = 0;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <Ctrl_robot_moving+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	801a      	strh	r2, [r3, #0]
	}
	Can_Robot_Moving(Ctrl_Vx, Ctrl_Vy, Ctrl_Vw);
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <Ctrl_robot_moving+0x6c>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <Ctrl_robot_moving+0x70>)
 8000b3c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <Ctrl_robot_moving+0x74>)
 8000b42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f932 	bl	8000db0 <Can_Robot_Moving>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000097 	.word	0x20000097
 8000b58:	20000090 	.word	0x20000090
 8000b5c:	20000092 	.word	0x20000092
 8000b60:	20000094 	.word	0x20000094

08000b64 <Bsp_Loop>:
// main.c中循环调用此函数，避免多次修改main.c文件。
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file
void Bsp_Loop(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	// Detect button down events   检测按键按下事件
	if (Key1_State(KEY_MODE_ONE_TIME))
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f000 fb8f 	bl	800128c <Key1_State>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d004      	beq.n	8000b7e <Bsp_Loop+0x1a>
	{
		Beep_On_Time(50);
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f000 f843 	bl	8000c00 <Beep_On_Time>
		MPU_Get_Deviation_gyro();
 8000b7a:	f000 fe15 	bl	80017a8 <MPU_Get_Deviation_gyro>
	}
	Ctrl_robot_moving();
 8000b7e:	f7ff ffb5 	bl	8000aec <Ctrl_robot_moving>
	MPU9250_Data_Send();
 8000b82:	f000 fe21 	bl	80017c8 <MPU9250_Data_Send>
	Bsp_Led_Show_State_Handle();
 8000b86:	f7ff ff45 	bl	8000a14 <Bsp_Led_Show_State_Handle>
	// The buzzer automatically shuts down when times out   蜂鸣器超时自动关闭
	Beep_Timeout_Close_Handle();
 8000b8a:	f000 f879 	bl	8000c80 <Beep_Timeout_Close_Handle>
	HAL_Delay(6);
 8000b8e:	2006      	movs	r0, #6
 8000b90:	f001 fec0 	bl	8002914 <HAL_Delay>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <Beep_Set_Time>:
uint8_t beep_state = 0;

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	beep_on_time = time;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <Beep_Set_Time+0x1c>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	8013      	strh	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000098 	.word	0x20000098

08000bb8 <Beep_Get_Time>:

// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	return beep_on_time;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <Beep_Get_Time+0x10>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000098 	.word	0x20000098

08000bcc <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	beep_state = state;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <Beep_Set_State+0x1c>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	7013      	strb	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000009a 	.word	0x2000009a

08000bec <Beep_Get_State>:

// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	return beep_state;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <Beep_Get_State+0x10>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	2000009a 	.word	0x2000009a

08000c00 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
	if (time == BEEP_STATE_ON_ALWAYS)
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10b      	bne.n	8000c28 <Beep_On_Time+0x28>
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff ffdb 	bl	8000bcc <Beep_Set_State>
		Beep_Set_Time(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffbe 	bl	8000b98 <Beep_Set_Time>
		BEEP_ON();
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2120      	movs	r1, #32
 8000c20:	4815      	ldr	r0, [pc, #84]	; (8000c78 <Beep_On_Time+0x78>)
 8000c22:	f003 fb84 	bl	800432e <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 8000c26:	e022      	b.n	8000c6e <Beep_On_Time+0x6e>
	else if (time == BEEP_STATE_OFF)
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10b      	bne.n	8000c46 <Beep_On_Time+0x46>
		Beep_Set_State(BEEP_STATE_OFF);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ffcc 	bl	8000bcc <Beep_Set_State>
		Beep_Set_Time(0);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff ffaf 	bl	8000b98 <Beep_Set_Time>
		BEEP_OFF();
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <Beep_On_Time+0x78>)
 8000c40:	f003 fb75 	bl	800432e <HAL_GPIO_WritePin>
}
 8000c44:	e013      	b.n	8000c6e <Beep_On_Time+0x6e>
		if (time >= 10)
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	2b09      	cmp	r3, #9
 8000c4a:	d910      	bls.n	8000c6e <Beep_On_Time+0x6e>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff ffbd 	bl	8000bcc <Beep_Set_State>
			Beep_Set_Time(time / 10);
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <Beep_On_Time+0x7c>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff9a 	bl	8000b98 <Beep_Set_Time>
			BEEP_ON();
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <Beep_On_Time+0x78>)
 8000c6a:	f003 fb60 	bl	800432e <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	cccccccd 	.word	0xcccccccd

08000c80 <Beep_Timeout_Close_Handle>:

// 蜂鸣器超时自动关闭程序, 10毫秒调用一次 
// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 8000c84:	f7ff ffb2 	bl	8000bec <Beep_Get_State>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d113      	bne.n	8000cb6 <Beep_Timeout_Close_Handle+0x36>
	{
		if (Beep_Get_Time())
 8000c8e:	f7ff ff93 	bl	8000bb8 <Beep_Get_Time>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <Beep_Timeout_Close_Handle+0x26>
		{
			beep_on_time--;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <Beep_Timeout_Close_Handle+0x3c>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <Beep_Timeout_Close_Handle+0x3c>)
 8000ca2:	801a      	strh	r2, [r3, #0]
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 8000ca4:	e007      	b.n	8000cb6 <Beep_Timeout_Close_Handle+0x36>
			BEEP_OFF();
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <Beep_Timeout_Close_Handle+0x40>)
 8000cac:	f003 fb3f 	bl	800432e <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff8b 	bl	8000bcc <Beep_Set_State>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000098 	.word	0x20000098
 8000cc0:	40011000 	.word	0x40011000

08000cc4 <Can_Init>:

#define PI 3.1415926
#define WHEEL_R 0.1
// Initialize the CAN  初始化CAN
void Can_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    sFilterConfig.FilterBank = 0;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <Can_Init+0x78>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <Can_Init+0x78>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <Can_Init+0x78>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <Can_Init+0x78>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <Can_Init+0x78>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <Can_Init+0x78>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <Can_Init+0x78>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <Can_Init+0x78>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
    sFilterConfig.SlaveStartFilterBank = 27;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <Can_Init+0x78>)
 8000cfa:	221b      	movs	r2, #27
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
    sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <Can_Init+0x78>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	621a      	str	r2, [r3, #32]

    // Setting the CAN Filter  设置CAN过滤器
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000d04:	490d      	ldr	r1, [pc, #52]	; (8000d3c <Can_Init+0x78>)
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <Can_Init+0x7c>)
 8000d08:	f001 ff23 	bl	8002b52 <HAL_CAN_ConfigFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <Can_Init+0x52>
    {
        Error_Handler();
 8000d12:	f001 fbab 	bl	800246c <Error_Handler>
    }

    // Start the CAN peripheral  启动CAN
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <Can_Init+0x7c>)
 8000d18:	f001 ffe4 	bl	8002ce4 <HAL_CAN_Start>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <Can_Init+0x62>
    {
        Error_Handler();
 8000d22:	f001 fba3 	bl	800246c <Error_Handler>
    }

    // Activate CAN RX notification  启动CAN RX通知
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000d26:	2102      	movs	r1, #2
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <Can_Init+0x7c>)
 8000d2a:	f002 fa0a 	bl	8003142 <HAL_CAN_ActivateNotification>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <Can_Init+0x74>
    {
        Error_Handler();
 8000d34:	f001 fb9a 	bl	800246c <Error_Handler>
    }
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000d0 	.word	0x200000d0
 8000d40:	2000016c 	.word	0x2000016c

08000d44 <Can_set_RobotMoving_Txheader>:
    {
        Error_Handler();
    }
}
void Can_set_RobotMoving_Txheader(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	 TxHeader.StdId = 0x00;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <Can_set_RobotMoving_Txheader+0x30>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
	 TxHeader.ExtId = 0x1ff46f00;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <Can_set_RobotMoving_Txheader+0x30>)
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <Can_set_RobotMoving_Txheader+0x34>)
 8000d52:	605a      	str	r2, [r3, #4]
	 TxHeader.RTR = CAN_RTR_DATA;
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <Can_set_RobotMoving_Txheader+0x30>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
	 TxHeader.IDE = CAN_ID_EXT;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <Can_set_RobotMoving_Txheader+0x30>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	609a      	str	r2, [r3, #8]
	 TxHeader.DLC = 8;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <Can_set_RobotMoving_Txheader+0x30>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	611a      	str	r2, [r3, #16]
	 TxHeader.TransmitGlobalTime = DISABLE;
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <Can_set_RobotMoving_Txheader+0x30>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	751a      	strb	r2, [r3, #20]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	2000009c 	.word	0x2000009c
 8000d78:	1ff46f00 	.word	0x1ff46f00

08000d7c <Can_send_Data>:
void Can_send_Data(uint8_t * TxData, uint32_t *pTxMailbox)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, pTxMailbox) != HAL_OK)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4906      	ldr	r1, [pc, #24]	; (8000da4 <Can_send_Data+0x28>)
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <Can_send_Data+0x2c>)
 8000d8e:	f001 ffed 	bl	8002d6c <HAL_CAN_AddTxMessage>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <Can_send_Data+0x20>
	    {
	        Error_Handler();
 8000d98:	f001 fb68 	bl	800246c <Error_Handler>
	    }
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000009c 	.word	0x2000009c
 8000da8:	2000016c 	.word	0x2000016c
 8000dac:	00000000 	.word	0x00000000

08000db0 <Can_Robot_Moving>:
	TxData[7] = 0x00;

	Can_send_Data(TxData, &TxMailbox);
}
void Can_Robot_Moving(short Vx, short Vy, short Vw)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	80bb      	strh	r3, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	807b      	strh	r3, [r7, #2]
	uint8_t TxData[8] = {0};
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
	Can_set_RobotMoving_Txheader();
 8000dce:	f7ff ffb9 	bl	8000d44 <Can_set_RobotMoving_Txheader>

	//short n = (vel * 60 * 38.4)/(2*PI*WHEEL_R*100);
	short Va = (Vx + Vy - Vw / 2) * 60 * 38.4 /(2 * PI * WHEEL_R * 1000);
 8000dd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dda:	441a      	add	r2, r3
 8000ddc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000de0:	0fd9      	lsrs	r1, r3, #31
 8000de2:	440b      	add	r3, r1
 8000de4:	105b      	asrs	r3, r3, #1
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	1ad2      	subs	r2, r2, r3
 8000dea:	4613      	mov	r3, r2
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fb6a 	bl	80004cc <__aeabi_i2d>
 8000df8:	a3dd      	add	r3, pc, #884	; (adr r3, 8001170 <Can_Robot_Moving+0x3c0>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff fbcf 	bl	80005a0 <__aeabi_dmul>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	a3db      	add	r3, pc, #876	; (adr r3, 8001178 <Can_Robot_Moving+0x3c8>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fcf0 	bl	80007f4 <__aeabi_ddiv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fdd2 	bl	80009c4 <__aeabi_d2iz>
 8000e20:	4603      	mov	r3, r0
 8000e22:	83fb      	strh	r3, [r7, #30]
	short Vb = (Vx - Vy - Vw / 2) * 60 * 38.4 /(2 * PI * WHEEL_R * 1000);
 8000e24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e2c:	1ad2      	subs	r2, r2, r3
 8000e2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e32:	0fd9      	lsrs	r1, r3, #31
 8000e34:	440b      	add	r3, r1
 8000e36:	105b      	asrs	r3, r3, #1
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fb41 	bl	80004cc <__aeabi_i2d>
 8000e4a:	a3c9      	add	r3, pc, #804	; (adr r3, 8001170 <Can_Robot_Moving+0x3c0>)
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	f7ff fba6 	bl	80005a0 <__aeabi_dmul>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	a3c6      	add	r3, pc, #792	; (adr r3, 8001178 <Can_Robot_Moving+0x3c8>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fcc7 	bl	80007f4 <__aeabi_ddiv>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fda9 	bl	80009c4 <__aeabi_d2iz>
 8000e72:	4603      	mov	r3, r0
 8000e74:	83bb      	strh	r3, [r7, #28]
	short Vc = (Vx + Vy + Vw / 2) * 60 * 38.4 /(2 * PI * WHEEL_R * 1000);
 8000e76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e7e:	441a      	add	r2, r3
 8000e80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e84:	0fd9      	lsrs	r1, r3, #31
 8000e86:	440b      	add	r3, r1
 8000e88:	105b      	asrs	r3, r3, #1
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	441a      	add	r2, r3
 8000e8e:	4613      	mov	r3, r2
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fb18 	bl	80004cc <__aeabi_i2d>
 8000e9c:	a3b4      	add	r3, pc, #720	; (adr r3, 8001170 <Can_Robot_Moving+0x3c0>)
 8000e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea2:	f7ff fb7d 	bl	80005a0 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	a3b2      	add	r3, pc, #712	; (adr r3, 8001178 <Can_Robot_Moving+0x3c8>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fc9e 	bl	80007f4 <__aeabi_ddiv>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fd80 	bl	80009c4 <__aeabi_d2iz>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	837b      	strh	r3, [r7, #26]
	short Vd = (Vx - Vy + Vw / 2) * 60 * 38.4 /(2 * PI * WHEEL_R * 1000);
 8000ec8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ecc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ed6:	0fd9      	lsrs	r1, r3, #31
 8000ed8:	440b      	add	r3, r1
 8000eda:	105b      	asrs	r3, r3, #1
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	441a      	add	r2, r3
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff faef 	bl	80004cc <__aeabi_i2d>
 8000eee:	a3a0      	add	r3, pc, #640	; (adr r3, 8001170 <Can_Robot_Moving+0x3c0>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	f7ff fb54 	bl	80005a0 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	a39d      	add	r3, pc, #628	; (adr r3, 8001178 <Can_Robot_Moving+0x3c8>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff fc75 	bl	80007f4 <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fd57 	bl	80009c4 <__aeabi_d2iz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	833b      	strh	r3, [r7, #24]
	if(Vx > 0 && Vy == 0 && Vw == 0)
 8000f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	dd45      	ble.n	8000fae <Can_Robot_Moving+0x1fe>
 8000f22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d141      	bne.n	8000fae <Can_Robot_Moving+0x1fe>
 8000f2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d13d      	bne.n	8000fae <Can_Robot_Moving+0x1fe>
	{
		Vb += 0.0085*Vb;
 8000f32:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fac8 	bl	80004cc <__aeabi_i2d>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	460d      	mov	r5, r1
 8000f40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fac1 	bl	80004cc <__aeabi_i2d>
 8000f4a:	a38d      	add	r3, pc, #564	; (adr r3, 8001180 <Can_Robot_Moving+0x3d0>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fb26 	bl	80005a0 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff f96a 	bl	8000234 <__adddf3>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fd2c 	bl	80009c4 <__aeabi_d2iz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	83bb      	strh	r3, [r7, #28]
		Va += 0.0085*Va;
 8000f70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faa9 	bl	80004cc <__aeabi_i2d>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff faa2 	bl	80004cc <__aeabi_i2d>
 8000f88:	a37d      	add	r3, pc, #500	; (adr r3, 8001180 <Can_Robot_Moving+0x3d0>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fb07 	bl	80005a0 <__aeabi_dmul>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f7ff f94b 	bl	8000234 <__adddf3>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fd0d 	bl	80009c4 <__aeabi_d2iz>
 8000faa:	4603      	mov	r3, r0
 8000fac:	83fb      	strh	r3, [r7, #30]
	}

	if(Vx < 0 && Vy == 0 && Vw == 0)
 8000fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da45      	bge.n	8001042 <Can_Robot_Moving+0x292>
 8000fb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d141      	bne.n	8001042 <Can_Robot_Moving+0x292>
 8000fbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d13d      	bne.n	8001042 <Can_Robot_Moving+0x292>
	{
		Vb += 0.00525*Vb;
 8000fc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa7e 	bl	80004cc <__aeabi_i2d>
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa77 	bl	80004cc <__aeabi_i2d>
 8000fde:	a36a      	add	r3, pc, #424	; (adr r3, 8001188 <Can_Robot_Moving+0x3d8>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fadc 	bl	80005a0 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4620      	mov	r0, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	f7ff f920 	bl	8000234 <__adddf3>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fce2 	bl	80009c4 <__aeabi_d2iz>
 8001000:	4603      	mov	r3, r0
 8001002:	83bb      	strh	r3, [r7, #28]
		Va += 0.00525*Va;
 8001004:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa5f 	bl	80004cc <__aeabi_i2d>
 800100e:	4604      	mov	r4, r0
 8001010:	460d      	mov	r5, r1
 8001012:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa58 	bl	80004cc <__aeabi_i2d>
 800101c:	a35a      	add	r3, pc, #360	; (adr r3, 8001188 <Can_Robot_Moving+0x3d8>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fabd 	bl	80005a0 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f901 	bl	8000234 <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fcc3 	bl	80009c4 <__aeabi_d2iz>
 800103e:	4603      	mov	r3, r0
 8001040:	83fb      	strh	r3, [r7, #30]
	}

	if(Vy > 0 && Vx == 0 && Vw == 0)
 8001042:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd45      	ble.n	80010d6 <Can_Robot_Moving+0x326>
 800104a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d141      	bne.n	80010d6 <Can_Robot_Moving+0x326>
 8001052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d13d      	bne.n	80010d6 <Can_Robot_Moving+0x326>
	{
		Vb += 0.0095*Vb;
 800105a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa34 	bl	80004cc <__aeabi_i2d>
 8001064:	4604      	mov	r4, r0
 8001066:	460d      	mov	r5, r1
 8001068:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa2d 	bl	80004cc <__aeabi_i2d>
 8001072:	a347      	add	r3, pc, #284	; (adr r3, 8001190 <Can_Robot_Moving+0x3e0>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fa92 	bl	80005a0 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff f8d6 	bl	8000234 <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fc98 	bl	80009c4 <__aeabi_d2iz>
 8001094:	4603      	mov	r3, r0
 8001096:	83bb      	strh	r3, [r7, #28]
		Vc += 0.0095*Vc;
 8001098:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa15 	bl	80004cc <__aeabi_i2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa0e 	bl	80004cc <__aeabi_i2d>
 80010b0:	a337      	add	r3, pc, #220	; (adr r3, 8001190 <Can_Robot_Moving+0x3e0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa73 	bl	80005a0 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff f8b7 	bl	8000234 <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fc79 	bl	80009c4 <__aeabi_d2iz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	837b      	strh	r3, [r7, #26]
	}
	if(Vy < 0 && Vx == 0 && Vw == 0)
 80010d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da5c      	bge.n	8001198 <Can_Robot_Moving+0x3e8>
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d158      	bne.n	8001198 <Can_Robot_Moving+0x3e8>
 80010e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d154      	bne.n	8001198 <Can_Robot_Moving+0x3e8>
	{
		Vb += 0.00525*Vb;
 80010ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f9ea 	bl	80004cc <__aeabi_i2d>
 80010f8:	4604      	mov	r4, r0
 80010fa:	460d      	mov	r5, r1
 80010fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f9e3 	bl	80004cc <__aeabi_i2d>
 8001106:	a320      	add	r3, pc, #128	; (adr r3, 8001188 <Can_Robot_Moving+0x3d8>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fa48 	bl	80005a0 <__aeabi_dmul>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff f88c 	bl	8000234 <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fc4e 	bl	80009c4 <__aeabi_d2iz>
 8001128:	4603      	mov	r3, r0
 800112a:	83bb      	strh	r3, [r7, #28]
		Vc += 0.00525*Vc;
 800112c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9cb 	bl	80004cc <__aeabi_i2d>
 8001136:	4604      	mov	r4, r0
 8001138:	460d      	mov	r5, r1
 800113a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9c4 	bl	80004cc <__aeabi_i2d>
 8001144:	a310      	add	r3, pc, #64	; (adr r3, 8001188 <Can_Robot_Moving+0x3d8>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff fa29 	bl	80005a0 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4620      	mov	r0, r4
 8001154:	4629      	mov	r1, r5
 8001156:	f7ff f86d 	bl	8000234 <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fc2f 	bl	80009c4 <__aeabi_d2iz>
 8001166:	4603      	mov	r3, r0
 8001168:	837b      	strh	r3, [r7, #26]
 800116a:	e015      	b.n	8001198 <Can_Robot_Moving+0x3e8>
 800116c:	f3af 8000 	nop.w
 8001170:	33333333 	.word	0x33333333
 8001174:	40433333 	.word	0x40433333
 8001178:	5436b8fb 	.word	0x5436b8fb
 800117c:	4083a28c 	.word	0x4083a28c
 8001180:	b020c49c 	.word	0xb020c49c
 8001184:	3f816872 	.word	0x3f816872
 8001188:	24dd2f1b 	.word	0x24dd2f1b
 800118c:	3f758106 	.word	0x3f758106
 8001190:	6a7ef9db 	.word	0x6a7ef9db
 8001194:	3f8374bc 	.word	0x3f8374bc
	}
	//Va += 0.0085*Va;
	//Vb += 0.0085*Vb;
	//Vb += 0.0085*Vb;
	TxData[0] = (-Vc) & 0xff;
 8001198:	8b7b      	ldrh	r3, [r7, #26]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	425b      	negs	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	743b      	strb	r3, [r7, #16]
	TxData[1] = ((-Vc) >> 8) & 0xff;
 80011a2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011a6:	425b      	negs	r3, r3
 80011a8:	121b      	asrs	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	747b      	strb	r3, [r7, #17]

	TxData[2] = Vb & 0xff;
 80011ae:	8bbb      	ldrh	r3, [r7, #28]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	74bb      	strb	r3, [r7, #18]
	TxData[3] = (Vb >> 8) & 0xff;
 80011b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	74fb      	strb	r3, [r7, #19]

	TxData[4] = Va & 0xff;
 80011c0:	8bfb      	ldrh	r3, [r7, #30]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	753b      	strb	r3, [r7, #20]
	TxData[5] = (Va >> 8) & 0xff;
 80011c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ca:	121b      	asrs	r3, r3, #8
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	757b      	strb	r3, [r7, #21]

	TxData[6] = (-Vd) & 0xff;
 80011d2:	8b3b      	ldrh	r3, [r7, #24]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	425b      	negs	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	75bb      	strb	r3, [r7, #22]
	TxData[7] = ((-Vd) >> 8) & 0xff;
 80011dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011e0:	425b      	negs	r3, r3
 80011e2:	121b      	asrs	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	75fb      	strb	r3, [r7, #23]
	Can_send_Data(TxData, &TxMailbox);
 80011e8:	f107 020c 	add.w	r2, r7, #12
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fdc2 	bl	8000d7c <Can_send_Data>
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}

08001200 <HAL_CAN_RxFifo0MsgPendingCallback>:

// CAN receives interrupt callbacks  CAN接收中断回调
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	b08b      	sub	sp, #44	; 0x2c
 8001204:	af06      	add	r7, sp, #24
 8001206:	6078      	str	r0, [r7, #4]
	if (hcan->Instance == CAN1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d122      	bne.n	8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	{
		uint8_t RxData[8];
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f001 fe80 	bl	8002f20 <HAL_CAN_GetRxMessage>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		{
			Error_Handler();
 8001226:	f001 f921 	bl	800246c <Error_Handler>
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
					RxData[0], RxData[1], RxData[2], RxData[3],
					RxData[4], RxData[5], RxData[6], RxData[7]);
		}
	}
}
 800122a:	e015      	b.n	8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
					RxData[0], RxData[1], RxData[2], RxData[3],
 800122c:	7a3b      	ldrb	r3, [r7, #8]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 800122e:	461d      	mov	r5, r3
					RxData[0], RxData[1], RxData[2], RxData[3],
 8001230:	7a7b      	ldrb	r3, [r7, #9]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8001232:	461e      	mov	r6, r3
					RxData[0], RxData[1], RxData[2], RxData[3],
 8001234:	7abb      	ldrb	r3, [r7, #10]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8001236:	469c      	mov	ip, r3
					RxData[0], RxData[1], RxData[2], RxData[3],
 8001238:	7afb      	ldrb	r3, [r7, #11]
					RxData[4], RxData[5], RxData[6], RxData[7]);
 800123a:	7b3a      	ldrb	r2, [r7, #12]
 800123c:	7b79      	ldrb	r1, [r7, #13]
 800123e:	7bb8      	ldrb	r0, [r7, #14]
 8001240:	7bfc      	ldrb	r4, [r7, #15]
			printf("CAN Receive:%02X %02X %02X %02X %02X %02X %02X %02X \n",
 8001242:	9404      	str	r4, [sp, #16]
 8001244:	9003      	str	r0, [sp, #12]
 8001246:	9102      	str	r1, [sp, #8]
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4663      	mov	r3, ip
 800124e:	4632      	mov	r2, r6
 8001250:	4629      	mov	r1, r5
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001254:	f004 fa20 	bl	8005698 <iprintf>
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001260:	40006400 	.word	0x40006400
 8001264:	200000b4 	.word	0x200000b4
 8001268:	08006714 	.word	0x08006714

0800126c <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8001270:	2104      	movs	r1, #4
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <Key1_is_Press+0x1c>)
 8001274:	f003 f844 	bl	8004300 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <Key1_is_Press+0x18>
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40011400 	.word	0x40011400

0800128c <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8001296:	f7ff ffe9 	bl	800126c <Key1_is_Press>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d10e      	bne.n	80012be <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <Key1_State+0x50>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	3301      	adds	r3, #1
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	429a      	cmp	r2, r3
 80012ae:	da09      	bge.n	80012c4 <Key1_State+0x38>
		{
			key1_state++;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <Key1_State+0x50>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <Key1_State+0x50>)
 80012ba:	801a      	strh	r2, [r3, #0]
 80012bc:	e002      	b.n	80012c4 <Key1_State+0x38>
		}
	}
	else
	{
		key1_state = 0;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <Key1_State+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <Key1_State+0x50>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d101      	bne.n	80012d0 <Key1_State+0x44>
	{
		return KEY_PRESS;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <Key1_State+0x46>
	}
	return KEY_RELEASE;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000f8 	.word	0x200000f8

080012e0 <MPU_ADDR_CTRL>:
int16_t magx, magy, magz;	 // Magnetometer raw data   磁力计原始数据
int16_t Deviation_gyrox, Deviation_gyroy, Deviation_gyroz;
// 拉低AD0引脚，让MPU6500的ID为0x68
// Lower the AD0 pin so that the ID of the MPU6500 is 0x68
void MPU_ADDR_CTRL(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU_AD0_GPIO_Port, MPU_AD0_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <MPU_ADDR_CTRL+0x14>)
 80012ec:	f003 f81f 	bl	800432e <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <MPU9250_Init>:

// 初始化MPU9250, 返回值:0,成功, 其他,错误代码
// Initialize MPU9250, return value :0, success, other, error code
uint8_t MPU9250_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
	MPU_ADDR_CTRL();
 80012fe:	f7ff ffef 	bl	80012e0 <MPU_ADDR_CTRL>
	MPU_IIC_Init();
 8001302:	f000 faec 	bl	80018de <MPU_IIC_Init>
	MPU_Delay_ms(10);
 8001306:	200a      	movs	r0, #10
 8001308:	f000 f989 	bl	800161e <MPU_Delay_ms>

	uint8_t res = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]
	// Reset MPU9250 //复位MPU9250
	MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT1_REG, 0X80);
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	216b      	movs	r1, #107	; 0x6b
 8001314:	2068      	movs	r0, #104	; 0x68
 8001316:	f000 f9e1 	bl	80016dc <MPU_Write_Byte>
	// Delay 100 ms //延时100ms
	MPU_Delay_ms(100);
 800131a:	2064      	movs	r0, #100	; 0x64
 800131c:	f000 f97f 	bl	800161e <MPU_Delay_ms>
	// Wake mpu9250 //唤醒MPU9250
	MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT1_REG, 0X00);
 8001320:	2200      	movs	r2, #0
 8001322:	216b      	movs	r1, #107	; 0x6b
 8001324:	2068      	movs	r0, #104	; 0x68
 8001326:	f000 f9d9 	bl	80016dc <MPU_Write_Byte>

	// Gyroscope sensor  陀螺仪传感器,±500dps=±500°/s ±32768 (gyro/32768*500)*PI/180(rad/s)=gyro/3754.9(rad/s)
	MPU_Set_Gyro_Fsr(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 f85a 	bl	80013e4 <MPU_Set_Gyro_Fsr>
	// Acceleration sensor 加速度传感器,±2g=±2*9.8m/s^2 ±32768 accel/32768*19.6=accel/1671.84
	MPU_Set_Accel_Fsr(0);
 8001330:	2000      	movs	r0, #0
 8001332:	f000 f869 	bl	8001408 <MPU_Set_Accel_Fsr>
	// Set the sampling rate to 50Hz //设置采样率50Hz
	MPU_Set_Rate(50);
 8001336:	2032      	movs	r0, #50	; 0x32
 8001338:	f000 f8aa 	bl	8001490 <MPU_Set_Rate>

	// Turn off all interrupts //关闭所有中断
	MPU_Write_Byte(MPU9250_ADDR, MPU_INT_EN_REG, 0X00);
 800133c:	2200      	movs	r2, #0
 800133e:	2138      	movs	r1, #56	; 0x38
 8001340:	2068      	movs	r0, #104	; 0x68
 8001342:	f000 f9cb 	bl	80016dc <MPU_Write_Byte>
	// The I2C main mode is off //I2C主模式关闭
	MPU_Write_Byte(MPU9250_ADDR, MPU_USER_CTRL_REG, 0X00);
 8001346:	2200      	movs	r2, #0
 8001348:	216a      	movs	r1, #106	; 0x6a
 800134a:	2068      	movs	r0, #104	; 0x68
 800134c:	f000 f9c6 	bl	80016dc <MPU_Write_Byte>
	// Close the FIFO //关闭FIFO
	MPU_Write_Byte(MPU9250_ADDR, MPU_FIFO_EN_REG, 0X00);
 8001350:	2200      	movs	r2, #0
 8001352:	2123      	movs	r1, #35	; 0x23
 8001354:	2068      	movs	r0, #104	; 0x68
 8001356:	f000 f9c1 	bl	80016dc <MPU_Write_Byte>
	// The INT pin is low, enabling bypass mode to read the magnetometer directly
	// INT引脚低电平有效，开启bypass模式，可以直接读取磁力计
	MPU_Write_Byte(MPU9250_ADDR, MPU_INTBP_CFG_REG, 0X82);
 800135a:	2282      	movs	r2, #130	; 0x82
 800135c:	2137      	movs	r1, #55	; 0x37
 800135e:	2068      	movs	r0, #104	; 0x68
 8001360:	f000 f9bc 	bl	80016dc <MPU_Write_Byte>
	// Read the ID of MPU9250  读取MPU9250的ID
	res = MPU_Read_Byte(MPU9250_ADDR, MPU_DEVICE_ID_REG);
 8001364:	2175      	movs	r1, #117	; 0x75
 8001366:	2068      	movs	r0, #104	; 0x68
 8001368:	f000 f9ec 	bl	8001744 <MPU_Read_Byte>
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
	printf("MPU6500 Read ID=0x%02X\n", res);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4619      	mov	r1, r3
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <MPU9250_Init+0xe4>)
 8001376:	f004 f98f 	bl	8005698 <iprintf>
	// Check whether the device ID is correct 判断器件ID是否正确
	if (res == MPU6500_ID1 || res == MPU6500_ID2)
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b71      	cmp	r3, #113	; 0x71
 800137e:	d002      	beq.n	8001386 <MPU9250_Init+0x8e>
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b73      	cmp	r3, #115	; 0x73
 8001384:	d11b      	bne.n	80013be <MPU9250_Init+0xc6>
	{
		// Set CLKSEL,PLL X axis as reference //设置CLKSEL,PLL X轴为参考
		MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT1_REG, 0X01);
 8001386:	2201      	movs	r2, #1
 8001388:	216b      	movs	r1, #107	; 0x6b
 800138a:	2068      	movs	r0, #104	; 0x68
 800138c:	f000 f9a6 	bl	80016dc <MPU_Write_Byte>
		// Acceleration and gyroscope both work //加速度与陀螺仪都工作
		MPU_Write_Byte(MPU9250_ADDR, MPU_PWR_MGMT2_REG, 0X00);
 8001390:	2200      	movs	r2, #0
 8001392:	216c      	movs	r1, #108	; 0x6c
 8001394:	2068      	movs	r0, #104	; 0x68
 8001396:	f000 f9a1 	bl	80016dc <MPU_Write_Byte>
		// Set the sampling rate to 50Hz //设置采样率为50Hz
		MPU_Set_Rate(50);
 800139a:	2032      	movs	r0, #50	; 0x32
 800139c:	f000 f878 	bl	8001490 <MPU_Set_Rate>
	}
	else
		return 1;
	//Read AK8963ID 读取AK8963ID
	res = MPU_Read_Byte(AK8963_ADDR, MAG_WIA);
 80013a0:	2100      	movs	r1, #0
 80013a2:	200c      	movs	r0, #12
 80013a4:	f000 f9ce 	bl	8001744 <MPU_Read_Byte>
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
	printf("AK8963 Read ID=0x%02X\n", res);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <MPU9250_Init+0xe8>)
 80013b2:	f004 f971 	bl	8005698 <iprintf>
	if (res == AK8963_ID)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b48      	cmp	r3, #72	; 0x48
 80013ba:	d002      	beq.n	80013c2 <MPU9250_Init+0xca>
 80013bc:	e008      	b.n	80013d0 <MPU9250_Init+0xd8>
		return 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	e007      	b.n	80013d2 <MPU9250_Init+0xda>
	{
		//Set AK8963 to single measurement mode 设置AK8963为单次测量模式
		MPU_Write_Byte(AK8963_ADDR, MAG_CNTL1, 0X11);
 80013c2:	2211      	movs	r2, #17
 80013c4:	210a      	movs	r1, #10
 80013c6:	200c      	movs	r0, #12
 80013c8:	f000 f988 	bl	80016dc <MPU_Write_Byte>
	}
	else
		return 2;
	return 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e000      	b.n	80013d2 <MPU9250_Init+0xda>
		return 2;
 80013d0:	2302      	movs	r3, #2
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800674c 	.word	0x0800674c
 80013e0:	08006764 	.word	0x08006764

080013e4 <MPU_Set_Gyro_Fsr>:
//设置MPU9250陀螺仪传感器满量程范围:fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功, 其他,设置失败
// Set the full range of the MPU9250 gyroscope sensor:fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
// return value :0, the setting succeeds, other, the setting fails
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU9250_ADDR, MPU_GYRO_CFG_REG, fsr << 3); //设置陀螺仪满量程范围
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	211b      	movs	r1, #27
 80013f8:	2068      	movs	r0, #104	; 0x68
 80013fa:	f000 f96f 	bl	80016dc <MPU_Write_Byte>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <MPU_Set_Accel_Fsr>:
// 设置MPU9250加速度传感器满量程范围：fsr:0,±2g;1,±4g;2,±8g;3,±16g
// 返回值:0,设置成功， 其他,设置失败
// Set the full range of the MPU9250 acceleration sensor: FSR :0,±2G; 1,±4g; 2,±8g; 3,±16g
// return value :0, the setting succeeds, other, the setting fails
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU9250_ADDR, MPU_ACCEL_CFG_REG, fsr << 3);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	211c      	movs	r1, #28
 800141c:	2068      	movs	r0, #104	; 0x68
 800141e:	f000 f95d 	bl	80016dc <MPU_Write_Byte>
 8001422:	4603      	mov	r3, r0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <MPU_Set_LPF>:

// 设置MPU9250的数字低通滤波器，返回值:0,设置成功， 其他,设置失败
// Set the digital low-pass filter of the MPU9250. The return value is 0. The setting succeeds

uint8_t MPU_Set_LPF(uint16_t lpf)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
	uint8_t data = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	2bbb      	cmp	r3, #187	; 0xbb
 800143e:	d902      	bls.n	8001446 <MPU_Set_LPF+0x1a>
		data = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e019      	b.n	800147a <MPU_Set_LPF+0x4e>
	else if (lpf >= 98)
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	2b61      	cmp	r3, #97	; 0x61
 800144a:	d902      	bls.n	8001452 <MPU_Set_LPF+0x26>
		data = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e013      	b.n	800147a <MPU_Set_LPF+0x4e>
	else if (lpf >= 42)
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2b29      	cmp	r3, #41	; 0x29
 8001456:	d902      	bls.n	800145e <MPU_Set_LPF+0x32>
		data = 3;
 8001458:	2303      	movs	r3, #3
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e00d      	b.n	800147a <MPU_Set_LPF+0x4e>
	else if (lpf >= 20)
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	2b13      	cmp	r3, #19
 8001462:	d902      	bls.n	800146a <MPU_Set_LPF+0x3e>
		data = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e007      	b.n	800147a <MPU_Set_LPF+0x4e>
	else if (lpf >= 10)
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d902      	bls.n	8001476 <MPU_Set_LPF+0x4a>
		data = 5;
 8001470:	2305      	movs	r3, #5
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e001      	b.n	800147a <MPU_Set_LPF+0x4e>
	else
		data = 6;
 8001476:	2306      	movs	r3, #6
 8001478:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU9250_ADDR, MPU_CFG_REG, data); //设置数字低通滤波器
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	461a      	mov	r2, r3
 800147e:	211a      	movs	r1, #26
 8001480:	2068      	movs	r0, #104	; 0x68
 8001482:	f000 f92b 	bl	80016dc <MPU_Write_Byte>
 8001486:	4603      	mov	r3, r0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <MPU_Set_Rate>:

// 设置MPU9250的采样率(假定Fs=1KHz)， rate:4~1000(Hz)，返回值:0,设置成功 ， 其他,设置失败
// Set the sampling rate of MPU9250 (assuming Fs=1KHz), rate:4~1000(Hz),
// return value :0, the setting succeeds, other, the setting fails
uint8_t MPU_Set_Rate(uint16_t rate)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if (rate > 1000)
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a0:	d902      	bls.n	80014a8 <MPU_Set_Rate+0x18>
		rate = 1000;
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d801      	bhi.n	80014b2 <MPU_Set_Rate+0x22>
		rate = 4;
 80014ae:	2304      	movs	r3, #4
 80014b0:	80fb      	strh	r3, [r7, #6]
	data = 1000 / rate - 1;
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU9250_ADDR, MPU_SAMPLE_RATE_REG, data);
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	461a      	mov	r2, r3
 80014c6:	2119      	movs	r1, #25
 80014c8:	2068      	movs	r0, #104	; 0x68
 80014ca:	f000 f907 	bl	80016dc <MPU_Write_Byte>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
	return MPU_Set_LPF(rate / 2);
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ffa7 	bl	800142c <MPU_Set_LPF>
 80014de:	4603      	mov	r3, r0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <MPU_Get_Gyroscope>:

// 读取陀螺仪值(原始值), 返回值:0,成功, 其他,错误代码
// Read gyroscope value (original value), return value :0, success, other, error code
uint8_t MPU_Get_Gyroscope(int16_t *gx, int16_t *gy, int16_t *gz)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU9250_ADDR, MPU_GYRO_XOUTH_REG, 6, buf);
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2206      	movs	r2, #6
 80014fa:	2143      	movs	r1, #67	; 0x43
 80014fc:	2068      	movs	r0, #104	; 0x68
 80014fe:	f000 f89b 	bl	8001638 <MPU_Read_Len>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
	if (res == 0)
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11a      	bne.n	8001542 <MPU_Get_Gyroscope+0x5a>
	{
		*gx = ((uint16_t)buf[0] << 8) | buf[1];
 800150c:	7c3b      	ldrb	r3, [r7, #16]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7c7b      	ldrb	r3, [r7, #17]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21a      	sxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	801a      	strh	r2, [r3, #0]
		*gy = ((uint16_t)buf[2] << 8) | buf[3];
 800151e:	7cbb      	ldrb	r3, [r7, #18]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	7cfb      	ldrb	r3, [r7, #19]
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21a      	sxth	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	801a      	strh	r2, [r3, #0]
		*gz = ((uint16_t)buf[4] << 8) | buf[5];
 8001530:	7d3b      	ldrb	r3, [r7, #20]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7d7b      	ldrb	r3, [r7, #21]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	801a      	strh	r2, [r3, #0]
	}
	return res;
 8001542:	7dfb      	ldrb	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <MPU_Get_Accelerometer>:

// 读取加速度值(原始值), 返回值:0,成功, 其他,错误代码
// Read acceleration value (original value), return value :0, success, other, error code
uint8_t MPU_Get_Accelerometer(int16_t *ax, int16_t *ay, int16_t *az)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(MPU9250_ADDR, MPU_ACCEL_XOUTH_REG, 6, buf);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2206      	movs	r2, #6
 800155e:	213b      	movs	r1, #59	; 0x3b
 8001560:	2068      	movs	r0, #104	; 0x68
 8001562:	f000 f869 	bl	8001638 <MPU_Read_Len>
 8001566:	4603      	mov	r3, r0
 8001568:	75fb      	strb	r3, [r7, #23]
	if (res == 0)
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d11a      	bne.n	80015a6 <MPU_Get_Accelerometer+0x5a>
	{
		*ax = ((uint16_t)buf[0] << 8) | buf[1];
 8001570:	7c3b      	ldrb	r3, [r7, #16]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7c7b      	ldrb	r3, [r7, #17]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21a      	sxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	801a      	strh	r2, [r3, #0]
		*ay = ((uint16_t)buf[2] << 8) | buf[3];
 8001582:	7cbb      	ldrb	r3, [r7, #18]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7cfb      	ldrb	r3, [r7, #19]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21a      	sxth	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	801a      	strh	r2, [r3, #0]
		*az = ((uint16_t)buf[4] << 8) | buf[5];
 8001594:	7d3b      	ldrb	r3, [r7, #20]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7d7b      	ldrb	r3, [r7, #21]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	801a      	strh	r2, [r3, #0]
	}
	return res;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <MPU_Get_Magnetometer>:

// 读取磁力计值(原始值)，返回值:0,成功，其他,错误代码
// Read magnetometer value (original value), return value :0, success, other, error code
uint8_t MPU_Get_Magnetometer(int16_t *mx, int16_t *my, int16_t *mz)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	uint8_t buf[6], res;
	res = MPU_Read_Len(AK8963_ADDR, MAG_XOUT_L, 6, buf);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2206      	movs	r2, #6
 80015c2:	2103      	movs	r1, #3
 80015c4:	200c      	movs	r0, #12
 80015c6:	f000 f837 	bl	8001638 <MPU_Read_Len>
 80015ca:	4603      	mov	r3, r0
 80015cc:	75fb      	strb	r3, [r7, #23]
	if (res == 0)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11a      	bne.n	800160a <MPU_Get_Magnetometer+0x5a>
	{
		*mx = ((uint16_t)buf[1] << 8) | buf[0];
 80015d4:	7c7b      	ldrb	r3, [r7, #17]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	7c3b      	ldrb	r3, [r7, #16]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	801a      	strh	r2, [r3, #0]
		*my = ((uint16_t)buf[3] << 8) | buf[2];
 80015e6:	7cfb      	ldrb	r3, [r7, #19]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7cbb      	ldrb	r3, [r7, #18]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	801a      	strh	r2, [r3, #0]
		*mz = ((uint16_t)buf[5] << 8) | buf[4];
 80015f8:	7d7b      	ldrb	r3, [r7, #21]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	7d3b      	ldrb	r3, [r7, #20]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b21a      	sxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	801a      	strh	r2, [r3, #0]
	}
	// AK8963每次读完以后都需要重新设置为单次测量模式
	// AK8963 needs to be reset to single measurement mode after each reading
	MPU_Write_Byte(AK8963_ADDR, MAG_CNTL1, 0X11);
 800160a:	2211      	movs	r2, #17
 800160c:	210a      	movs	r1, #10
 800160e:	200c      	movs	r0, #12
 8001610:	f000 f864 	bl	80016dc <MPU_Write_Byte>
	return res;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <MPU_Delay_ms>:
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////
// Millisecond delay function  毫秒级延时函数
void MPU_Delay_ms(uint16_t time)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4618      	mov	r0, r3
 800162c:	f001 f972 	bl	8002914 <HAL_Delay>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <MPU_Read_Len>:
}

// IIC连续读, 数据保存到buf中。返回值:0,正常, 其他,错误代码
// IIC reads continuously and saves data to BUF.  Return value :0, normal, otherwise, error code
uint8_t MPU_Read_Len(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	4603      	mov	r3, r0
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	460b      	mov	r3, r1
 8001646:	71bb      	strb	r3, [r7, #6]
 8001648:	4613      	mov	r3, r2
 800164a:	717b      	strb	r3, [r7, #5]
	MPU_IIC_Start();
 800164c:	f000 f94e 	bl	80018ec <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 0);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fa4c 	bl	8001af4 <MPU_IIC_Send_Byte>
	if (MPU_IIC_Wait_Ack())
 800165c:	f000 f9a6 	bl	80019ac <MPU_IIC_Wait_Ack>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <MPU_Read_Len+0x36>
	{
		MPU_IIC_Stop();
 8001666:	f000 f971 	bl	800194c <MPU_IIC_Stop>
		return 1;
 800166a:	2301      	movs	r3, #1
 800166c:	e032      	b.n	80016d4 <MPU_Read_Len+0x9c>
	}
	MPU_IIC_Send_Byte(reg);
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fa3f 	bl	8001af4 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8001676:	f000 f999 	bl	80019ac <MPU_IIC_Wait_Ack>
	MPU_IIC_Start();
 800167a:	f000 f937 	bl	80018ec <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 1);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	b25b      	sxtb	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fa31 	bl	8001af4 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8001692:	f000 f98b 	bl	80019ac <MPU_IIC_Wait_Ack>
	while (len)
 8001696:	e017      	b.n	80016c8 <MPU_Read_Len+0x90>
	{
		if (len == 1)
 8001698:	797b      	ldrb	r3, [r7, #5]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <MPU_Read_Len+0x76>
			*buf = MPU_IIC_Read_Byte(0);
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 fa70 	bl	8001b84 <MPU_IIC_Read_Byte>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e006      	b.n	80016bc <MPU_Read_Len+0x84>
		else
			*buf = MPU_IIC_Read_Byte(1);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 fa68 	bl	8001b84 <MPU_IIC_Read_Byte>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	701a      	strb	r2, [r3, #0]
		len--;
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	3b01      	subs	r3, #1
 80016c0:	717b      	strb	r3, [r7, #5]
		buf++;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	603b      	str	r3, [r7, #0]
	while (len)
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1e4      	bne.n	8001698 <MPU_Read_Len+0x60>
	}
	MPU_IIC_Stop();
 80016ce:	f000 f93d 	bl	800194c <MPU_IIC_Stop>
	return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <MPU_Write_Byte>:

// IIC写一个字节, 返回值:0,正常, 其他,错误代码
// IIC writes a byte, return value :0, normal, otherwise, error code
uint8_t MPU_Write_Byte(uint8_t addr, uint8_t reg, uint8_t data)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	460b      	mov	r3, r1
 80016e8:	71bb      	strb	r3, [r7, #6]
 80016ea:	4613      	mov	r3, r2
 80016ec:	717b      	strb	r3, [r7, #5]
	MPU_IIC_Start();
 80016ee:	f000 f8fd 	bl	80018ec <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 0);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f9fb 	bl	8001af4 <MPU_IIC_Send_Byte>
	if (MPU_IIC_Wait_Ack())
 80016fe:	f000 f955 	bl	80019ac <MPU_IIC_Wait_Ack>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <MPU_Write_Byte+0x34>
	{
		MPU_IIC_Stop();
 8001708:	f000 f920 	bl	800194c <MPU_IIC_Stop>
		return 1;
 800170c:	2301      	movs	r3, #1
 800170e:	e015      	b.n	800173c <MPU_Write_Byte+0x60>
	}
	MPU_IIC_Send_Byte(reg);
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f9ee 	bl	8001af4 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8001718:	f000 f948 	bl	80019ac <MPU_IIC_Wait_Ack>
	MPU_IIC_Send_Byte(data);
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f9e8 	bl	8001af4 <MPU_IIC_Send_Byte>
	if (MPU_IIC_Wait_Ack())
 8001724:	f000 f942 	bl	80019ac <MPU_IIC_Wait_Ack>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <MPU_Write_Byte+0x5a>
	{
		MPU_IIC_Stop();
 800172e:	f000 f90d 	bl	800194c <MPU_IIC_Stop>
		return 1;
 8001732:	2301      	movs	r3, #1
 8001734:	e002      	b.n	800173c <MPU_Write_Byte+0x60>
	}
	MPU_IIC_Stop();
 8001736:	f000 f909 	bl	800194c <MPU_IIC_Stop>
	return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MPU_Read_Byte>:

// IIC读一个字节, 返回读到的数据
// IIC reads one byte and returns the read data
uint8_t MPU_Read_Byte(uint8_t addr, uint8_t reg)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
	uint8_t res;
	MPU_IIC_Start();
 8001754:	f000 f8ca 	bl	80018ec <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 0);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f9c8 	bl	8001af4 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8001764:	f000 f922 	bl	80019ac <MPU_IIC_Wait_Ack>
	MPU_IIC_Send_Byte(reg);
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f9c2 	bl	8001af4 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 8001770:	f000 f91c 	bl	80019ac <MPU_IIC_Wait_Ack>
	MPU_IIC_Start();
 8001774:	f000 f8ba 	bl	80018ec <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr << 1) | 1);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	b25b      	sxtb	r3, r3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	b25b      	sxtb	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f9b4 	bl	8001af4 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();
 800178c:	f000 f90e 	bl	80019ac <MPU_IIC_Wait_Ack>
	res = MPU_IIC_Read_Byte(0);
 8001790:	2000      	movs	r0, #0
 8001792:	f000 f9f7 	bl	8001b84 <MPU_IIC_Read_Byte>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
	MPU_IIC_Stop();
 800179a:	f000 f8d7 	bl	800194c <MPU_IIC_Stop>
	return res;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <MPU_Get_Deviation_gyro>:
		printf("gyro:%d, %d, %d\n", gyrox, gyroy, gyroz);
		printf("mag:%d, %d, %d\n", magx, magy, magz);
	}
}
void MPU_Get_Deviation_gyro(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	MPU_Get_Gyroscope(&Deviation_gyrox, &Deviation_gyroy, &Deviation_gyroz);
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <MPU_Get_Deviation_gyro+0x14>)
 80017ae:	4904      	ldr	r1, [pc, #16]	; (80017c0 <MPU_Get_Deviation_gyro+0x18>)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MPU_Get_Deviation_gyro+0x1c>)
 80017b2:	f7ff fe99 	bl	80014e8 <MPU_Get_Gyroscope>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000110 	.word	0x20000110
 80017c0:	2000010e 	.word	0x2000010e
 80017c4:	2000010c 	.word	0x2000010c

080017c8 <MPU9250_Data_Send>:
void MPU9250_Data_Send(void)
{
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af06      	add	r7, sp, #24
	MPU_Get_Accelerometer(&aacx, &aacy, &aacz);
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <MPU9250_Data_Send+0xac>)
 80017d0:	4929      	ldr	r1, [pc, #164]	; (8001878 <MPU9250_Data_Send+0xb0>)
 80017d2:	482a      	ldr	r0, [pc, #168]	; (800187c <MPU9250_Data_Send+0xb4>)
 80017d4:	f7ff feba 	bl	800154c <MPU_Get_Accelerometer>
	MPU_Get_Gyroscope(&gyrox, &gyroy, &gyroz);
 80017d8:	4a29      	ldr	r2, [pc, #164]	; (8001880 <MPU9250_Data_Send+0xb8>)
 80017da:	492a      	ldr	r1, [pc, #168]	; (8001884 <MPU9250_Data_Send+0xbc>)
 80017dc:	482a      	ldr	r0, [pc, #168]	; (8001888 <MPU9250_Data_Send+0xc0>)
 80017de:	f7ff fe83 	bl	80014e8 <MPU_Get_Gyroscope>
	MPU_Get_Magnetometer(&magx, &magy, &magz);
 80017e2:	4a2a      	ldr	r2, [pc, #168]	; (800188c <MPU9250_Data_Send+0xc4>)
 80017e4:	492a      	ldr	r1, [pc, #168]	; (8001890 <MPU9250_Data_Send+0xc8>)
 80017e6:	482b      	ldr	r0, [pc, #172]	; (8001894 <MPU9250_Data_Send+0xcc>)
 80017e8:	f7ff fee2 	bl	80015b0 <MPU_Get_Magnetometer>
	usartSendMeterData(aacx,aacy,aacz,gyrox-Deviation_gyrox,gyroy-Deviation_gyroy,gyroz-Deviation_gyroz,magx, magy, magz);
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <MPU9250_Data_Send+0xb4>)
 80017ee:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MPU9250_Data_Send+0xb0>)
 80017f4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80017f8:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <MPU9250_Data_Send+0xac>)
 80017fa:	f9b3 c000 	ldrsh.w	ip, [r3]
 80017fe:	4b22      	ldr	r3, [pc, #136]	; (8001888 <MPU9250_Data_Send+0xc0>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <MPU9250_Data_Send+0xd0>)
 8001808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180c:	b29b      	uxth	r3, r3
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b29b      	uxth	r3, r3
 8001812:	fa0f fe83 	sxth.w	lr, r3
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MPU9250_Data_Send+0xbc>)
 8001818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MPU9250_Data_Send+0xd4>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	b29b      	uxth	r3, r3
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	b21b      	sxth	r3, r3
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <MPU9250_Data_Send+0xb8>)
 800182e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001832:	b291      	uxth	r1, r2
 8001834:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <MPU9250_Data_Send+0xd8>)
 8001836:	f9b2 2000 	ldrsh.w	r2, [r2]
 800183a:	b292      	uxth	r2, r2
 800183c:	1a8a      	subs	r2, r1, r2
 800183e:	b292      	uxth	r2, r2
 8001840:	b212      	sxth	r2, r2
 8001842:	4914      	ldr	r1, [pc, #80]	; (8001894 <MPU9250_Data_Send+0xcc>)
 8001844:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001848:	4811      	ldr	r0, [pc, #68]	; (8001890 <MPU9250_Data_Send+0xc8>)
 800184a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800184e:	4c0f      	ldr	r4, [pc, #60]	; (800188c <MPU9250_Data_Send+0xc4>)
 8001850:	f9b4 4000 	ldrsh.w	r4, [r4]
 8001854:	9404      	str	r4, [sp, #16]
 8001856:	9003      	str	r0, [sp, #12]
 8001858:	9102      	str	r1, [sp, #8]
 800185a:	9201      	str	r2, [sp, #4]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	4673      	mov	r3, lr
 8001860:	4662      	mov	r2, ip
 8001862:	4631      	mov	r1, r6
 8001864:	4628      	mov	r0, r5
 8001866:	f000 fb3d 	bl	8001ee4 <usartSendMeterData>
}
 800186a:	bf00      	nop
 800186c:	3704      	adds	r7, #4
 800186e:	46bd      	mov	sp, r7
 8001870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001872:	bf00      	nop
 8001874:	200000fe 	.word	0x200000fe
 8001878:	200000fc 	.word	0x200000fc
 800187c:	200000fa 	.word	0x200000fa
 8001880:	20000104 	.word	0x20000104
 8001884:	20000102 	.word	0x20000102
 8001888:	20000100 	.word	0x20000100
 800188c:	2000010a 	.word	0x2000010a
 8001890:	20000108 	.word	0x20000108
 8001894:	20000106 	.word	0x20000106
 8001898:	2000010c 	.word	0x2000010c
 800189c:	2000010e 	.word	0x2000010e
 80018a0:	20000110 	.word	0x20000110

080018a4 <Delay_For_Pin>:
#include "bsp_mpuiic.h"


// Microsecond delay  微秒级延迟
static void Delay_For_Pin(uint8_t nCount)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
    for(; nCount != 0; nCount--)
 80018b2:	e00b      	b.n	80018cc <Delay_For_Pin+0x28>
    {
        for (i = 0; i < 10; i++);
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e002      	b.n	80018c0 <Delay_For_Pin+0x1c>
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	3301      	adds	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	d9f9      	bls.n	80018ba <Delay_For_Pin+0x16>
    for(; nCount != 0; nCount--)
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <Delay_For_Pin+0x10>
    }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <MPU_IIC_Init>:

#define delay_us  Delay_For_Pin

// Initialize the IIC  初始化IIC
void MPU_IIC_Init(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
	delay_us(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff ffde 	bl	80018a4 <Delay_For_Pin>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <MPU_IIC_Start>:


// Generates the IIC initiation signal  产生IIC起始信号
void MPU_IIC_Start(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	MPU_SDA_OUT();
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MPU_IIC_Start+0x5c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <MPU_IIC_Start+0x5c>)
 80018f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80018fa:	6053      	str	r3, [r2, #4]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MPU_IIC_Start+0x5c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <MPU_IIC_Start+0x5c>)
 8001902:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001906:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(1);
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800190e:	480e      	ldr	r0, [pc, #56]	; (8001948 <MPU_IIC_Start+0x5c>)
 8001910:	f002 fd0d 	bl	800432e <HAL_GPIO_WritePin>
	MPU_IIC_SCL(1);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <MPU_IIC_Start+0x5c>)
 800191c:	f002 fd07 	bl	800432e <HAL_GPIO_WritePin>
	delay_us(4);
 8001920:	2004      	movs	r0, #4
 8001922:	f7ff ffbf 	bl	80018a4 <Delay_For_Pin>
 	MPU_IIC_SDA(0);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <MPU_IIC_Start+0x5c>)
 800192e:	f002 fcfe 	bl	800432e <HAL_GPIO_WritePin>
	delay_us(4);
 8001932:	2004      	movs	r0, #4
 8001934:	f7ff ffb6 	bl	80018a4 <Delay_For_Pin>
	MPU_IIC_SCL(0);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	4802      	ldr	r0, [pc, #8]	; (8001948 <MPU_IIC_Start+0x5c>)
 8001940:	f002 fcf5 	bl	800432e <HAL_GPIO_WritePin>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40010c00 	.word	0x40010c00

0800194c <MPU_IIC_Stop>:

// Generates an IIC stop signal  产生IIC停止信号
void MPU_IIC_Stop(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	MPU_SDA_OUT();
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 8001956:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800195a:	6053      	str	r3, [r2, #4]
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 8001962:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001966:	6053      	str	r3, [r2, #4]
	MPU_IIC_SCL(0);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196e:	480e      	ldr	r0, [pc, #56]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 8001970:	f002 fcdd 	bl	800432e <HAL_GPIO_WritePin>
	MPU_IIC_SDA(0);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197a:	480b      	ldr	r0, [pc, #44]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 800197c:	f002 fcd7 	bl	800432e <HAL_GPIO_WritePin>
 	delay_us(4);
 8001980:	2004      	movs	r0, #4
 8001982:	f7ff ff8f 	bl	80018a4 <Delay_For_Pin>
	MPU_IIC_SCL(1);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 800198e:	f002 fcce 	bl	800432e <HAL_GPIO_WritePin>
	MPU_IIC_SDA(1);
 8001992:	2201      	movs	r2, #1
 8001994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MPU_IIC_Stop+0x5c>)
 800199a:	f002 fcc8 	bl	800432e <HAL_GPIO_WritePin>
	delay_us(4);
 800199e:	2004      	movs	r0, #4
 80019a0:	f7ff ff80 	bl	80018a4 <Delay_For_Pin>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40010c00 	.word	0x40010c00

080019ac <MPU_IIC_Wait_Ack>:
// 等待应答信号到来
// 返回值：1，接收应答失败. 0，接收应答成功
// Wait for the answer signal to arrive.
// Return value: 1, receive and reply failed 0, receive and reply succeeded
uint8_t MPU_IIC_Wait_Ack(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
	MPU_SDA_IN();
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 80019bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80019c0:	6053      	str	r3, [r2, #4]
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 80019c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019cc:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(1);delay_us(1);
 80019ce:	2201      	movs	r2, #1
 80019d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d4:	4816      	ldr	r0, [pc, #88]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 80019d6:	f002 fcaa 	bl	800432e <HAL_GPIO_WritePin>
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff ff62 	bl	80018a4 <Delay_For_Pin>
	MPU_IIC_SCL(1);delay_us(1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e6:	4812      	ldr	r0, [pc, #72]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 80019e8:	f002 fca1 	bl	800432e <HAL_GPIO_WritePin>
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ff59 	bl	80018a4 <Delay_For_Pin>
	while(READ_SDA)
 80019f2:	e009      	b.n	8001a08 <MPU_IIC_Wait_Ack+0x5c>
	{
		ucErrTime++;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	3301      	adds	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2bfa      	cmp	r3, #250	; 0xfa
 80019fe:	d903      	bls.n	8001a08 <MPU_IIC_Wait_Ack+0x5c>
		{
			MPU_IIC_Stop();
 8001a00:	f7ff ffa4 	bl	800194c <MPU_IIC_Stop>
			return 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e00e      	b.n	8001a26 <MPU_IIC_Wait_Ack+0x7a>
	while(READ_SDA)
 8001a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0c:	4808      	ldr	r0, [pc, #32]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 8001a0e:	f002 fc77 	bl	8004300 <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ed      	bne.n	80019f4 <MPU_IIC_Wait_Ack+0x48>
		}
	}
	MPU_IIC_SCL(0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MPU_IIC_Wait_Ack+0x84>)
 8001a20:	f002 fc85 	bl	800432e <HAL_GPIO_WritePin>
	return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40010c00 	.word	0x40010c00

08001a34 <MPU_IIC_Ack>:

// Generate AN ACK reply  产生ACK应答
void MPU_IIC_Ack(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	MPU_IIC_SCL(0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3e:	4814      	ldr	r0, [pc, #80]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a40:	f002 fc75 	bl	800432e <HAL_GPIO_WritePin>
	MPU_SDA_OUT();
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a4e:	6053      	str	r3, [r2, #4]
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a56:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001a5a:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a62:	480b      	ldr	r0, [pc, #44]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a64:	f002 fc63 	bl	800432e <HAL_GPIO_WritePin>
	delay_us(2);
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f7ff ff1b 	bl	80018a4 <Delay_For_Pin>
	MPU_IIC_SCL(1);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a74:	4806      	ldr	r0, [pc, #24]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a76:	f002 fc5a 	bl	800432e <HAL_GPIO_WritePin>
	delay_us(2);
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	f7ff ff12 	bl	80018a4 <Delay_For_Pin>
	MPU_IIC_SCL(0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	4802      	ldr	r0, [pc, #8]	; (8001a90 <MPU_IIC_Ack+0x5c>)
 8001a88:	f002 fc51 	bl	800432e <HAL_GPIO_WritePin>
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010c00 	.word	0x40010c00

08001a94 <MPU_IIC_NAck>:
// No ACK response is generated  不产生ACK应答
void MPU_IIC_NAck(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	MPU_IIC_SCL(0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001aa0:	f002 fc45 	bl	800432e <HAL_GPIO_WritePin>
	MPU_SDA_OUT();
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001aaa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001aae:	6053      	str	r3, [r2, #4]
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001ab6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001aba:	6053      	str	r3, [r2, #4]
	MPU_IIC_SDA(1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac2:	480b      	ldr	r0, [pc, #44]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001ac4:	f002 fc33 	bl	800432e <HAL_GPIO_WritePin>
	delay_us(2);
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f7ff feeb 	bl	80018a4 <Delay_For_Pin>
	MPU_IIC_SCL(1);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad4:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001ad6:	f002 fc2a 	bl	800432e <HAL_GPIO_WritePin>
	delay_us(2);
 8001ada:	2002      	movs	r0, #2
 8001adc:	f7ff fee2 	bl	80018a4 <Delay_For_Pin>
	MPU_IIC_SCL(0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae6:	4802      	ldr	r0, [pc, #8]	; (8001af0 <MPU_IIC_NAck+0x5c>)
 8001ae8:	f002 fc21 	bl	800432e <HAL_GPIO_WritePin>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010c00 	.word	0x40010c00

08001af4 <MPU_IIC_Send_Byte>:

// IIC发送一个字节，返回从机有无应答，1，有应答，0，无应答
// The IIC sends a byte that returns whether the slave machine answered, 1, yes, 0, no
void MPU_IIC_Send_Byte(uint8_t txd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
    uint8_t t;
	MPU_SDA_OUT();
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b08:	6053      	str	r3, [r2, #4]
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b10:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001b14:	6053      	str	r3, [r2, #4]
    MPU_IIC_SCL(0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1c:	4818      	ldr	r0, [pc, #96]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b1e:	f002 fc06 	bl	800432e <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	e023      	b.n	8001b70 <MPU_IIC_Send_Byte+0x7c>
    {
        MPU_IIC_SDA((txd&0x80)>>7);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	09db      	lsrs	r3, r3, #7
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b34:	4812      	ldr	r0, [pc, #72]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b36:	f002 fbfa 	bl	800432e <HAL_GPIO_WritePin>
        txd<<=1;
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	71fb      	strb	r3, [r7, #7]
		delay_us(2);
 8001b40:	2002      	movs	r0, #2
 8001b42:	f7ff feaf 	bl	80018a4 <Delay_For_Pin>
		MPU_IIC_SCL(1);
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b4e:	f002 fbee 	bl	800432e <HAL_GPIO_WritePin>
		delay_us(2);
 8001b52:	2002      	movs	r0, #2
 8001b54:	f7ff fea6 	bl	80018a4 <Delay_For_Pin>
		MPU_IIC_SCL(0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <MPU_IIC_Send_Byte+0x8c>)
 8001b60:	f002 fbe5 	bl	800432e <HAL_GPIO_WritePin>
		delay_us(2);
 8001b64:	2002      	movs	r0, #2
 8001b66:	f7ff fe9d 	bl	80018a4 <Delay_For_Pin>
    for(t=0;t<8;t++)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b07      	cmp	r3, #7
 8001b74:	d9d8      	bls.n	8001b28 <MPU_IIC_Send_Byte+0x34>
    }
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40010c00 	.word	0x40010c00

08001b84 <MPU_IIC_Read_Byte>:
// 读1个字节，ack=1时，发送ACK，ack=0，发送nACK
// Read 1 byte, ack=1, send ACK, ack=0, send nACK
uint8_t MPU_IIC_Read_Byte(unsigned char ack)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73bb      	strb	r3, [r7, #14]
	MPU_SDA_IN();
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <MPU_IIC_Read_Byte+0x94>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <MPU_IIC_Read_Byte+0x94>)
 8001b98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b9c:	6053      	str	r3, [r2, #4]
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <MPU_IIC_Read_Byte+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <MPU_IIC_Read_Byte+0x94>)
 8001ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	6053      	str	r3, [r2, #4]
    for(i=0;i<8;i++ )
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e022      	b.n	8001bf6 <MPU_IIC_Read_Byte+0x72>
	{
        MPU_IIC_SCL(0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb6:	4818      	ldr	r0, [pc, #96]	; (8001c18 <MPU_IIC_Read_Byte+0x94>)
 8001bb8:	f002 fbb9 	bl	800432e <HAL_GPIO_WritePin>
        delay_us(2);
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f7ff fe71 	bl	80018a4 <Delay_For_Pin>
		MPU_IIC_SCL(1);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc8:	4813      	ldr	r0, [pc, #76]	; (8001c18 <MPU_IIC_Read_Byte+0x94>)
 8001bca:	f002 fbb0 	bl	800432e <HAL_GPIO_WritePin>
        receive<<=1;
 8001bce:	7bbb      	ldrb	r3, [r7, #14]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;
 8001bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd8:	480f      	ldr	r0, [pc, #60]	; (8001c18 <MPU_IIC_Read_Byte+0x94>)
 8001bda:	f002 fb91 	bl	8004300 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <MPU_IIC_Read_Byte+0x66>
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	3301      	adds	r3, #1
 8001be8:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff fe5a 	bl	80018a4 <Delay_For_Pin>
    for(i=0;i<8;i++ )
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	d9d9      	bls.n	8001bb0 <MPU_IIC_Read_Byte+0x2c>
    }
    if (!ack)
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <MPU_IIC_Read_Byte+0x84>
        MPU_IIC_NAck();
 8001c02:	f7ff ff47 	bl	8001a94 <MPU_IIC_NAck>
 8001c06:	e001      	b.n	8001c0c <MPU_IIC_Read_Byte+0x88>
    else
        MPU_IIC_Ack();
 8001c08:	f7ff ff14 	bl	8001a34 <MPU_IIC_Ack>
    return receive;
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40010c00 	.word	0x40010c00

08001c1c <USART1_Init>:
	short d;
	unsigned char data[2];
}VelNow;
// Initialize USART1  初始化串口1
void USART1_Init()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	4903      	ldr	r1, [pc, #12]	; (8001c30 <USART1_Init+0x14>)
 8001c24:	4803      	ldr	r0, [pc, #12]	; (8001c34 <USART1_Init+0x18>)
 8001c26:	f003 f8ac 	bl	8004d82 <HAL_UART_Receive_IT>
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000113 	.word	0x20000113
 8001c34:	20000198 	.word	0x20000198

08001c38 <USART1_Data_Init>:
void USART1_Data_Init(unsigned char* p1, short* p2)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	receVelPtr = p2;
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <USART1_Data_Init+0x20>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6013      	str	r3, [r2, #0]
	receModePtr = p1;
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <USART1_Data_Init+0x24>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000124 	.word	0x20000124
 8001c5c:	20000128 	.word	0x20000128

08001c60 <USART1_Data_Init1>:
void USART1_Data_Init1(short* p1, short* p2, short* p3)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	 VxPtr = p1;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <USART1_Data_Init1+0x28>)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6013      	str	r3, [r2, #0]
	 VyPtr = p2;
 8001c72:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <USART1_Data_Init1+0x2c>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	6013      	str	r3, [r2, #0]
	 VwPtr = p3;
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <USART1_Data_Init1+0x30>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	2000012c 	.word	0x2000012c
 8001c8c:	20000130 	.word	0x20000130
 8001c90:	20000134 	.word	0x20000134

08001c94 <USART1_Revice_Robot_Speed>:
    default:
        break;
    }
}
void USART1_Revice_Robot_Speed(uint8_t Rx_Temp)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    switch (Rx_Flag)
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <USART1_Revice_Robot_Speed+0xa4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d026      	beq.n	8001cf4 <USART1_Revice_Robot_Speed+0x60>
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	dc3b      	bgt.n	8001d22 <USART1_Revice_Robot_Speed+0x8e>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <USART1_Revice_Robot_Speed+0x20>
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d00b      	beq.n	8001cca <USART1_Revice_Robot_Speed+0x36>
            Rx_Flag = 0;
            New_Frame = 1;
        }
        break;
    default:
        break;
 8001cb2:	e036      	b.n	8001d22 <USART1_Revice_Robot_Speed+0x8e>
        if (Rx_Temp == header[0])
 8001cb4:	2255      	movs	r2, #85	; 0x55
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d134      	bne.n	8001d26 <USART1_Revice_Robot_Speed+0x92>
            Rx_Data[0] = header[0];
 8001cbc:	2255      	movs	r2, #85	; 0x55
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <USART1_Revice_Robot_Speed+0xa8>)
 8001cc0:	701a      	strb	r2, [r3, #0]
            Rx_Flag = 1;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <USART1_Revice_Robot_Speed+0xa4>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
        break;
 8001cc8:	e02d      	b.n	8001d26 <USART1_Revice_Robot_Speed+0x92>
        if (Rx_Temp == header[1])
 8001cca:	22aa      	movs	r2, #170	; 0xaa
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d109      	bne.n	8001ce6 <USART1_Revice_Robot_Speed+0x52>
            Rx_Data[1] = header[1];
 8001cd2:	22aa      	movs	r2, #170	; 0xaa
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <USART1_Revice_Robot_Speed+0xa8>)
 8001cd6:	705a      	strb	r2, [r3, #1]
            Rx_Flag = 2;
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <USART1_Revice_Robot_Speed+0xa4>)
 8001cda:	2202      	movs	r2, #2
 8001cdc:	701a      	strb	r2, [r3, #0]
            Rx_index = 2;
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <USART1_Revice_Robot_Speed+0xac>)
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	701a      	strb	r2, [r3, #0]
        break;
 8001ce4:	e022      	b.n	8001d2c <USART1_Revice_Robot_Speed+0x98>
            Rx_Flag = 0;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <USART1_Revice_Robot_Speed+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
            Rx_Data[0] = 0x0;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <USART1_Revice_Robot_Speed+0xa8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
        break;
 8001cf2:	e01b      	b.n	8001d2c <USART1_Revice_Robot_Speed+0x98>
        Rx_Data[Rx_index] = Rx_Temp;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <USART1_Revice_Robot_Speed+0xac>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <USART1_Revice_Robot_Speed+0xa8>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	5453      	strb	r3, [r2, r1]
        Rx_index++;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <USART1_Revice_Robot_Speed+0xac>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <USART1_Revice_Robot_Speed+0xac>)
 8001d0a:	701a      	strb	r2, [r3, #0]
        if (Rx_index >= RX_MAX_BUF)
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <USART1_Revice_Robot_Speed+0xac>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b0b      	cmp	r3, #11
 8001d12:	d90a      	bls.n	8001d2a <USART1_Revice_Robot_Speed+0x96>
            Rx_Flag = 0;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <USART1_Revice_Robot_Speed+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
            New_Frame = 1;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <USART1_Revice_Robot_Speed+0xb0>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
        break;
 8001d20:	e003      	b.n	8001d2a <USART1_Revice_Robot_Speed+0x96>
        break;
 8001d22:	bf00      	nop
 8001d24:	e002      	b.n	8001d2c <USART1_Revice_Robot_Speed+0x98>
        break;
 8001d26:	bf00      	nop
 8001d28:	e000      	b.n	8001d2c <USART1_Revice_Robot_Speed+0x98>
        break;
 8001d2a:	bf00      	nop
    }
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000121 	.word	0x20000121
 8001d3c:	20000114 	.word	0x20000114
 8001d40:	20000120 	.word	0x20000120
 8001d44:	20000112 	.word	0x20000112

08001d48 <USART1_Parse_Robot_Speed>:
{
	short d;
	unsigned char data[2];
}Vx, Vy , Vw;
uint8_t USART1_Parse_Robot_Speed(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
    uint8_t result = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
    int length = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
    if (New_Frame)
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <USART1_Parse_Robot_Speed+0xbc>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04c      	beq.n	8001df8 <USART1_Parse_Robot_Speed+0xb0>
    {
        result = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
        New_Frame = 0;
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <USART1_Parse_Robot_Speed+0xbc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
        length = Rx_Data[2];
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <USART1_Parse_Robot_Speed+0xc0>)
 8001d6a:	789b      	ldrb	r3, [r3, #2]
 8001d6c:	607b      	str	r3, [r7, #4]
        uint8_t checknum = getCrc8(Rx_Data, 3 + length);;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3303      	adds	r3, #3
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4619      	mov	r1, r3
 8001d78:	4823      	ldr	r0, [pc, #140]	; (8001e08 <USART1_Parse_Robot_Speed+0xc0>)
 8001d7a:	f000 f853 	bl	8001e24 <getCrc8>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	70fb      	strb	r3, [r7, #3]
        if (checknum == Rx_Data[9])
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <USART1_Parse_Robot_Speed+0xc0>)
 8001d84:	7a5b      	ldrb	r3, [r3, #9]
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d135      	bne.n	8001df8 <USART1_Parse_Robot_Speed+0xb0>
        {
        	for(int i = 0; i < 2; ++i)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	e01d      	b.n	8001dce <USART1_Parse_Robot_Speed+0x86>
        	{
        		Vx.data[i] = Rx_Data[3+i];
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3303      	adds	r3, #3
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <USART1_Parse_Robot_Speed+0xc0>)
 8001d98:	5cd1      	ldrb	r1, [r2, r3]
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <USART1_Parse_Robot_Speed+0xc4>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	460a      	mov	r2, r1
 8001da2:	701a      	strb	r2, [r3, #0]
        		Vy.data[i] = Rx_Data[5+i];
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3305      	adds	r3, #5
 8001da8:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <USART1_Parse_Robot_Speed+0xc0>)
 8001daa:	5cd1      	ldrb	r1, [r2, r3]
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <USART1_Parse_Robot_Speed+0xc8>)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	460a      	mov	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
        		Vw.data[i] = Rx_Data[7+i];
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3307      	adds	r3, #7
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <USART1_Parse_Robot_Speed+0xc0>)
 8001dbc:	5cd1      	ldrb	r1, [r2, r3]
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <USART1_Parse_Robot_Speed+0xcc>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
        	for(int i = 0; i < 2; ++i)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	ddde      	ble.n	8001d92 <USART1_Parse_Robot_Speed+0x4a>
        	}
        	*VxPtr = Vx.d;
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <USART1_Parse_Robot_Speed+0xd0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <USART1_Parse_Robot_Speed+0xc4>)
 8001dda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001dde:	801a      	strh	r2, [r3, #0]
        	*VyPtr = Vy.d;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <USART1_Parse_Robot_Speed+0xd4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <USART1_Parse_Robot_Speed+0xc8>)
 8001de6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001dea:	801a      	strh	r2, [r3, #0]
        	*VwPtr = Vw.d;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <USART1_Parse_Robot_Speed+0xd8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <USART1_Parse_Robot_Speed+0xcc>)
 8001df2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001df6:	801a      	strh	r2, [r3, #0]
        }
    }
    return result;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000112 	.word	0x20000112
 8001e08:	20000114 	.word	0x20000114
 8001e0c:	20000138 	.word	0x20000138
 8001e10:	2000013c 	.word	0x2000013c
 8001e14:	20000140 	.word	0x20000140
 8001e18:	2000012c 	.word	0x2000012c
 8001e1c:	20000130 	.word	0x20000130
 8001e20:	20000134 	.word	0x20000134

08001e24 <getCrc8>:

	USART_Send_String(buf,sizeof(buf));

}
unsigned char getCrc8(unsigned char *ptr, unsigned short len)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
	unsigned char crc;
		unsigned char i;
		crc = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
		while(len--)
 8001e34:	e01f      	b.n	8001e76 <getCrc8+0x52>
		{
			crc ^= *ptr++;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	4053      	eors	r3, r2
 8001e42:	73fb      	strb	r3, [r7, #15]
			for(i = 0; i < 8; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73bb      	strb	r3, [r7, #14]
 8001e48:	e012      	b.n	8001e70 <getCrc8+0x4c>
			{
				if(crc&0x01)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <getCrc8+0x40>
	                crc=(crc>>1)^0x8C;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e002      	b.n	8001e6a <getCrc8+0x46>
				else
	                crc >>= 1;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
			for(i = 0; i < 8; i++)
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	73bb      	strb	r3, [r7, #14]
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	2b07      	cmp	r3, #7
 8001e74:	d9e9      	bls.n	8001e4a <getCrc8+0x26>
		while(len--)
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	1e5a      	subs	r2, r3, #1
 8001e7a:	807a      	strh	r2, [r7, #2]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1da      	bne.n	8001e36 <getCrc8+0x12>
			}
		}
		return crc;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <USART_Send_String>:
void USART_Send_String(uint8_t *p,uint16_t sendSize)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
	static int length =0;
	while(length<sendSize)
 8001e98:	e012      	b.n	8001ec0 <USART_Send_String+0x34>
	{

		while( !(USART1->SR&(0x01<<7)) );
 8001e9a:	bf00      	nop
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <USART_Send_String+0x50>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f9      	beq.n	8001e9c <USART_Send_String+0x10>
		USART1->DR=*p;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <USART_Send_String+0x50>)
 8001eae:	605a      	str	r2, [r3, #4]
		p++;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
		length++;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <USART_Send_String+0x54>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <USART_Send_String+0x54>)
 8001ebe:	6013      	str	r3, [r2, #0]
	while(length<sendSize)
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <USART_Send_String+0x54>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dce7      	bgt.n	8001e9a <USART_Send_String+0xe>
	}
	length =0;
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <USART_Send_String+0x54>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	20000168 	.word	0x20000168

08001ee4 <usartSendMeterData>:
{
	int16_t d;
	unsigned char data[2];
}axData, ayData, azData,gxData, gyData, gzData,mxData, myData, mzData;
void usartSendMeterData(int16_t ax, int16_t ay, int16_t az,int16_t gx, int16_t gy, int16_t gz,int16_t mx, int16_t my, int16_t mz)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4604      	mov	r4, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	80fb      	strh	r3, [r7, #6]
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80bb      	strh	r3, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	807b      	strh	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	803b      	strh	r3, [r7, #0]
	unsigned char buf[24] = {0};
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	611a      	str	r2, [r3, #16]
	int i, length = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
	axData.d  = ax;
 8001f1a:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <usartSendMeterData+0x1c0>)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	8013      	strh	r3, [r2, #0]
	ayData.d  = ay;
 8001f20:	4a61      	ldr	r2, [pc, #388]	; (80020a8 <usartSendMeterData+0x1c4>)
 8001f22:	88bb      	ldrh	r3, [r7, #4]
 8001f24:	8013      	strh	r3, [r2, #0]
	azData.d  = az;
 8001f26:	4a61      	ldr	r2, [pc, #388]	; (80020ac <usartSendMeterData+0x1c8>)
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	8013      	strh	r3, [r2, #0]
	gxData.d  = gx;
 8001f2c:	4a60      	ldr	r2, [pc, #384]	; (80020b0 <usartSendMeterData+0x1cc>)
 8001f2e:	883b      	ldrh	r3, [r7, #0]
 8001f30:	8013      	strh	r3, [r2, #0]
	gyData.d  = gy;
 8001f32:	4a60      	ldr	r2, [pc, #384]	; (80020b4 <usartSendMeterData+0x1d0>)
 8001f34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001f36:	8013      	strh	r3, [r2, #0]
	gzData.d  = gz;
 8001f38:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <usartSendMeterData+0x1d4>)
 8001f3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f3c:	8013      	strh	r3, [r2, #0]
	mxData.d  = mx;
 8001f3e:	4a5f      	ldr	r2, [pc, #380]	; (80020bc <usartSendMeterData+0x1d8>)
 8001f40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f44:	8013      	strh	r3, [r2, #0]
	myData.d  = my;
 8001f46:	4a5e      	ldr	r2, [pc, #376]	; (80020c0 <usartSendMeterData+0x1dc>)
 8001f48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f4c:	8013      	strh	r3, [r2, #0]
	mzData.d  = mz;
 8001f4e:	4a5d      	ldr	r2, [pc, #372]	; (80020c4 <usartSendMeterData+0x1e0>)
 8001f50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f54:	8013      	strh	r3, [r2, #0]
	for(i = 0; i < 2; i++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e00c      	b.n	8001f76 <usartSendMeterData+0x92>
		buf[i] = header[i]; // buf[0] buf[1]
 8001f5c:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <usartSendMeterData+0x1e4>)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	4413      	add	r3, r2
 8001f62:	7819      	ldrb	r1, [r3, #0]
 8001f64:	f107 0208 	add.w	r2, r7, #8
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	4413      	add	r3, r2
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	3301      	adds	r3, #1
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	ddef      	ble.n	8001f5c <usartSendMeterData+0x78>
	length = 18;
 8001f7c:	2312      	movs	r3, #18
 8001f7e:	623b      	str	r3, [r7, #32]
	buf[2] = length;
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	72bb      	strb	r3, [r7, #10]
	for(i = 0; i < 2; ++i)
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	e05c      	b.n	8002046 <usartSendMeterData+0x162>
	{
		buf[3+i]  = axData.data[i];
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3303      	adds	r3, #3
 8001f90:	4944      	ldr	r1, [pc, #272]	; (80020a4 <usartSendMeterData+0x1c0>)
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	440a      	add	r2, r1
 8001f96:	7812      	ldrb	r2, [r2, #0]
 8001f98:	3328      	adds	r3, #40	; 0x28
 8001f9a:	443b      	add	r3, r7
 8001f9c:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[5+i]  = ayData.data[i];
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3305      	adds	r3, #5
 8001fa4:	4940      	ldr	r1, [pc, #256]	; (80020a8 <usartSendMeterData+0x1c4>)
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa8:	440a      	add	r2, r1
 8001faa:	7812      	ldrb	r2, [r2, #0]
 8001fac:	3328      	adds	r3, #40	; 0x28
 8001fae:	443b      	add	r3, r7
 8001fb0:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[7+i]  = azData.data[i];
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	3307      	adds	r3, #7
 8001fb8:	493c      	ldr	r1, [pc, #240]	; (80020ac <usartSendMeterData+0x1c8>)
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	440a      	add	r2, r1
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	3328      	adds	r3, #40	; 0x28
 8001fc2:	443b      	add	r3, r7
 8001fc4:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[9+i]  = gxData.data[i];
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3309      	adds	r3, #9
 8001fcc:	4938      	ldr	r1, [pc, #224]	; (80020b0 <usartSendMeterData+0x1cc>)
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	440a      	add	r2, r1
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	3328      	adds	r3, #40	; 0x28
 8001fd6:	443b      	add	r3, r7
 8001fd8:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[11+i] = gyData.data[i];
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	330b      	adds	r3, #11
 8001fe0:	4934      	ldr	r1, [pc, #208]	; (80020b4 <usartSendMeterData+0x1d0>)
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	440a      	add	r2, r1
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	3328      	adds	r3, #40	; 0x28
 8001fea:	443b      	add	r3, r7
 8001fec:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[13+i] = gzData.data[i];
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	330d      	adds	r3, #13
 8001ff4:	4930      	ldr	r1, [pc, #192]	; (80020b8 <usartSendMeterData+0x1d4>)
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	440a      	add	r2, r1
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	3328      	adds	r3, #40	; 0x28
 8001ffe:	443b      	add	r3, r7
 8002000:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[15+i] = mxData.data[i];
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	330f      	adds	r3, #15
 8002008:	492c      	ldr	r1, [pc, #176]	; (80020bc <usartSendMeterData+0x1d8>)
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	440a      	add	r2, r1
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	3328      	adds	r3, #40	; 0x28
 8002012:	443b      	add	r3, r7
 8002014:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[17+i] = myData.data[i];
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3311      	adds	r3, #17
 800201c:	4928      	ldr	r1, [pc, #160]	; (80020c0 <usartSendMeterData+0x1dc>)
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	440a      	add	r2, r1
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	3328      	adds	r3, #40	; 0x28
 8002026:	443b      	add	r3, r7
 8002028:	f803 2c20 	strb.w	r2, [r3, #-32]
		buf[19+i] = mzData.data[i];
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	3313      	adds	r3, #19
 8002030:	4924      	ldr	r1, [pc, #144]	; (80020c4 <usartSendMeterData+0x1e0>)
 8002032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002034:	440a      	add	r2, r1
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	3328      	adds	r3, #40	; 0x28
 800203a:	443b      	add	r3, r7
 800203c:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(i = 0; i < 2; ++i)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	3301      	adds	r3, #1
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	dd9f      	ble.n	8001f8c <usartSendMeterData+0xa8>
	}
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	b29b      	uxth	r3, r3
 8002050:	3303      	adds	r3, #3
 8002052:	b29a      	uxth	r2, r3
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	1cdc      	adds	r4, r3, #3
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fee0 	bl	8001e24 <getCrc8>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800206c:	443b      	add	r3, r7
 800206e:	f803 2c20 	strb.w	r2, [r3, #-32]
	buf[3 + length + 1] = ender[0];              // buf[11]
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	3304      	adds	r3, #4
 8002076:	220d      	movs	r2, #13
 8002078:	3328      	adds	r3, #40	; 0x28
 800207a:	443b      	add	r3, r7
 800207c:	f803 2c20 	strb.w	r2, [r3, #-32]
	buf[3 + length + 2] = ender[1];              // buf[12]
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	3305      	adds	r3, #5
 8002084:	220a      	movs	r2, #10
 8002086:	3328      	adds	r3, #40	; 0x28
 8002088:	443b      	add	r3, r7
 800208a:	f803 2c20 	strb.w	r2, [r3, #-32]

	USART_Send_String(buf,sizeof(buf));
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	2118      	movs	r1, #24
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fef9 	bl	8001e8c <USART_Send_String>
	//USART1_Send_ArrayU8(buf,sizeof(buf));
}
 800209a:	bf00      	nop
 800209c:	372c      	adds	r7, #44	; 0x2c
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000144 	.word	0x20000144
 80020a8:	20000148 	.word	0x20000148
 80020ac:	2000014c 	.word	0x2000014c
 80020b0:	20000150 	.word	0x20000150
 80020b4:	20000154 	.word	0x20000154
 80020b8:	20000158 	.word	0x20000158
 80020bc:	2000015c 	.word	0x2000015c
 80020c0:	20000160 	.word	0x20000160
 80020c4:	20000164 	.word	0x20000164
 80020c8:	080067c4 	.word	0x080067c4

080020cc <HAL_UART_RxCpltCallback>:
// The serial port receiving is interrupted. Procedure  串口接收完成中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
              the HAL_UART_RxCpltCallback can be implemented in the user file
     */
    // 测试发送数据，实际应用中不应该在中断中发送数据
    // Test sending data. In practice, data should not be sent during interrupts  
    //USART1_Revice_Speed(RxTemp);
    USART1_Revice_Robot_Speed(RxTemp);
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_UART_RxCpltCallback+0x24>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fddb 	bl	8001c94 <USART1_Revice_Robot_Speed>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxTemp, 1);
 80020de:	2201      	movs	r2, #1
 80020e0:	4903      	ldr	r1, [pc, #12]	; (80020f0 <HAL_UART_RxCpltCallback+0x24>)
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <HAL_UART_RxCpltCallback+0x28>)
 80020e4:	f002 fe4d 	bl	8004d82 <HAL_UART_Receive_IT>

}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000113 	.word	0x20000113
 80020f4:	20000198 	.word	0x20000198

080020f8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002100:	1d39      	adds	r1, r7, #4
 8002102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002106:	2201      	movs	r2, #1
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <__io_putchar+0x20>)
 800210a:	f002 fda8 	bl	8004c5e <HAL_UART_Transmit>
    return ch;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000198 	.word	0x20000198

0800211c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_CAN_Init+0x68>)
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <MX_CAN_Init+0x6c>)
 8002124:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <MX_CAN_Init+0x68>)
 8002128:	2208      	movs	r2, #8
 800212a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_CAN_Init+0x68>)
 800212e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002132:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_CAN_Init+0x68>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MX_CAN_Init+0x68>)
 800213c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002140:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_CAN_Init+0x68>)
 8002144:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002148:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_CAN_Init+0x68>)
 800214c:	2200      	movs	r2, #0
 800214e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_CAN_Init+0x68>)
 8002152:	2200      	movs	r2, #0
 8002154:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_CAN_Init+0x68>)
 8002158:	2200      	movs	r2, #0
 800215a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_CAN_Init+0x68>)
 800215e:	2200      	movs	r2, #0
 8002160:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_CAN_Init+0x68>)
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_CAN_Init+0x68>)
 800216a:	2200      	movs	r2, #0
 800216c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_CAN_Init+0x68>)
 8002170:	f000 fbf4 	bl	800295c <HAL_CAN_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800217a:	f000 f977 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000016c 	.word	0x2000016c
 8002188:	40006400 	.word	0x40006400

0800218c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_CAN_MspInit+0xc0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d14b      	bne.n	8002244 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_CAN_MspInit+0xc4>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_CAN_MspInit+0xc4>)
 80021b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b6:	61d3      	str	r3, [r2, #28]
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_CAN_MspInit+0xc4>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <HAL_CAN_MspInit+0xc4>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <HAL_CAN_MspInit+0xc4>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_CAN_MspInit+0xc4>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4818      	ldr	r0, [pc, #96]	; (8002254 <HAL_CAN_MspInit+0xc8>)
 80021f2:	f001 fef1 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4812      	ldr	r0, [pc, #72]	; (8002254 <HAL_CAN_MspInit+0xc8>)
 800220c:	f001 fee4 	bl	8003fd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_CAN_MspInit+0xcc>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_CAN_MspInit+0xcc>)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2014      	movs	r0, #20
 800223a:	f001 faa2 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800223e:	2014      	movs	r0, #20
 8002240:	f001 fabb 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40006400 	.word	0x40006400
 8002250:	40021000 	.word	0x40021000
 8002254:	40010c00 	.word	0x40010c00
 8002258:	40010000 	.word	0x40010000

0800225c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_DMA_Init+0x38>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <MX_DMA_Init+0x38>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6153      	str	r3, [r2, #20]
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_DMA_Init+0x38>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	200e      	movs	r0, #14
 8002280:	f001 fa7f 	bl	8003782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002284:	200e      	movs	r0, #14
 8002286:	f001 fa98 	bl	80037ba <HAL_NVIC_EnableIRQ>

}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000

08002298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <MX_GPIO_Init+0x114>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <MX_GPIO_Init+0x114>)
 80022b2:	f043 0310 	orr.w	r3, r3, #16
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <MX_GPIO_Init+0x114>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c4:	4b39      	ldr	r3, [pc, #228]	; (80023ac <MX_GPIO_Init+0x114>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a38      	ldr	r2, [pc, #224]	; (80023ac <MX_GPIO_Init+0x114>)
 80022ca:	f043 0320 	orr.w	r3, r3, #32
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <MX_GPIO_Init+0x114>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <MX_GPIO_Init+0x114>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a32      	ldr	r2, [pc, #200]	; (80023ac <MX_GPIO_Init+0x114>)
 80022e2:	f043 0308 	orr.w	r3, r3, #8
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <MX_GPIO_Init+0x114>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <MX_GPIO_Init+0x114>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <MX_GPIO_Init+0x114>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <MX_GPIO_Init+0x114>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	f242 0120 	movw	r1, #8224	; 0x2020
 8002312:	4827      	ldr	r0, [pc, #156]	; (80023b0 <MX_GPIO_Init+0x118>)
 8002314:	f002 f80b 	bl	800432e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MPU_SCL_Pin|MPU_SDA_Pin, GPIO_PIN_SET);
 8002318:	2201      	movs	r2, #1
 800231a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800231e:	4825      	ldr	r0, [pc, #148]	; (80023b4 <MX_GPIO_Init+0x11c>)
 8002320:	f002 f805 	bl	800432e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_AD0_GPIO_Port, MPU_AD0_Pin, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800232a:	4822      	ldr	r0, [pc, #136]	; (80023b4 <MX_GPIO_Init+0x11c>)
 800232c:	f001 ffff 	bl	800432e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 8002330:	f242 0320 	movw	r3, #8224	; 0x2020
 8002334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2302      	movs	r3, #2
 8002340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4619      	mov	r1, r3
 8002348:	4819      	ldr	r0, [pc, #100]	; (80023b0 <MX_GPIO_Init+0x118>)
 800234a:	f001 fe45 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 800234e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002358:	2301      	movs	r3, #1
 800235a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	4619      	mov	r1, r3
 8002366:	4813      	ldr	r0, [pc, #76]	; (80023b4 <MX_GPIO_Init+0x11c>)
 8002368:	f001 fe36 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_AD0_Pin;
 800236c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2302      	movs	r3, #2
 800237c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_AD0_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	4619      	mov	r1, r3
 8002384:	480b      	ldr	r0, [pc, #44]	; (80023b4 <MX_GPIO_Init+0x11c>)
 8002386:	f001 fe27 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800238a:	2304      	movs	r3, #4
 800238c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002392:	2301      	movs	r3, #1
 8002394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	4619      	mov	r1, r3
 800239c:	4806      	ldr	r0, [pc, #24]	; (80023b8 <MX_GPIO_Init+0x120>)
 800239e:	f001 fe1b 	bl	8003fd8 <HAL_GPIO_Init>

}
 80023a2:	bf00      	nop
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40010c00 	.word	0x40010c00
 80023b8:	40011400 	.word	0x40011400

080023bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023c0:	f000 fa46 	bl	8002850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023c4:	f000 f80d 	bl	80023e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c8:	f7ff ff66 	bl	8002298 <MX_GPIO_Init>
  MX_CAN_Init();
 80023cc:	f7ff fea6 	bl	800211c <MX_CAN_Init>
  MX_DMA_Init();
 80023d0:	f7ff ff44 	bl	800225c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80023d4:	f000 f96e 	bl	80026b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  Bsp_Init();
 80023d8:	f7fe fb36 	bl	8000a48 <Bsp_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	 Bsp_Loop();
 80023dc:	f7fe fbc2 	bl	8000b64 <Bsp_Loop>
 80023e0:	e7fc      	b.n	80023dc <main+0x20>

080023e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b090      	sub	sp, #64	; 0x40
 80023e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e8:	f107 0318 	add.w	r3, r7, #24
 80023ec:	2228      	movs	r2, #40	; 0x28
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 f949 	bl	8005688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002404:	2301      	movs	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002412:	2301      	movs	r3, #1
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002416:	2302      	movs	r3, #2
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002420:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002426:	f107 0318 	add.w	r3, r7, #24
 800242a:	4618      	mov	r0, r3
 800242c:	f001 ffb0 	bl	8004390 <HAL_RCC_OscConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002436:	f000 f819 	bl	800246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243a:	230f      	movs	r3, #15
 800243c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243e:	2302      	movs	r3, #2
 8002440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2102      	movs	r1, #2
 8002454:	4618      	mov	r0, r3
 8002456:	f002 fa1d 	bl	8004894 <HAL_RCC_ClockConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002460:	f000 f804 	bl	800246c <Error_Handler>
  }
}
 8002464:	bf00      	nop
 8002466:	3740      	adds	r7, #64	; 0x40
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	e7fe      	b.n	8002474 <Error_Handler+0x8>
	...

08002478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_MspInit+0x5c>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_MspInit+0x5c>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6193      	str	r3, [r2, #24]
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_MspInit+0x5c>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_MspInit+0x5c>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <HAL_MspInit+0x5c>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	61d3      	str	r3, [r2, #28]
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_MspInit+0x5c>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_MspInit+0x60>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_MspInit+0x60>)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010000 	.word	0x40010000

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002522:	f000 f9db 	bl	80028dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <DMA1_Channel4_IRQHandler+0x10>)
 8002532:	f001 fb15 	bl	8003b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200001dc 	.word	0x200001dc

08002540 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002546:	f000 fe21 	bl	800318c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000016c 	.word	0x2000016c

08002554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <USART1_IRQHandler+0x10>)
 800255a:	f002 fc43 	bl	8004de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000198 	.word	0x20000198

08002568 <_read>:
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e00a      	b.n	8002590 <_read+0x28>
 800257a:	f3af 8000 	nop.w
 800257e:	4601      	mov	r1, r0
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	b2ca      	uxtb	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	dbf0      	blt.n	800257a <_read+0x12>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_write>:
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e009      	b.n	80025c8 <_write+0x26>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd9b 	bl	80020f8 <__io_putchar>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dbf1      	blt.n	80025b4 <_write+0x12>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_close>:
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <_fstat>:
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	2300      	movs	r3, #0
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <_isatty>:
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	2301      	movs	r3, #1
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <_lseek>:
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	2300      	movs	r3, #0
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
	...

0800263c <_sbrk>:
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <_sbrk+0x5c>)
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <_sbrk+0x60>)
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <_sbrk+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <_sbrk+0x22>
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_sbrk+0x64>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <_sbrk+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	d207      	bcs.n	800267c <_sbrk+0x40>
 800266c:	f002 ffe2 	bl	8005634 <__errno>
 8002670:	4603      	mov	r3, r0
 8002672:	220c      	movs	r2, #12
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	e009      	b.n	8002690 <_sbrk+0x54>
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <_sbrk+0x64>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_sbrk+0x64>)
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000c000 	.word	0x2000c000
 800269c:	00000400 	.word	0x00000400
 80026a0:	20000194 	.word	0x20000194
 80026a4:	20000238 	.word	0x20000238

080026a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <MX_USART1_UART_Init+0x50>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ec:	f002 fa6a 	bl	8004bc4 <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026f6:	f7ff feb9 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000198 	.word	0x20000198
 8002704:	40013800 	.word	0x40013800

08002708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <HAL_UART_MspInit+0xe8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d15f      	bne.n	80027e8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_UART_MspInit+0xec>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_UART_MspInit+0xec>)
 800272e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_UART_MspInit+0xec>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_UART_MspInit+0xec>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a2b      	ldr	r2, [pc, #172]	; (80027f4 <HAL_UART_MspInit+0xec>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_UART_MspInit+0xec>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	4619      	mov	r1, r3
 800276c:	4822      	ldr	r0, [pc, #136]	; (80027f8 <HAL_UART_MspInit+0xf0>)
 800276e:	f001 fc33 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	4619      	mov	r1, r3
 8002786:	481c      	ldr	r0, [pc, #112]	; (80027f8 <HAL_UART_MspInit+0xf0>)
 8002788:	f001 fc26 	bl	8003fd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_UART_MspInit+0xf4>)
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_UART_MspInit+0xf8>)
 8002790:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_UART_MspInit+0xf4>)
 8002794:	2210      	movs	r2, #16
 8002796:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_UART_MspInit+0xf4>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027bc:	480f      	ldr	r0, [pc, #60]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027be:	f001 f817 	bl	80037f0 <HAL_DMA_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80027c8:	f7ff fe50 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <HAL_UART_MspInit+0xf4>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	2025      	movs	r0, #37	; 0x25
 80027de:	f000 ffd0 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027e2:	2025      	movs	r0, #37	; 0x25
 80027e4:	f000 ffe9 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027e8:	bf00      	nop
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40013800 	.word	0x40013800
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010800 	.word	0x40010800
 80027fc:	200001dc 	.word	0x200001dc
 8002800:	40020044 	.word	0x40020044

08002804 <Reset_Handler>:
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <LoopFillZerobss+0x12>)
 8002806:	490d      	ldr	r1, [pc, #52]	; (800283c <LoopFillZerobss+0x16>)
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <LoopFillZerobss+0x1a>)
 800280a:	2300      	movs	r3, #0
 800280c:	e002      	b.n	8002814 <LoopCopyDataInit>

0800280e <CopyDataInit>:
 800280e:	58d4      	ldr	r4, [r2, r3]
 8002810:	50c4      	str	r4, [r0, r3]
 8002812:	3304      	adds	r3, #4

08002814 <LoopCopyDataInit>:
 8002814:	18c4      	adds	r4, r0, r3
 8002816:	428c      	cmp	r4, r1
 8002818:	d3f9      	bcc.n	800280e <CopyDataInit>
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <LoopFillZerobss+0x1e>)
 800281c:	4c0a      	ldr	r4, [pc, #40]	; (8002848 <LoopFillZerobss+0x22>)
 800281e:	2300      	movs	r3, #0
 8002820:	e001      	b.n	8002826 <LoopFillZerobss>

08002822 <FillZerobss>:
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	3204      	adds	r2, #4

08002826 <LoopFillZerobss>:
 8002826:	42a2      	cmp	r2, r4
 8002828:	d3fb      	bcc.n	8002822 <FillZerobss>
 800282a:	f7ff ff3d 	bl	80026a8 <SystemInit>
 800282e:	f002 ff07 	bl	8005640 <__libc_init_array>
 8002832:	f7ff fdc3 	bl	80023bc <main>
 8002836:	4770      	bx	lr
 8002838:	20000000 	.word	0x20000000
 800283c:	20000070 	.word	0x20000070
 8002840:	08006880 	.word	0x08006880
 8002844:	20000070 	.word	0x20000070
 8002848:	20000234 	.word	0x20000234

0800284c <ADC1_2_IRQHandler>:
 800284c:	e7fe      	b.n	800284c <ADC1_2_IRQHandler>
	...

08002850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_Init+0x28>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_Init+0x28>)
 800285a:	f043 0310 	orr.w	r3, r3, #16
 800285e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002860:	2003      	movs	r0, #3
 8002862:	f000 ff83 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002866:	200f      	movs	r0, #15
 8002868:	f000 f808 	bl	800287c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800286c:	f7ff fe04 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000

0800287c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x54>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x58>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002892:	fbb3 f3f1 	udiv	r3, r3, r1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f000 ff9b 	bl	80037d6 <HAL_SYSTICK_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00e      	b.n	80028c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d80a      	bhi.n	80028c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f000 ff63 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028bc:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <HAL_InitTick+0x5c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000008 	.word	0x20000008
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_IncTick+0x1c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_IncTick+0x20>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_IncTick+0x20>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000008 	.word	0x20000008
 80028fc:	20000220 	.word	0x20000220

08002900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <HAL_GetTick+0x10>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000220 	.word	0x20000220

08002914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff fff0 	bl	8002900 <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d005      	beq.n	800293a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_Delay+0x44>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800293a:	bf00      	nop
 800293c:	f7ff ffe0 	bl	8002900 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	d8f7      	bhi.n	800293c <HAL_Delay+0x28>
  {
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000008 	.word	0x20000008

0800295c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0ed      	b.n	8002b4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fc06 	bl	800218c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002990:	f7ff ffb6 	bl	8002900 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002996:	e012      	b.n	80029be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002998:	f7ff ffb2 	bl	8002900 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b0a      	cmp	r3, #10
 80029a4:	d90b      	bls.n	80029be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2205      	movs	r2, #5
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0c5      	b.n	8002b4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0e5      	beq.n	8002998 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0202 	bic.w	r2, r2, #2
 80029da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029dc:	f7ff ff90 	bl	8002900 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029e2:	e012      	b.n	8002a0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e4:	f7ff ff8c 	bl	8002900 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b0a      	cmp	r3, #10
 80029f0:	d90b      	bls.n	8002a0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2205      	movs	r2, #5
 8002a02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e09f      	b.n	8002b4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e5      	bne.n	80029e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d108      	bne.n	8002a32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e007      	b.n	8002a42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7e5b      	ldrb	r3, [r3, #25]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d108      	bne.n	8002a5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e007      	b.n	8002a6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7e9b      	ldrb	r3, [r3, #26]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d108      	bne.n	8002a86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e007      	b.n	8002a96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0220 	bic.w	r2, r2, #32
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7edb      	ldrb	r3, [r3, #27]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d108      	bne.n	8002ab0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0210 	bic.w	r2, r2, #16
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e007      	b.n	8002ac0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0210 	orr.w	r2, r2, #16
 8002abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7f1b      	ldrb	r3, [r3, #28]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d108      	bne.n	8002ada <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0208 	orr.w	r2, r2, #8
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e007      	b.n	8002aea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0208 	bic.w	r2, r2, #8
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7f5b      	ldrb	r3, [r3, #29]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d108      	bne.n	8002b04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0204 	orr.w	r2, r2, #4
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e007      	b.n	8002b14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0204 	bic.w	r2, r2, #4
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	ea42 0103 	orr.w	r1, r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	1e5a      	subs	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b087      	sub	sp, #28
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d003      	beq.n	8002b78 <HAL_CAN_ConfigFilter+0x26>
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f040 80aa 	bne.w	8002ccc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2201      	movs	r2, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d123      	bne.n	8002bfa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3248      	adds	r2, #72	; 0x48
 8002bda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bf0:	6979      	ldr	r1, [r7, #20]
 8002bf2:	3348      	adds	r3, #72	; 0x48
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d122      	bne.n	8002c48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3248      	adds	r2, #72	; 0x48
 8002c28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c3e:	6979      	ldr	r1, [r7, #20]
 8002c40:	3348      	adds	r3, #72	; 0x48
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002c62:	e007      	b.n	8002c74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cbe:	f023 0201 	bic.w	r2, r3, #1
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e006      	b.n	8002cda <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d12e      	bne.n	8002d56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d10:	f7ff fdf6 	bl	8002900 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d16:	e012      	b.n	8002d3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d18:	f7ff fdf2 	bl	8002900 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b0a      	cmp	r3, #10
 8002d24:	d90b      	bls.n	8002d3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2205      	movs	r2, #5
 8002d36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e012      	b.n	8002d64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e006      	b.n	8002d64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	; 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d003      	beq.n	8002d98 <HAL_CAN_AddTxMessage+0x2c>
 8002d90:	7ffb      	ldrb	r3, [r7, #31]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	f040 80b8 	bne.w	8002f08 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80a0 	beq.w	8002ef8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	0e1b      	lsrs	r3, r3, #24
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d907      	bls.n	8002dd8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e09e      	b.n	8002f16 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002df4:	68f9      	ldr	r1, [r7, #12]
 8002df6:	6809      	ldr	r1, [r1, #0]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	440b      	add	r3, r1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e00f      	b.n	8002e26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e16:	68f9      	ldr	r1, [r7, #12]
 8002e18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3318      	adds	r3, #24
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	440b      	add	r3, r1
 8002e24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3318      	adds	r3, #24
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	440b      	add	r3, r1
 8002e36:	3304      	adds	r3, #4
 8002e38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	7d1b      	ldrb	r3, [r3, #20]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d111      	bne.n	8002e66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3318      	adds	r3, #24
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	6811      	ldr	r1, [r2, #0]
 8002e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3318      	adds	r3, #24
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	440b      	add	r3, r1
 8002e62:	3304      	adds	r3, #4
 8002e64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3307      	adds	r3, #7
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	061a      	lsls	r2, r3, #24
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3306      	adds	r3, #6
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3305      	adds	r3, #5
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	4313      	orrs	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	3204      	adds	r2, #4
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	4610      	mov	r0, r2
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	ea43 0200 	orr.w	r2, r3, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3303      	adds	r3, #3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	061a      	lsls	r2, r3, #24
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	6811      	ldr	r1, [r2, #0]
 8002ec4:	ea43 0200 	orr.w	r2, r3, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	440b      	add	r3, r1
 8002ece:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ed2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3318      	adds	r3, #24
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	4413      	add	r3, r2
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	6811      	ldr	r1, [r2, #0]
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3318      	adds	r3, #24
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	440b      	add	r3, r1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e00e      	b.n	8002f16 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e006      	b.n	8002f16 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d003      	beq.n	8002f44 <HAL_CAN_GetRxMessage+0x24>
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	f040 80f3 	bne.w	800312a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10e      	bne.n	8002f68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d116      	bne.n	8002f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0e7      	b.n	8003138 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0d8      	b.n	8003138 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	331b      	adds	r3, #27
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4413      	add	r3, r2
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0204 	and.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10c      	bne.n	8002fbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	331b      	adds	r3, #27
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	4413      	add	r3, r2
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0d5b      	lsrs	r3, r3, #21
 8002fb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e00b      	b.n	8002fd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	331b      	adds	r3, #27
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	331b      	adds	r3, #27
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0202 	and.w	r2, r3, #2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	331b      	adds	r3, #27
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 020f 	and.w	r2, r3, #15
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	331b      	adds	r3, #27
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	4413      	add	r3, r2
 8003010:	3304      	adds	r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	b2da      	uxtb	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	331b      	adds	r3, #27
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4413      	add	r3, r2
 8003028:	3304      	adds	r3, #4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	4413      	add	r3, r2
 800303e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	4413      	add	r3, r2
 8003054:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0a1a      	lsrs	r2, r3, #8
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4413      	add	r3, r2
 800306e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0c1a      	lsrs	r2, r3, #16
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	3302      	adds	r3, #2
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	4413      	add	r3, r2
 8003088:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	0e1a      	lsrs	r2, r3, #24
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	3303      	adds	r3, #3
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	3304      	adds	r3, #4
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	0a1a      	lsrs	r2, r3, #8
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3305      	adds	r3, #5
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0c1a      	lsrs	r2, r3, #16
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	3306      	adds	r3, #6
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e1a      	lsrs	r2, r3, #24
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3307      	adds	r3, #7
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d108      	bne.n	8003116 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0220 	orr.w	r2, r2, #32
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	e007      	b.n	8003126 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0220 	orr.w	r2, r2, #32
 8003124:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	e006      	b.n	8003138 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
  }
}
 8003138:	4618      	mov	r0, r3
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003152:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d002      	beq.n	8003160 <HAL_CAN_ActivateNotification+0x1e>
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d109      	bne.n	8003174 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6959      	ldr	r1, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e006      	b.n	8003182 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d07c      	beq.n	80032cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d023      	beq.n	8003224 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2201      	movs	r2, #1
 80031e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f983 	bl	80034fa <HAL_CAN_TxMailbox0CompleteCallback>
 80031f4:	e016      	b.n	8003224 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	e00c      	b.n	8003224 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	e002      	b.n	8003224 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f986 	bl	8003530 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d024      	beq.n	8003278 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003236:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f962 	bl	800350c <HAL_CAN_TxMailbox1CompleteCallback>
 8003248:	e016      	b.n	8003278 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	e00c      	b.n	8003278 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
 8003270:	e002      	b.n	8003278 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f965 	bl	8003542 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d024      	beq.n	80032cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800328a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f941 	bl	800351e <HAL_CAN_TxMailbox2CompleteCallback>
 800329c:	e016      	b.n	80032cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	e00c      	b.n	80032cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
 80032c4:	e002      	b.n	80032cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f944 	bl	8003554 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2210      	movs	r2, #16
 80032ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2208      	movs	r2, #8
 800330a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f92a 	bl	8003566 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd ff68 	bl	8001200 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2210      	movs	r2, #16
 8003352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2208      	movs	r2, #8
 800336e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f90a 	bl	800358a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8f2 	bl	8003578 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2210      	movs	r2, #16
 80033ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8f3 	bl	800359c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2208      	movs	r2, #8
 80033d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8eb 	bl	80035ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d07b      	beq.n	80034da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d072      	beq.n	80034d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	f043 0302 	orr.w	r3, r3, #2
 8003422:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003446:	2b00      	cmp	r3, #0
 8003448:	d043      	beq.n	80034d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003450:	2b00      	cmp	r3, #0
 8003452:	d03e      	beq.n	80034d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345a:	2b60      	cmp	r3, #96	; 0x60
 800345c:	d02b      	beq.n	80034b6 <HAL_CAN_IRQHandler+0x32a>
 800345e:	2b60      	cmp	r3, #96	; 0x60
 8003460:	d82e      	bhi.n	80034c0 <HAL_CAN_IRQHandler+0x334>
 8003462:	2b50      	cmp	r3, #80	; 0x50
 8003464:	d022      	beq.n	80034ac <HAL_CAN_IRQHandler+0x320>
 8003466:	2b50      	cmp	r3, #80	; 0x50
 8003468:	d82a      	bhi.n	80034c0 <HAL_CAN_IRQHandler+0x334>
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d019      	beq.n	80034a2 <HAL_CAN_IRQHandler+0x316>
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d826      	bhi.n	80034c0 <HAL_CAN_IRQHandler+0x334>
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d010      	beq.n	8003498 <HAL_CAN_IRQHandler+0x30c>
 8003476:	2b30      	cmp	r3, #48	; 0x30
 8003478:	d822      	bhi.n	80034c0 <HAL_CAN_IRQHandler+0x334>
 800347a:	2b10      	cmp	r3, #16
 800347c:	d002      	beq.n	8003484 <HAL_CAN_IRQHandler+0x2f8>
 800347e:	2b20      	cmp	r3, #32
 8003480:	d005      	beq.n	800348e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003482:	e01d      	b.n	80034c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800348c:	e019      	b.n	80034c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f043 0310 	orr.w	r3, r3, #16
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003496:	e014      	b.n	80034c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	f043 0320 	orr.w	r3, r3, #32
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034a0:	e00f      	b.n	80034c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034aa:	e00a      	b.n	80034c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034b4:	e005      	b.n	80034c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034be:	e000      	b.n	80034c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80034c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2204      	movs	r2, #4
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f867 	bl	80035c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
	...

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4906      	ldr	r1, [pc, #24]	; (800366c <__NVIC_EnableIRQ+0x34>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff90 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff2d 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff42 	bl	800361c <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff90 	bl	80036c4 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5f 	bl	8003670 <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff35 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ffa2 	bl	8003728 <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e059      	b.n	80038ba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_DMA_Init+0xd4>)
 800380e:	429a      	cmp	r2, r3
 8003810:	d80f      	bhi.n	8003832 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <HAL_DMA_Init+0xd8>)
 800381a:	4413      	add	r3, r2
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <HAL_DMA_Init+0xdc>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <HAL_DMA_Init+0xe0>)
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003830:	e00e      	b.n	8003850 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_DMA_Init+0xe4>)
 800383a:	4413      	add	r3, r2
 800383c:	4a23      	ldr	r2, [pc, #140]	; (80038cc <HAL_DMA_Init+0xdc>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	009a      	lsls	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_DMA_Init+0xe8>)
 800384e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003866:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800386a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	40020407 	.word	0x40020407
 80038c8:	bffdfff8 	.word	0xbffdfff8
 80038cc:	cccccccd 	.word	0xcccccccd
 80038d0:	40020000 	.word	0x40020000
 80038d4:	bffdfbf8 	.word	0xbffdfbf8
 80038d8:	40020400 	.word	0x40020400

080038dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d008      	beq.n	8003904 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e020      	b.n	8003946 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 020e 	bic.w	r2, r2, #14
 8003912:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr

08003950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003962:	2b02      	cmp	r3, #2
 8003964:	d005      	beq.n	8003972 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2204      	movs	r2, #4
 800396a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e0d6      	b.n	8003b20 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 020e 	bic.w	r2, r2, #14
 8003980:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	4b64      	ldr	r3, [pc, #400]	; (8003b2c <HAL_DMA_Abort_IT+0x1dc>)
 800399a:	429a      	cmp	r2, r3
 800399c:	d958      	bls.n	8003a50 <HAL_DMA_Abort_IT+0x100>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a63      	ldr	r2, [pc, #396]	; (8003b30 <HAL_DMA_Abort_IT+0x1e0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d04f      	beq.n	8003a48 <HAL_DMA_Abort_IT+0xf8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a61      	ldr	r2, [pc, #388]	; (8003b34 <HAL_DMA_Abort_IT+0x1e4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d048      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xf4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a60      	ldr	r2, [pc, #384]	; (8003b38 <HAL_DMA_Abort_IT+0x1e8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d040      	beq.n	8003a3e <HAL_DMA_Abort_IT+0xee>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5e      	ldr	r2, [pc, #376]	; (8003b3c <HAL_DMA_Abort_IT+0x1ec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d038      	beq.n	8003a38 <HAL_DMA_Abort_IT+0xe8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a5d      	ldr	r2, [pc, #372]	; (8003b40 <HAL_DMA_Abort_IT+0x1f0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d030      	beq.n	8003a32 <HAL_DMA_Abort_IT+0xe2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a5b      	ldr	r2, [pc, #364]	; (8003b44 <HAL_DMA_Abort_IT+0x1f4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d028      	beq.n	8003a2c <HAL_DMA_Abort_IT+0xdc>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a53      	ldr	r2, [pc, #332]	; (8003b2c <HAL_DMA_Abort_IT+0x1dc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d020      	beq.n	8003a26 <HAL_DMA_Abort_IT+0xd6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a57      	ldr	r2, [pc, #348]	; (8003b48 <HAL_DMA_Abort_IT+0x1f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_DMA_Abort_IT+0xd2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a56      	ldr	r2, [pc, #344]	; (8003b4c <HAL_DMA_Abort_IT+0x1fc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d012      	beq.n	8003a1e <HAL_DMA_Abort_IT+0xce>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a54      	ldr	r2, [pc, #336]	; (8003b50 <HAL_DMA_Abort_IT+0x200>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00a      	beq.n	8003a18 <HAL_DMA_Abort_IT+0xc8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a53      	ldr	r2, [pc, #332]	; (8003b54 <HAL_DMA_Abort_IT+0x204>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d102      	bne.n	8003a12 <HAL_DMA_Abort_IT+0xc2>
 8003a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a10:	e01b      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a16:	e018      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1c:	e015      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a1e:	2310      	movs	r3, #16
 8003a20:	e013      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e011      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a2a:	e00e      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a30:	e00b      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a36:	e008      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3c:	e005      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a42:	e002      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a44:	2310      	movs	r3, #16
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_Abort_IT+0xfa>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4a43      	ldr	r2, [pc, #268]	; (8003b58 <HAL_DMA_Abort_IT+0x208>)
 8003a4c:	6053      	str	r3, [r2, #4]
 8003a4e:	e057      	b.n	8003b00 <HAL_DMA_Abort_IT+0x1b0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a36      	ldr	r2, [pc, #216]	; (8003b30 <HAL_DMA_Abort_IT+0x1e0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04f      	beq.n	8003afa <HAL_DMA_Abort_IT+0x1aa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <HAL_DMA_Abort_IT+0x1e4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d048      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x1a6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a33      	ldr	r2, [pc, #204]	; (8003b38 <HAL_DMA_Abort_IT+0x1e8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d040      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x1a0>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <HAL_DMA_Abort_IT+0x1ec>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d038      	beq.n	8003aea <HAL_DMA_Abort_IT+0x19a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	; (8003b40 <HAL_DMA_Abort_IT+0x1f0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d030      	beq.n	8003ae4 <HAL_DMA_Abort_IT+0x194>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_DMA_Abort_IT+0x1f4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d028      	beq.n	8003ade <HAL_DMA_Abort_IT+0x18e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <HAL_DMA_Abort_IT+0x1dc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d020      	beq.n	8003ad8 <HAL_DMA_Abort_IT+0x188>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <HAL_DMA_Abort_IT+0x1f8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d019      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x184>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <HAL_DMA_Abort_IT+0x1fc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d012      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x180>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <HAL_DMA_Abort_IT+0x200>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00a      	beq.n	8003aca <HAL_DMA_Abort_IT+0x17a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <HAL_DMA_Abort_IT+0x204>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d102      	bne.n	8003ac4 <HAL_DMA_Abort_IT+0x174>
 8003abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac2:	e01b      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac8:	e018      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ace:	e015      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	e013      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e011      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003adc:	e00e      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003ade:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ae2:	e00b      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae8:	e008      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aee:	e005      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af4:	e002      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003af6:	2310      	movs	r3, #16
 8003af8:	e000      	b.n	8003afc <HAL_DMA_Abort_IT+0x1ac>
 8003afa:	2301      	movs	r3, #1
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_DMA_Abort_IT+0x20c>)
 8003afe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
    } 
  }
  return status;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40020080 	.word	0x40020080
 8003b30:	40020008 	.word	0x40020008
 8003b34:	4002001c 	.word	0x4002001c
 8003b38:	40020030 	.word	0x40020030
 8003b3c:	40020044 	.word	0x40020044
 8003b40:	40020058 	.word	0x40020058
 8003b44:	4002006c 	.word	0x4002006c
 8003b48:	40020408 	.word	0x40020408
 8003b4c:	4002041c 	.word	0x4002041c
 8003b50:	40020430 	.word	0x40020430
 8003b54:	40020444 	.word	0x40020444
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020000 	.word	0x40020000

08003b60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80f1 	beq.w	8003d6c <HAL_DMA_IRQHandler+0x20c>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80eb 	beq.w	8003d6c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d107      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0204 	bic.w	r2, r2, #4
 8003bb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <HAL_DMA_IRQHandler+0x1d8>)
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d958      	bls.n	8003c72 <HAL_DMA_IRQHandler+0x112>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5d      	ldr	r2, [pc, #372]	; (8003d3c <HAL_DMA_IRQHandler+0x1dc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04f      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x10a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5c      	ldr	r2, [pc, #368]	; (8003d40 <HAL_DMA_IRQHandler+0x1e0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d048      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x106>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a5a      	ldr	r2, [pc, #360]	; (8003d44 <HAL_DMA_IRQHandler+0x1e4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d040      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x100>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a59      	ldr	r2, [pc, #356]	; (8003d48 <HAL_DMA_IRQHandler+0x1e8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d038      	beq.n	8003c5a <HAL_DMA_IRQHandler+0xfa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a57      	ldr	r2, [pc, #348]	; (8003d4c <HAL_DMA_IRQHandler+0x1ec>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d030      	beq.n	8003c54 <HAL_DMA_IRQHandler+0xf4>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a56      	ldr	r2, [pc, #344]	; (8003d50 <HAL_DMA_IRQHandler+0x1f0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d028      	beq.n	8003c4e <HAL_DMA_IRQHandler+0xee>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a4d      	ldr	r2, [pc, #308]	; (8003d38 <HAL_DMA_IRQHandler+0x1d8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d020      	beq.n	8003c48 <HAL_DMA_IRQHandler+0xe8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_DMA_IRQHandler+0x1f4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d019      	beq.n	8003c44 <HAL_DMA_IRQHandler+0xe4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a50      	ldr	r2, [pc, #320]	; (8003d58 <HAL_DMA_IRQHandler+0x1f8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d012      	beq.n	8003c40 <HAL_DMA_IRQHandler+0xe0>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a4f      	ldr	r2, [pc, #316]	; (8003d5c <HAL_DMA_IRQHandler+0x1fc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00a      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xda>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a4d      	ldr	r2, [pc, #308]	; (8003d60 <HAL_DMA_IRQHandler+0x200>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d102      	bne.n	8003c34 <HAL_DMA_IRQHandler+0xd4>
 8003c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c32:	e01b      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c38:	e018      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3e:	e015      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c40:	2340      	movs	r3, #64	; 0x40
 8003c42:	e013      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c44:	2304      	movs	r3, #4
 8003c46:	e011      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c4c:	e00e      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c52:	e00b      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c58:	e008      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c5e:	e005      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c64:	e002      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c66:	2340      	movs	r3, #64	; 0x40
 8003c68:	e000      	b.n	8003c6c <HAL_DMA_IRQHandler+0x10c>
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	4a3d      	ldr	r2, [pc, #244]	; (8003d64 <HAL_DMA_IRQHandler+0x204>)
 8003c6e:	6053      	str	r3, [r2, #4]
 8003c70:	e057      	b.n	8003d22 <HAL_DMA_IRQHandler+0x1c2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a31      	ldr	r2, [pc, #196]	; (8003d3c <HAL_DMA_IRQHandler+0x1dc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04f      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x1bc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <HAL_DMA_IRQHandler+0x1e0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d048      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x1b8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2e      	ldr	r2, [pc, #184]	; (8003d44 <HAL_DMA_IRQHandler+0x1e4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d040      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x1b2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <HAL_DMA_IRQHandler+0x1e8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d038      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x1ac>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2b      	ldr	r2, [pc, #172]	; (8003d4c <HAL_DMA_IRQHandler+0x1ec>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d030      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x1a6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <HAL_DMA_IRQHandler+0x1f0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d028      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x1a0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <HAL_DMA_IRQHandler+0x1d8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d020      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x19a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a25      	ldr	r2, [pc, #148]	; (8003d54 <HAL_DMA_IRQHandler+0x1f4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d019      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x196>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a24      	ldr	r2, [pc, #144]	; (8003d58 <HAL_DMA_IRQHandler+0x1f8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d012      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x192>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <HAL_DMA_IRQHandler+0x1fc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00a      	beq.n	8003cec <HAL_DMA_IRQHandler+0x18c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <HAL_DMA_IRQHandler+0x200>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d102      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x186>
 8003ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ce4:	e01b      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003ce6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cea:	e018      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf0:	e015      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003cf2:	2340      	movs	r3, #64	; 0x40
 8003cf4:	e013      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	e011      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003cfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cfe:	e00e      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003d00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d04:	e00b      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003d06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d0a:	e008      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003d0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d10:	e005      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d16:	e002      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003d18:	2340      	movs	r3, #64	; 0x40
 8003d1a:	e000      	b.n	8003d1e <HAL_DMA_IRQHandler+0x1be>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <HAL_DMA_IRQHandler+0x208>)
 8003d20:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8136 	beq.w	8003f98 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d34:	e130      	b.n	8003f98 <HAL_DMA_IRQHandler+0x438>
 8003d36:	bf00      	nop
 8003d38:	40020080 	.word	0x40020080
 8003d3c:	40020008 	.word	0x40020008
 8003d40:	4002001c 	.word	0x4002001c
 8003d44:	40020030 	.word	0x40020030
 8003d48:	40020044 	.word	0x40020044
 8003d4c:	40020058 	.word	0x40020058
 8003d50:	4002006c 	.word	0x4002006c
 8003d54:	40020408 	.word	0x40020408
 8003d58:	4002041c 	.word	0x4002041c
 8003d5c:	40020430 	.word	0x40020430
 8003d60:	40020444 	.word	0x40020444
 8003d64:	40020400 	.word	0x40020400
 8003d68:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2202      	movs	r2, #2
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80dd 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x3d8>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80d7 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 020a 	bic.w	r2, r2, #10
 8003da6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b7b      	ldr	r3, [pc, #492]	; (8003fa4 <HAL_DMA_IRQHandler+0x444>)
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d958      	bls.n	8003e6e <HAL_DMA_IRQHandler+0x30e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a79      	ldr	r2, [pc, #484]	; (8003fa8 <HAL_DMA_IRQHandler+0x448>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d04f      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x306>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a78      	ldr	r2, [pc, #480]	; (8003fac <HAL_DMA_IRQHandler+0x44c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d048      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x302>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a76      	ldr	r2, [pc, #472]	; (8003fb0 <HAL_DMA_IRQHandler+0x450>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d040      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x2fc>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a75      	ldr	r2, [pc, #468]	; (8003fb4 <HAL_DMA_IRQHandler+0x454>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d038      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x2f6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a73      	ldr	r2, [pc, #460]	; (8003fb8 <HAL_DMA_IRQHandler+0x458>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d030      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x2f0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a72      	ldr	r2, [pc, #456]	; (8003fbc <HAL_DMA_IRQHandler+0x45c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d028      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x2ea>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a69      	ldr	r2, [pc, #420]	; (8003fa4 <HAL_DMA_IRQHandler+0x444>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d020      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x2e4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a6e      	ldr	r2, [pc, #440]	; (8003fc0 <HAL_DMA_IRQHandler+0x460>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d019      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x2e0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6c      	ldr	r2, [pc, #432]	; (8003fc4 <HAL_DMA_IRQHandler+0x464>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d012      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x2dc>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6b      	ldr	r2, [pc, #428]	; (8003fc8 <HAL_DMA_IRQHandler+0x468>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00a      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x2d6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a69      	ldr	r2, [pc, #420]	; (8003fcc <HAL_DMA_IRQHandler+0x46c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d102      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x2d0>
 8003e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e2e:	e01b      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e34:	e018      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e3a:	e015      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e013      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e011      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e48:	e00e      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e4e:	e00b      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e54:	e008      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e5a:	e005      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e60:	e002      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e62:	2320      	movs	r3, #32
 8003e64:	e000      	b.n	8003e68 <HAL_DMA_IRQHandler+0x308>
 8003e66:	2302      	movs	r3, #2
 8003e68:	4a59      	ldr	r2, [pc, #356]	; (8003fd0 <HAL_DMA_IRQHandler+0x470>)
 8003e6a:	6053      	str	r3, [r2, #4]
 8003e6c:	e057      	b.n	8003f1e <HAL_DMA_IRQHandler+0x3be>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4d      	ldr	r2, [pc, #308]	; (8003fa8 <HAL_DMA_IRQHandler+0x448>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d04f      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x3b8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a4b      	ldr	r2, [pc, #300]	; (8003fac <HAL_DMA_IRQHandler+0x44c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d048      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x3b4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <HAL_DMA_IRQHandler+0x450>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d040      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3ae>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a48      	ldr	r2, [pc, #288]	; (8003fb4 <HAL_DMA_IRQHandler+0x454>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d038      	beq.n	8003f08 <HAL_DMA_IRQHandler+0x3a8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a47      	ldr	r2, [pc, #284]	; (8003fb8 <HAL_DMA_IRQHandler+0x458>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d030      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x3a2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <HAL_DMA_IRQHandler+0x45c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d028      	beq.n	8003efc <HAL_DMA_IRQHandler+0x39c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <HAL_DMA_IRQHandler+0x444>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d020      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x396>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a41      	ldr	r2, [pc, #260]	; (8003fc0 <HAL_DMA_IRQHandler+0x460>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d019      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x392>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a40      	ldr	r2, [pc, #256]	; (8003fc4 <HAL_DMA_IRQHandler+0x464>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d012      	beq.n	8003eee <HAL_DMA_IRQHandler+0x38e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3e      	ldr	r2, [pc, #248]	; (8003fc8 <HAL_DMA_IRQHandler+0x468>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x388>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a3d      	ldr	r2, [pc, #244]	; (8003fcc <HAL_DMA_IRQHandler+0x46c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d102      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x382>
 8003edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee0:	e01b      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee6:	e018      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eec:	e015      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003eee:	2320      	movs	r3, #32
 8003ef0:	e013      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e011      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003efa:	e00e      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003efc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f00:	e00b      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f06:	e008      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f0c:	e005      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f12:	e002      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003f14:	2320      	movs	r3, #32
 8003f16:	e000      	b.n	8003f1a <HAL_DMA_IRQHandler+0x3ba>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	4a2e      	ldr	r2, [pc, #184]	; (8003fd4 <HAL_DMA_IRQHandler+0x474>)
 8003f1c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d034      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f36:	e02f      	b.n	8003f98 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d028      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x43a>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d023      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 020e 	bic.w	r2, r2, #14
 8003f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
    }
  }
  return;
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
}
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40020080 	.word	0x40020080
 8003fa8:	40020008 	.word	0x40020008
 8003fac:	4002001c 	.word	0x4002001c
 8003fb0:	40020030 	.word	0x40020030
 8003fb4:	40020044 	.word	0x40020044
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	4002006c 	.word	0x4002006c
 8003fc0:	40020408 	.word	0x40020408
 8003fc4:	4002041c 	.word	0x4002041c
 8003fc8:	40020430 	.word	0x40020430
 8003fcc:	40020444 	.word	0x40020444
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	40020000 	.word	0x40020000

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b08b      	sub	sp, #44	; 0x2c
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fea:	e179      	b.n	80042e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fec:	2201      	movs	r2, #1
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 8168 	bne.w	80042da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4a96      	ldr	r2, [pc, #600]	; (8004268 <HAL_GPIO_Init+0x290>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d05e      	beq.n	80040d2 <HAL_GPIO_Init+0xfa>
 8004014:	4a94      	ldr	r2, [pc, #592]	; (8004268 <HAL_GPIO_Init+0x290>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d875      	bhi.n	8004106 <HAL_GPIO_Init+0x12e>
 800401a:	4a94      	ldr	r2, [pc, #592]	; (800426c <HAL_GPIO_Init+0x294>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d058      	beq.n	80040d2 <HAL_GPIO_Init+0xfa>
 8004020:	4a92      	ldr	r2, [pc, #584]	; (800426c <HAL_GPIO_Init+0x294>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d86f      	bhi.n	8004106 <HAL_GPIO_Init+0x12e>
 8004026:	4a92      	ldr	r2, [pc, #584]	; (8004270 <HAL_GPIO_Init+0x298>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d052      	beq.n	80040d2 <HAL_GPIO_Init+0xfa>
 800402c:	4a90      	ldr	r2, [pc, #576]	; (8004270 <HAL_GPIO_Init+0x298>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d869      	bhi.n	8004106 <HAL_GPIO_Init+0x12e>
 8004032:	4a90      	ldr	r2, [pc, #576]	; (8004274 <HAL_GPIO_Init+0x29c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d04c      	beq.n	80040d2 <HAL_GPIO_Init+0xfa>
 8004038:	4a8e      	ldr	r2, [pc, #568]	; (8004274 <HAL_GPIO_Init+0x29c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d863      	bhi.n	8004106 <HAL_GPIO_Init+0x12e>
 800403e:	4a8e      	ldr	r2, [pc, #568]	; (8004278 <HAL_GPIO_Init+0x2a0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d046      	beq.n	80040d2 <HAL_GPIO_Init+0xfa>
 8004044:	4a8c      	ldr	r2, [pc, #560]	; (8004278 <HAL_GPIO_Init+0x2a0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d85d      	bhi.n	8004106 <HAL_GPIO_Init+0x12e>
 800404a:	2b12      	cmp	r3, #18
 800404c:	d82a      	bhi.n	80040a4 <HAL_GPIO_Init+0xcc>
 800404e:	2b12      	cmp	r3, #18
 8004050:	d859      	bhi.n	8004106 <HAL_GPIO_Init+0x12e>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_GPIO_Init+0x80>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	080040d3 	.word	0x080040d3
 800405c:	080040ad 	.word	0x080040ad
 8004060:	080040bf 	.word	0x080040bf
 8004064:	08004101 	.word	0x08004101
 8004068:	08004107 	.word	0x08004107
 800406c:	08004107 	.word	0x08004107
 8004070:	08004107 	.word	0x08004107
 8004074:	08004107 	.word	0x08004107
 8004078:	08004107 	.word	0x08004107
 800407c:	08004107 	.word	0x08004107
 8004080:	08004107 	.word	0x08004107
 8004084:	08004107 	.word	0x08004107
 8004088:	08004107 	.word	0x08004107
 800408c:	08004107 	.word	0x08004107
 8004090:	08004107 	.word	0x08004107
 8004094:	08004107 	.word	0x08004107
 8004098:	08004107 	.word	0x08004107
 800409c:	080040b5 	.word	0x080040b5
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	4a75      	ldr	r2, [pc, #468]	; (800427c <HAL_GPIO_Init+0x2a4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040aa:	e02c      	b.n	8004106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	623b      	str	r3, [r7, #32]
          break;
 80040b2:	e029      	b.n	8004108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	3304      	adds	r3, #4
 80040ba:	623b      	str	r3, [r7, #32]
          break;
 80040bc:	e024      	b.n	8004108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	3308      	adds	r3, #8
 80040c4:	623b      	str	r3, [r7, #32]
          break;
 80040c6:	e01f      	b.n	8004108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	330c      	adds	r3, #12
 80040ce:	623b      	str	r3, [r7, #32]
          break;
 80040d0:	e01a      	b.n	8004108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040da:	2304      	movs	r3, #4
 80040dc:	623b      	str	r3, [r7, #32]
          break;
 80040de:	e013      	b.n	8004108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040e8:	2308      	movs	r3, #8
 80040ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	611a      	str	r2, [r3, #16]
          break;
 80040f2:	e009      	b.n	8004108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040f4:	2308      	movs	r3, #8
 80040f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	615a      	str	r2, [r3, #20]
          break;
 80040fe:	e003      	b.n	8004108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004100:	2300      	movs	r3, #0
 8004102:	623b      	str	r3, [r7, #32]
          break;
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x130>
          break;
 8004106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2bff      	cmp	r3, #255	; 0xff
 800410c:	d801      	bhi.n	8004112 <HAL_GPIO_Init+0x13a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	e001      	b.n	8004116 <HAL_GPIO_Init+0x13e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2bff      	cmp	r3, #255	; 0xff
 800411c:	d802      	bhi.n	8004124 <HAL_GPIO_Init+0x14c>
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	e002      	b.n	800412a <HAL_GPIO_Init+0x152>
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	3b08      	subs	r3, #8
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	210f      	movs	r1, #15
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	fa01 f303 	lsl.w	r3, r1, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	401a      	ands	r2, r3
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	fa01 f303 	lsl.w	r3, r1, r3
 8004144:	431a      	orrs	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80c1 	beq.w	80042da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004158:	4b49      	ldr	r3, [pc, #292]	; (8004280 <HAL_GPIO_Init+0x2a8>)
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	4a48      	ldr	r2, [pc, #288]	; (8004280 <HAL_GPIO_Init+0x2a8>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	6193      	str	r3, [r2, #24]
 8004164:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_GPIO_Init+0x2a8>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004170:	4a44      	ldr	r2, [pc, #272]	; (8004284 <HAL_GPIO_Init+0x2ac>)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	3302      	adds	r3, #2
 8004178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	220f      	movs	r2, #15
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <HAL_GPIO_Init+0x2b0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d01f      	beq.n	80041dc <HAL_GPIO_Init+0x204>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a3b      	ldr	r2, [pc, #236]	; (800428c <HAL_GPIO_Init+0x2b4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d019      	beq.n	80041d8 <HAL_GPIO_Init+0x200>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <HAL_GPIO_Init+0x2b8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d013      	beq.n	80041d4 <HAL_GPIO_Init+0x1fc>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a39      	ldr	r2, [pc, #228]	; (8004294 <HAL_GPIO_Init+0x2bc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00d      	beq.n	80041d0 <HAL_GPIO_Init+0x1f8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a38      	ldr	r2, [pc, #224]	; (8004298 <HAL_GPIO_Init+0x2c0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d007      	beq.n	80041cc <HAL_GPIO_Init+0x1f4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a37      	ldr	r2, [pc, #220]	; (800429c <HAL_GPIO_Init+0x2c4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_GPIO_Init+0x1f0>
 80041c4:	2305      	movs	r3, #5
 80041c6:	e00a      	b.n	80041de <HAL_GPIO_Init+0x206>
 80041c8:	2306      	movs	r3, #6
 80041ca:	e008      	b.n	80041de <HAL_GPIO_Init+0x206>
 80041cc:	2304      	movs	r3, #4
 80041ce:	e006      	b.n	80041de <HAL_GPIO_Init+0x206>
 80041d0:	2303      	movs	r3, #3
 80041d2:	e004      	b.n	80041de <HAL_GPIO_Init+0x206>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e002      	b.n	80041de <HAL_GPIO_Init+0x206>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <HAL_GPIO_Init+0x206>
 80041dc:	2300      	movs	r3, #0
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	f002 0203 	and.w	r2, r2, #3
 80041e4:	0092      	lsls	r2, r2, #2
 80041e6:	4093      	lsls	r3, r2
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80041ee:	4925      	ldr	r1, [pc, #148]	; (8004284 <HAL_GPIO_Init+0x2ac>)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	3302      	adds	r3, #2
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4924      	ldr	r1, [pc, #144]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	43db      	mvns	r3, r3
 800421e:	4920      	ldr	r1, [pc, #128]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 8004220:	4013      	ands	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d006      	beq.n	800423e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	491a      	ldr	r1, [pc, #104]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
 800423c:	e006      	b.n	800424c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800423e:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	43db      	mvns	r3, r3
 8004246:	4916      	ldr	r1, [pc, #88]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 8004248:	4013      	ands	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d025      	beq.n	80042a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	4910      	ldr	r1, [pc, #64]	; (80042a0 <HAL_GPIO_Init+0x2c8>)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]
 8004264:	e025      	b.n	80042b2 <HAL_GPIO_Init+0x2da>
 8004266:	bf00      	nop
 8004268:	10320000 	.word	0x10320000
 800426c:	10310000 	.word	0x10310000
 8004270:	10220000 	.word	0x10220000
 8004274:	10210000 	.word	0x10210000
 8004278:	10120000 	.word	0x10120000
 800427c:	10110000 	.word	0x10110000
 8004280:	40021000 	.word	0x40021000
 8004284:	40010000 	.word	0x40010000
 8004288:	40010800 	.word	0x40010800
 800428c:	40010c00 	.word	0x40010c00
 8004290:	40011000 	.word	0x40011000
 8004294:	40011400 	.word	0x40011400
 8004298:	40011800 	.word	0x40011800
 800429c:	40011c00 	.word	0x40011c00
 80042a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042a4:	4b15      	ldr	r3, [pc, #84]	; (80042fc <HAL_GPIO_Init+0x324>)
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	4913      	ldr	r1, [pc, #76]	; (80042fc <HAL_GPIO_Init+0x324>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_GPIO_Init+0x324>)
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_GPIO_Init+0x324>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60cb      	str	r3, [r1, #12]
 80042ca:	e006      	b.n	80042da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_GPIO_Init+0x324>)
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	4909      	ldr	r1, [pc, #36]	; (80042fc <HAL_GPIO_Init+0x324>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	3301      	adds	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f ae7e 	bne.w	8003fec <HAL_GPIO_Init+0x14>
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	372c      	adds	r7, #44	; 0x2c
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	40010400 	.word	0x40010400

08004300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e001      	b.n	8004322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	807b      	strh	r3, [r7, #2]
 800433a:	4613      	mov	r3, r2
 800433c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800433e:	787b      	ldrb	r3, [r7, #1]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004344:	887a      	ldrh	r2, [r7, #2]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800434a:	e003      	b.n	8004354 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800434c:	887b      	ldrh	r3, [r7, #2]
 800434e:	041a      	lsls	r2, r3, #16
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	611a      	str	r2, [r3, #16]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004370:	887a      	ldrh	r2, [r7, #2]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4013      	ands	r3, r2
 8004376:	041a      	lsls	r2, r3, #16
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	43d9      	mvns	r1, r3
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	400b      	ands	r3, r1
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e272      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8087 	beq.w	80044be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043b0:	4b92      	ldr	r3, [pc, #584]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d00c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043bc:	4b8f      	ldr	r3, [pc, #572]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d112      	bne.n	80043ee <HAL_RCC_OscConfig+0x5e>
 80043c8:	4b8c      	ldr	r3, [pc, #560]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d10b      	bne.n	80043ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	4b89      	ldr	r3, [pc, #548]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06c      	beq.n	80044bc <HAL_RCC_OscConfig+0x12c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d168      	bne.n	80044bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e24c      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x76>
 80043f8:	4b80      	ldr	r3, [pc, #512]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7f      	ldr	r2, [pc, #508]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e02e      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x98>
 800440e:	4b7b      	ldr	r3, [pc, #492]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a77      	ldr	r2, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e01d      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004430:	d10c      	bne.n	800444c <HAL_RCC_OscConfig+0xbc>
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a71      	ldr	r2, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e00b      	b.n	8004464 <HAL_RCC_OscConfig+0xd4>
 800444c:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a6a      	ldr	r2, [pc, #424]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a67      	ldr	r2, [pc, #412]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 800445e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fe fa48 	bl	8002900 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7fe fa44 	bl	8002900 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	; 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e200      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0xe4>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fe fa34 	bl	8002900 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fe fa30 	bl	8002900 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1ec      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x10c>
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d063      	beq.n	8004592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ca:	4b4c      	ldr	r3, [pc, #304]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044d6:	4b49      	ldr	r3, [pc, #292]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d11c      	bne.n	800451c <HAL_RCC_OscConfig+0x18c>
 80044e2:	4b46      	ldr	r3, [pc, #280]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d116      	bne.n	800451c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_RCC_OscConfig+0x176>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e1c0      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004506:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4939      	ldr	r1, [pc, #228]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	e03a      	b.n	8004592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004524:	4b36      	ldr	r3, [pc, #216]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fe f9e9 	bl	8002900 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004532:	f7fe f9e5 	bl	8002900 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e1a1      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004544:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4927      	ldr	r1, [pc, #156]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]
 8004564:	e015      	b.n	8004592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004566:	4b26      	ldr	r3, [pc, #152]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe f9c8 	bl	8002900 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004574:	f7fe f9c4 	bl	8002900 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e180      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d03a      	beq.n	8004614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d019      	beq.n	80045da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ac:	f7fe f9a8 	bl	8002900 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b4:	f7fe f9a4 	bl	8002900 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e160      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_RCC_OscConfig+0x26c>)
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045d2:	2001      	movs	r0, #1
 80045d4:	f000 fad8 	bl	8004b88 <RCC_Delay>
 80045d8:	e01c      	b.n	8004614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fe f98e 	bl	8002900 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e6:	e00f      	b.n	8004608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fe f98a 	bl	8002900 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d908      	bls.n	8004608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e146      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	42420000 	.word	0x42420000
 8004604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004608:	4b92      	ldr	r3, [pc, #584]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e9      	bne.n	80045e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a6 	beq.w	800476e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004626:	4b8b      	ldr	r3, [pc, #556]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10d      	bne.n	800464e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4a87      	ldr	r2, [pc, #540]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	61d3      	str	r3, [r2, #28]
 800463e:	4b85      	ldr	r3, [pc, #532]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464e:	4b82      	ldr	r3, [pc, #520]	; (8004858 <HAL_RCC_OscConfig+0x4c8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800465a:	4b7f      	ldr	r3, [pc, #508]	; (8004858 <HAL_RCC_OscConfig+0x4c8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a7e      	ldr	r2, [pc, #504]	; (8004858 <HAL_RCC_OscConfig+0x4c8>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004666:	f7fe f94b 	bl	8002900 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fe f947 	bl	8002900 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b64      	cmp	r3, #100	; 0x64
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e103      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	4b75      	ldr	r3, [pc, #468]	; (8004858 <HAL_RCC_OscConfig+0x4c8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x312>
 8004694:	4b6f      	ldr	r3, [pc, #444]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4a6e      	ldr	r2, [pc, #440]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6213      	str	r3, [r2, #32]
 80046a0:	e02d      	b.n	80046fe <HAL_RCC_OscConfig+0x36e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x334>
 80046aa:	4b6a      	ldr	r3, [pc, #424]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4a69      	ldr	r2, [pc, #420]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6213      	str	r3, [r2, #32]
 80046b6:	4b67      	ldr	r3, [pc, #412]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4a66      	ldr	r2, [pc, #408]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	6213      	str	r3, [r2, #32]
 80046c2:	e01c      	b.n	80046fe <HAL_RCC_OscConfig+0x36e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d10c      	bne.n	80046e6 <HAL_RCC_OscConfig+0x356>
 80046cc:	4b61      	ldr	r3, [pc, #388]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4a60      	ldr	r2, [pc, #384]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	6213      	str	r3, [r2, #32]
 80046d8:	4b5e      	ldr	r3, [pc, #376]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4a5d      	ldr	r2, [pc, #372]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6213      	str	r3, [r2, #32]
 80046e4:	e00b      	b.n	80046fe <HAL_RCC_OscConfig+0x36e>
 80046e6:	4b5b      	ldr	r3, [pc, #364]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4a5a      	ldr	r2, [pc, #360]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	6213      	str	r3, [r2, #32]
 80046f2:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4a57      	ldr	r2, [pc, #348]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d015      	beq.n	8004732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fe f8fb 	bl	8002900 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fe f8f7 	bl	8002900 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0b1      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ee      	beq.n	800470e <HAL_RCC_OscConfig+0x37e>
 8004730:	e014      	b.n	800475c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004732:	f7fe f8e5 	bl	8002900 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fe f8e1 	bl	8002900 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e09b      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004750:	4b40      	ldr	r3, [pc, #256]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ee      	bne.n	800473a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a3b      	ldr	r2, [pc, #236]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8087 	beq.w	8004886 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004778:	4b36      	ldr	r3, [pc, #216]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d061      	beq.n	8004848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d146      	bne.n	800481a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478c:	4b33      	ldr	r3, [pc, #204]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fe f8b5 	bl	8002900 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479a:	f7fe f8b1 	bl	8002900 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e06d      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d108      	bne.n	80047d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047c2:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	4921      	ldr	r1, [pc, #132]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a19      	ldr	r1, [r3, #32]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	430b      	orrs	r3, r1
 80047e6:	491b      	ldr	r1, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fe f885 	bl	8002900 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fe f881 	bl	8002900 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e03d      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x46a>
 8004818:	e035      	b.n	8004886 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe f86e 	bl	8002900 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fe f86a 	bl	8002900 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e026      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x498>
 8004846:	e01e      	b.n	8004886 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d107      	bne.n	8004860 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e019      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
 8004854:	40021000 	.word	0x40021000
 8004858:	40007000 	.word	0x40007000
 800485c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCC_OscConfig+0x500>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	429a      	cmp	r2, r3
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d001      	beq.n	8004886 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000

08004894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0d0      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d910      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b67      	ldr	r3, [pc, #412]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	4965      	ldr	r1, [pc, #404]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b63      	ldr	r3, [pc, #396]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0b8      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d020      	beq.n	8004926 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f0:	4b59      	ldr	r3, [pc, #356]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4a58      	ldr	r2, [pc, #352]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80048f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004908:	4b53      	ldr	r3, [pc, #332]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a52      	ldr	r2, [pc, #328]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004912:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004914:	4b50      	ldr	r3, [pc, #320]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	494d      	ldr	r1, [pc, #308]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d040      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d107      	bne.n	800494a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d115      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e07f      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e073      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004962:	4b3d      	ldr	r3, [pc, #244]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e06b      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004972:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4936      	ldr	r1, [pc, #216]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004984:	f7fd ffbc 	bl	8002900 <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498c:	f7fd ffb8 	bl	8002900 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e053      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	4b2d      	ldr	r3, [pc, #180]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 020c 	and.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1eb      	bne.n	800498c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b4:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d210      	bcs.n	80049e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 0207 	bic.w	r2, r3, #7
 80049ca:	4922      	ldr	r1, [pc, #136]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b20      	ldr	r3, [pc, #128]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e032      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4916      	ldr	r1, [pc, #88]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a0e:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	490e      	ldr	r1, [pc, #56]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a22:	f000 f821 	bl	8004a68 <HAL_RCC_GetSysClockFreq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	490a      	ldr	r1, [pc, #40]	; (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	5ccb      	ldrb	r3, [r1, r3]
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x1cc>)
 8004a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCC_ClockConfig+0x1d0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd ff1a 	bl	800287c <HAL_InitTick>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40022000 	.word	0x40022000
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	080067c8 	.word	0x080067c8
 8004a60:	20000000 	.word	0x20000000
 8004a64:	20000004 	.word	0x20000004

08004a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a68:	b490      	push	{r4, r7}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a6e:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xac>)
 8004a70:	1d3c      	adds	r4, r7, #4
 8004a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a78:	f240 2301 	movw	r3, #513	; 0x201
 8004a7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a92:	4b21      	ldr	r3, [pc, #132]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d002      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0x46>
 8004aa6:	e02b      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004aaa:	623b      	str	r3, [r7, #32]
      break;
 8004aac:	e02b      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	0c9b      	lsrs	r3, r3, #18
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	3328      	adds	r3, #40	; 0x28
 8004ab8:	443b      	add	r3, r7
 8004aba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004abe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	0c5b      	lsrs	r3, r3, #17
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	3328      	adds	r3, #40	; 0x28
 8004ad6:	443b      	add	r3, r7
 8004ad8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004adc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ae2:	fb03 f202 	mul.w	r2, r3, r2
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	e004      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	623b      	str	r3, [r7, #32]
      break;
 8004afe:	e002      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b02:	623b      	str	r3, [r7, #32]
      break;
 8004b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b06:	6a3b      	ldr	r3, [r7, #32]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	; 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc90      	pop	{r4, r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	080067b4 	.word	0x080067b4
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	007a1200 	.word	0x007a1200
 8004b20:	003d0900 	.word	0x003d0900

08004b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b28:	4b02      	ldr	r3, [pc, #8]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	20000000 	.word	0x20000000

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b3c:	f7ff fff2 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4903      	ldr	r1, [pc, #12]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	080067d8 	.word	0x080067d8

08004b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b64:	f7ff ffde 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	0adb      	lsrs	r3, r3, #11
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	080067d8 	.word	0x080067d8

08004b88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <RCC_Delay+0x34>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <RCC_Delay+0x38>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0a5b      	lsrs	r3, r3, #9
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ba4:	bf00      	nop
  }
  while (Delay --);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1e5a      	subs	r2, r3, #1
 8004baa:	60fa      	str	r2, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f9      	bne.n	8004ba4 <RCC_Delay+0x1c>
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	10624dd3 	.word	0x10624dd3

08004bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e03f      	b.n	8004c56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd fd8c 	bl	8002708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	; 0x24
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fc85 	bl	8005518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08a      	sub	sp, #40	; 0x28
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d17c      	bne.n	8004d78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_UART_Transmit+0x2c>
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e075      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Transmit+0x3e>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e06e      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2221      	movs	r2, #33	; 0x21
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb2:	f7fd fe25 	bl	8002900 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ccc:	d108      	bne.n	8004ce0 <HAL_UART_Transmit+0x82>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e003      	b.n	8004ce8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cf0:	e02a      	b.n	8004d48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fa38 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e036      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3302      	adds	r3, #2
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	e007      	b.n	8004d3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1cf      	bne.n	8004cf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2140      	movs	r1, #64	; 0x40
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fa08 	bl	8005172 <UART_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e006      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d11d      	bne.n	8004dd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Receive_IT+0x26>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e016      	b.n	8004dda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Receive_IT+0x38>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e00f      	b.n	8004dda <HAL_UART_Receive_IT+0x58>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fa19 	bl	8005206 <UART_Start_Receive_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	e000      	b.n	8004dda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_UART_IRQHandler+0x52>
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fac9 	bl	80053c6 <UART_Receive_IT>
      return;
 8004e34:	e17b      	b.n	800512e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80b1 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x1bc>
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_UART_IRQHandler+0x70>
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80a6 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_UART_IRQHandler+0x90>
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_UART_IRQHandler+0xb0>
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f043 0202 	orr.w	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xd0>
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f043 0204 	orr.w	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00f      	beq.n	8004ede <HAL_UART_IRQHandler+0xfa>
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <HAL_UART_IRQHandler+0xee>
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0208 	orr.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 811e 	beq.w	8005124 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <HAL_UART_IRQHandler+0x11e>
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa62 	bl	80053c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf14      	ite	ne
 8004f10:	2301      	movne	r3, #1
 8004f12:	2300      	moveq	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_UART_IRQHandler+0x146>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d031      	beq.n	8004f8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f9a4 	bl	8005278 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d023      	beq.n	8004f86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d013      	beq.n	8004f7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	4a76      	ldr	r2, [pc, #472]	; (8005134 <HAL_UART_IRQHandler+0x350>)
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fcf4 	bl	8003950 <HAL_DMA_Abort_IT>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	e00e      	b.n	8004f9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f8e3 	bl	800514a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00a      	b.n	8004f9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f8df 	bl	800514a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e006      	b.n	8004f9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8db 	bl	800514a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f9a:	e0c3      	b.n	8005124 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9c:	bf00      	nop
    return;
 8004f9e:	e0c1      	b.n	8005124 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	f040 80a1 	bne.w	80050ec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 809b 	beq.w	80050ec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8095 	beq.w	80050ec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d04e      	beq.n	8005084 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ff0:	8a3b      	ldrh	r3, [r7, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8098 	beq.w	8005128 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ffc:	8a3a      	ldrh	r2, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	f080 8092 	bcs.w	8005128 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8a3a      	ldrh	r2, [r7, #16]
 8005008:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b20      	cmp	r3, #32
 8005012:	d02b      	beq.n	800506c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005022:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695a      	ldr	r2, [r3, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005042:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0210 	bic.w	r2, r2, #16
 8005060:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fc38 	bl	80038dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	b29b      	uxth	r3, r3
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f86d 	bl	800515c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005082:	e051      	b.n	8005128 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800508c:	b29b      	uxth	r3, r3
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d047      	beq.n	800512c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800509c:	8a7b      	ldrh	r3, [r7, #18]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d044      	beq.n	800512c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050b0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0210 	bic.w	r2, r2, #16
 80050de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050e0:	8a7b      	ldrh	r3, [r7, #18]
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f839 	bl	800515c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80050ea:	e01f      	b.n	800512c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_UART_IRQHandler+0x324>
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8f9 	bl	80052f8 <UART_Transmit_IT>
    return;
 8005106:	e012      	b.n	800512e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <HAL_UART_IRQHandler+0x34a>
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f93a 	bl	8005396 <UART_EndTransmit_IT>
    return;
 8005122:	e004      	b.n	800512e <HAL_UART_IRQHandler+0x34a>
    return;
 8005124:	bf00      	nop
 8005126:	e002      	b.n	800512e <HAL_UART_IRQHandler+0x34a>
      return;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <HAL_UART_IRQHandler+0x34a>
      return;
 800512c:	bf00      	nop
  }
}
 800512e:	3728      	adds	r7, #40	; 0x28
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	080052d1 	.word	0x080052d1

08005138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005182:	e02c      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d028      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d007      	beq.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005192:	f7fd fbb5 	bl	8002900 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d21d      	bcs.n	80051de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e00f      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d0c3      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4613      	mov	r3, r2
 8005212:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	88fa      	ldrh	r2, [r7, #6]
 800521e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2222      	movs	r2, #34	; 0x22
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0220 	orr.w	r2, r2, #32
 800526a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800528e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0210 	bic.w	r2, r2, #16
 80052b6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff ff2d 	bl	800514a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b21      	cmp	r3, #33	; 0x21
 800530a:	d13e      	bne.n	800538a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d114      	bne.n	8005340 <UART_Transmit_IT+0x48>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d110      	bne.n	8005340 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005332:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]
 800533e:	e008      	b.n	8005352 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	1c59      	adds	r1, r3, #1
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6211      	str	r1, [r2, #32]
 800534a:	781a      	ldrb	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29b      	uxth	r3, r3
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4619      	mov	r1, r3
 8005360:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005374:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005384:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff febe 	bl	8005138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b086      	sub	sp, #24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b22      	cmp	r3, #34	; 0x22
 80053d8:	f040 8099 	bne.w	800550e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e4:	d117      	bne.n	8005416 <UART_Receive_IT+0x50>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d113      	bne.n	8005416 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	b29a      	uxth	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	1c9a      	adds	r2, r3, #2
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28
 8005414:	e026      	b.n	8005464 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005428:	d007      	beq.n	800543a <UART_Receive_IT+0x74>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <UART_Receive_IT+0x82>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e008      	b.n	800545a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005454:	b2da      	uxtb	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29b      	uxth	r3, r3
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4619      	mov	r1, r3
 8005472:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005474:	2b00      	cmp	r3, #0
 8005476:	d148      	bne.n	800550a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0220 	bic.w	r2, r2, #32
 8005486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d123      	bne.n	8005500 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0210 	bic.w	r2, r2, #16
 80054cc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d10a      	bne.n	80054f2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fe2f 	bl	800515c <HAL_UARTEx_RxEventCallback>
 80054fe:	e002      	b.n	8005506 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fc fde3 	bl	80020cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e002      	b.n	8005510 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005552:	f023 030c 	bic.w	r3, r3, #12
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	430b      	orrs	r3, r1
 800555e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2c      	ldr	r2, [pc, #176]	; (800562c <UART_SetConfig+0x114>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d103      	bne.n	8005588 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005580:	f7ff faee 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	e002      	b.n	800558e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7ff fad6 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 800558c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	4a22      	ldr	r2, [pc, #136]	; (8005630 <UART_SetConfig+0x118>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	0119      	lsls	r1, r3, #4
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c4:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <UART_SetConfig+0x118>)
 80055c6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2064      	movs	r0, #100	; 0x64
 80055ce:	fb00 f303 	mul.w	r3, r0, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <UART_SetConfig+0x118>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e4:	4419      	add	r1, r3
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009a      	lsls	r2, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <UART_SetConfig+0x118>)
 80055fe:	fba3 0302 	umull	r0, r3, r3, r2
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2064      	movs	r0, #100	; 0x64
 8005606:	fb00 f303 	mul.w	r3, r0, r3
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	3332      	adds	r3, #50	; 0x32
 8005610:	4a07      	ldr	r2, [pc, #28]	; (8005630 <UART_SetConfig+0x118>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	f003 020f 	and.w	r2, r3, #15
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	440a      	add	r2, r1
 8005622:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40013800 	.word	0x40013800
 8005630:	51eb851f 	.word	0x51eb851f

08005634 <__errno>:
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <__errno+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000000c 	.word	0x2000000c

08005640 <__libc_init_array>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	2600      	movs	r6, #0
 8005644:	4d0c      	ldr	r5, [pc, #48]	; (8005678 <__libc_init_array+0x38>)
 8005646:	4c0d      	ldr	r4, [pc, #52]	; (800567c <__libc_init_array+0x3c>)
 8005648:	1b64      	subs	r4, r4, r5
 800564a:	10a4      	asrs	r4, r4, #2
 800564c:	42a6      	cmp	r6, r4
 800564e:	d109      	bne.n	8005664 <__libc_init_array+0x24>
 8005650:	f001 f82c 	bl	80066ac <_init>
 8005654:	2600      	movs	r6, #0
 8005656:	4d0a      	ldr	r5, [pc, #40]	; (8005680 <__libc_init_array+0x40>)
 8005658:	4c0a      	ldr	r4, [pc, #40]	; (8005684 <__libc_init_array+0x44>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	42a6      	cmp	r6, r4
 8005660:	d105      	bne.n	800566e <__libc_init_array+0x2e>
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f855 3b04 	ldr.w	r3, [r5], #4
 8005668:	4798      	blx	r3
 800566a:	3601      	adds	r6, #1
 800566c:	e7ee      	b.n	800564c <__libc_init_array+0xc>
 800566e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005672:	4798      	blx	r3
 8005674:	3601      	adds	r6, #1
 8005676:	e7f2      	b.n	800565e <__libc_init_array+0x1e>
 8005678:	08006878 	.word	0x08006878
 800567c:	08006878 	.word	0x08006878
 8005680:	08006878 	.word	0x08006878
 8005684:	0800687c 	.word	0x0800687c

08005688 <memset>:
 8005688:	4603      	mov	r3, r0
 800568a:	4402      	add	r2, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	d100      	bne.n	8005692 <memset+0xa>
 8005690:	4770      	bx	lr
 8005692:	f803 1b01 	strb.w	r1, [r3], #1
 8005696:	e7f9      	b.n	800568c <memset+0x4>

08005698 <iprintf>:
 8005698:	b40f      	push	{r0, r1, r2, r3}
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <iprintf+0x2c>)
 800569c:	b513      	push	{r0, r1, r4, lr}
 800569e:	681c      	ldr	r4, [r3, #0]
 80056a0:	b124      	cbz	r4, 80056ac <iprintf+0x14>
 80056a2:	69a3      	ldr	r3, [r4, #24]
 80056a4:	b913      	cbnz	r3, 80056ac <iprintf+0x14>
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fa5a 	bl	8005b60 <__sinit>
 80056ac:	ab05      	add	r3, sp, #20
 80056ae:	4620      	mov	r0, r4
 80056b0:	9a04      	ldr	r2, [sp, #16]
 80056b2:	68a1      	ldr	r1, [r4, #8]
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	f000 fc5d 	bl	8005f74 <_vfiprintf_r>
 80056ba:	b002      	add	sp, #8
 80056bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c0:	b004      	add	sp, #16
 80056c2:	4770      	bx	lr
 80056c4:	2000000c 	.word	0x2000000c

080056c8 <_puts_r>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	460e      	mov	r6, r1
 80056cc:	4605      	mov	r5, r0
 80056ce:	b118      	cbz	r0, 80056d8 <_puts_r+0x10>
 80056d0:	6983      	ldr	r3, [r0, #24]
 80056d2:	b90b      	cbnz	r3, 80056d8 <_puts_r+0x10>
 80056d4:	f000 fa44 	bl	8005b60 <__sinit>
 80056d8:	69ab      	ldr	r3, [r5, #24]
 80056da:	68ac      	ldr	r4, [r5, #8]
 80056dc:	b913      	cbnz	r3, 80056e4 <_puts_r+0x1c>
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 fa3e 	bl	8005b60 <__sinit>
 80056e4:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <_puts_r+0xd0>)
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d120      	bne.n	800572c <_puts_r+0x64>
 80056ea:	686c      	ldr	r4, [r5, #4]
 80056ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056ee:	07db      	lsls	r3, r3, #31
 80056f0:	d405      	bmi.n	80056fe <_puts_r+0x36>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	0598      	lsls	r0, r3, #22
 80056f6:	d402      	bmi.n	80056fe <_puts_r+0x36>
 80056f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056fa:	f000 facf 	bl	8005c9c <__retarget_lock_acquire_recursive>
 80056fe:	89a3      	ldrh	r3, [r4, #12]
 8005700:	0719      	lsls	r1, r3, #28
 8005702:	d51d      	bpl.n	8005740 <_puts_r+0x78>
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	b1db      	cbz	r3, 8005740 <_puts_r+0x78>
 8005708:	3e01      	subs	r6, #1
 800570a:	68a3      	ldr	r3, [r4, #8]
 800570c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005710:	3b01      	subs	r3, #1
 8005712:	60a3      	str	r3, [r4, #8]
 8005714:	bb39      	cbnz	r1, 8005766 <_puts_r+0x9e>
 8005716:	2b00      	cmp	r3, #0
 8005718:	da38      	bge.n	800578c <_puts_r+0xc4>
 800571a:	4622      	mov	r2, r4
 800571c:	210a      	movs	r1, #10
 800571e:	4628      	mov	r0, r5
 8005720:	f000 f848 	bl	80057b4 <__swbuf_r>
 8005724:	3001      	adds	r0, #1
 8005726:	d011      	beq.n	800574c <_puts_r+0x84>
 8005728:	250a      	movs	r5, #10
 800572a:	e011      	b.n	8005750 <_puts_r+0x88>
 800572c:	4b1b      	ldr	r3, [pc, #108]	; (800579c <_puts_r+0xd4>)
 800572e:	429c      	cmp	r4, r3
 8005730:	d101      	bne.n	8005736 <_puts_r+0x6e>
 8005732:	68ac      	ldr	r4, [r5, #8]
 8005734:	e7da      	b.n	80056ec <_puts_r+0x24>
 8005736:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <_puts_r+0xd8>)
 8005738:	429c      	cmp	r4, r3
 800573a:	bf08      	it	eq
 800573c:	68ec      	ldreq	r4, [r5, #12]
 800573e:	e7d5      	b.n	80056ec <_puts_r+0x24>
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	f000 f888 	bl	8005858 <__swsetup_r>
 8005748:	2800      	cmp	r0, #0
 800574a:	d0dd      	beq.n	8005708 <_puts_r+0x40>
 800574c:	f04f 35ff 	mov.w	r5, #4294967295
 8005750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005752:	07da      	lsls	r2, r3, #31
 8005754:	d405      	bmi.n	8005762 <_puts_r+0x9a>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	059b      	lsls	r3, r3, #22
 800575a:	d402      	bmi.n	8005762 <_puts_r+0x9a>
 800575c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575e:	f000 fa9e 	bl	8005c9e <__retarget_lock_release_recursive>
 8005762:	4628      	mov	r0, r5
 8005764:	bd70      	pop	{r4, r5, r6, pc}
 8005766:	2b00      	cmp	r3, #0
 8005768:	da04      	bge.n	8005774 <_puts_r+0xac>
 800576a:	69a2      	ldr	r2, [r4, #24]
 800576c:	429a      	cmp	r2, r3
 800576e:	dc06      	bgt.n	800577e <_puts_r+0xb6>
 8005770:	290a      	cmp	r1, #10
 8005772:	d004      	beq.n	800577e <_puts_r+0xb6>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	6022      	str	r2, [r4, #0]
 800577a:	7019      	strb	r1, [r3, #0]
 800577c:	e7c5      	b.n	800570a <_puts_r+0x42>
 800577e:	4622      	mov	r2, r4
 8005780:	4628      	mov	r0, r5
 8005782:	f000 f817 	bl	80057b4 <__swbuf_r>
 8005786:	3001      	adds	r0, #1
 8005788:	d1bf      	bne.n	800570a <_puts_r+0x42>
 800578a:	e7df      	b.n	800574c <_puts_r+0x84>
 800578c:	250a      	movs	r5, #10
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	6022      	str	r2, [r4, #0]
 8005794:	701d      	strb	r5, [r3, #0]
 8005796:	e7db      	b.n	8005750 <_puts_r+0x88>
 8005798:	08006804 	.word	0x08006804
 800579c:	08006824 	.word	0x08006824
 80057a0:	080067e4 	.word	0x080067e4

080057a4 <puts>:
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <puts+0xc>)
 80057a6:	4601      	mov	r1, r0
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	f7ff bf8d 	b.w	80056c8 <_puts_r>
 80057ae:	bf00      	nop
 80057b0:	2000000c 	.word	0x2000000c

080057b4 <__swbuf_r>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	460e      	mov	r6, r1
 80057b8:	4614      	mov	r4, r2
 80057ba:	4605      	mov	r5, r0
 80057bc:	b118      	cbz	r0, 80057c6 <__swbuf_r+0x12>
 80057be:	6983      	ldr	r3, [r0, #24]
 80057c0:	b90b      	cbnz	r3, 80057c6 <__swbuf_r+0x12>
 80057c2:	f000 f9cd 	bl	8005b60 <__sinit>
 80057c6:	4b21      	ldr	r3, [pc, #132]	; (800584c <__swbuf_r+0x98>)
 80057c8:	429c      	cmp	r4, r3
 80057ca:	d12b      	bne.n	8005824 <__swbuf_r+0x70>
 80057cc:	686c      	ldr	r4, [r5, #4]
 80057ce:	69a3      	ldr	r3, [r4, #24]
 80057d0:	60a3      	str	r3, [r4, #8]
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	071a      	lsls	r2, r3, #28
 80057d6:	d52f      	bpl.n	8005838 <__swbuf_r+0x84>
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	b36b      	cbz	r3, 8005838 <__swbuf_r+0x84>
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	6820      	ldr	r0, [r4, #0]
 80057e0:	b2f6      	uxtb	r6, r6
 80057e2:	1ac0      	subs	r0, r0, r3
 80057e4:	6963      	ldr	r3, [r4, #20]
 80057e6:	4637      	mov	r7, r6
 80057e8:	4283      	cmp	r3, r0
 80057ea:	dc04      	bgt.n	80057f6 <__swbuf_r+0x42>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 f922 	bl	8005a38 <_fflush_r>
 80057f4:	bb30      	cbnz	r0, 8005844 <__swbuf_r+0x90>
 80057f6:	68a3      	ldr	r3, [r4, #8]
 80057f8:	3001      	adds	r0, #1
 80057fa:	3b01      	subs	r3, #1
 80057fc:	60a3      	str	r3, [r4, #8]
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	6022      	str	r2, [r4, #0]
 8005804:	701e      	strb	r6, [r3, #0]
 8005806:	6963      	ldr	r3, [r4, #20]
 8005808:	4283      	cmp	r3, r0
 800580a:	d004      	beq.n	8005816 <__swbuf_r+0x62>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	07db      	lsls	r3, r3, #31
 8005810:	d506      	bpl.n	8005820 <__swbuf_r+0x6c>
 8005812:	2e0a      	cmp	r6, #10
 8005814:	d104      	bne.n	8005820 <__swbuf_r+0x6c>
 8005816:	4621      	mov	r1, r4
 8005818:	4628      	mov	r0, r5
 800581a:	f000 f90d 	bl	8005a38 <_fflush_r>
 800581e:	b988      	cbnz	r0, 8005844 <__swbuf_r+0x90>
 8005820:	4638      	mov	r0, r7
 8005822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <__swbuf_r+0x9c>)
 8005826:	429c      	cmp	r4, r3
 8005828:	d101      	bne.n	800582e <__swbuf_r+0x7a>
 800582a:	68ac      	ldr	r4, [r5, #8]
 800582c:	e7cf      	b.n	80057ce <__swbuf_r+0x1a>
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <__swbuf_r+0xa0>)
 8005830:	429c      	cmp	r4, r3
 8005832:	bf08      	it	eq
 8005834:	68ec      	ldreq	r4, [r5, #12]
 8005836:	e7ca      	b.n	80057ce <__swbuf_r+0x1a>
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f80c 	bl	8005858 <__swsetup_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	d0cb      	beq.n	80057dc <__swbuf_r+0x28>
 8005844:	f04f 37ff 	mov.w	r7, #4294967295
 8005848:	e7ea      	b.n	8005820 <__swbuf_r+0x6c>
 800584a:	bf00      	nop
 800584c:	08006804 	.word	0x08006804
 8005850:	08006824 	.word	0x08006824
 8005854:	080067e4 	.word	0x080067e4

08005858 <__swsetup_r>:
 8005858:	4b32      	ldr	r3, [pc, #200]	; (8005924 <__swsetup_r+0xcc>)
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	4606      	mov	r6, r0
 8005860:	460c      	mov	r4, r1
 8005862:	b125      	cbz	r5, 800586e <__swsetup_r+0x16>
 8005864:	69ab      	ldr	r3, [r5, #24]
 8005866:	b913      	cbnz	r3, 800586e <__swsetup_r+0x16>
 8005868:	4628      	mov	r0, r5
 800586a:	f000 f979 	bl	8005b60 <__sinit>
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <__swsetup_r+0xd0>)
 8005870:	429c      	cmp	r4, r3
 8005872:	d10f      	bne.n	8005894 <__swsetup_r+0x3c>
 8005874:	686c      	ldr	r4, [r5, #4]
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800587c:	0719      	lsls	r1, r3, #28
 800587e:	d42c      	bmi.n	80058da <__swsetup_r+0x82>
 8005880:	06dd      	lsls	r5, r3, #27
 8005882:	d411      	bmi.n	80058a8 <__swsetup_r+0x50>
 8005884:	2309      	movs	r3, #9
 8005886:	6033      	str	r3, [r6, #0]
 8005888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	e03e      	b.n	8005912 <__swsetup_r+0xba>
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <__swsetup_r+0xd4>)
 8005896:	429c      	cmp	r4, r3
 8005898:	d101      	bne.n	800589e <__swsetup_r+0x46>
 800589a:	68ac      	ldr	r4, [r5, #8]
 800589c:	e7eb      	b.n	8005876 <__swsetup_r+0x1e>
 800589e:	4b24      	ldr	r3, [pc, #144]	; (8005930 <__swsetup_r+0xd8>)
 80058a0:	429c      	cmp	r4, r3
 80058a2:	bf08      	it	eq
 80058a4:	68ec      	ldreq	r4, [r5, #12]
 80058a6:	e7e6      	b.n	8005876 <__swsetup_r+0x1e>
 80058a8:	0758      	lsls	r0, r3, #29
 80058aa:	d512      	bpl.n	80058d2 <__swsetup_r+0x7a>
 80058ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ae:	b141      	cbz	r1, 80058c2 <__swsetup_r+0x6a>
 80058b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b4:	4299      	cmp	r1, r3
 80058b6:	d002      	beq.n	80058be <__swsetup_r+0x66>
 80058b8:	4630      	mov	r0, r6
 80058ba:	f000 fa57 	bl	8005d6c <_free_r>
 80058be:	2300      	movs	r3, #0
 80058c0:	6363      	str	r3, [r4, #52]	; 0x34
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	2300      	movs	r3, #0
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	f043 0308 	orr.w	r3, r3, #8
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	b94b      	cbnz	r3, 80058f2 <__swsetup_r+0x9a>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e8:	d003      	beq.n	80058f2 <__swsetup_r+0x9a>
 80058ea:	4621      	mov	r1, r4
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 f9fd 	bl	8005cec <__smakebuf_r>
 80058f2:	89a0      	ldrh	r0, [r4, #12]
 80058f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058f8:	f010 0301 	ands.w	r3, r0, #1
 80058fc:	d00a      	beq.n	8005914 <__swsetup_r+0xbc>
 80058fe:	2300      	movs	r3, #0
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	6963      	ldr	r3, [r4, #20]
 8005904:	425b      	negs	r3, r3
 8005906:	61a3      	str	r3, [r4, #24]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b943      	cbnz	r3, 800591e <__swsetup_r+0xc6>
 800590c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005910:	d1ba      	bne.n	8005888 <__swsetup_r+0x30>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	0781      	lsls	r1, r0, #30
 8005916:	bf58      	it	pl
 8005918:	6963      	ldrpl	r3, [r4, #20]
 800591a:	60a3      	str	r3, [r4, #8]
 800591c:	e7f4      	b.n	8005908 <__swsetup_r+0xb0>
 800591e:	2000      	movs	r0, #0
 8005920:	e7f7      	b.n	8005912 <__swsetup_r+0xba>
 8005922:	bf00      	nop
 8005924:	2000000c 	.word	0x2000000c
 8005928:	08006804 	.word	0x08006804
 800592c:	08006824 	.word	0x08006824
 8005930:	080067e4 	.word	0x080067e4

08005934 <__sflush_r>:
 8005934:	898a      	ldrh	r2, [r1, #12]
 8005936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005938:	4605      	mov	r5, r0
 800593a:	0710      	lsls	r0, r2, #28
 800593c:	460c      	mov	r4, r1
 800593e:	d457      	bmi.n	80059f0 <__sflush_r+0xbc>
 8005940:	684b      	ldr	r3, [r1, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	dc04      	bgt.n	8005950 <__sflush_r+0x1c>
 8005946:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	dc01      	bgt.n	8005950 <__sflush_r+0x1c>
 800594c:	2000      	movs	r0, #0
 800594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005952:	2e00      	cmp	r6, #0
 8005954:	d0fa      	beq.n	800594c <__sflush_r+0x18>
 8005956:	2300      	movs	r3, #0
 8005958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800595c:	682f      	ldr	r7, [r5, #0]
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	d032      	beq.n	80059c8 <__sflush_r+0x94>
 8005962:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	075a      	lsls	r2, r3, #29
 8005968:	d505      	bpl.n	8005976 <__sflush_r+0x42>
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	1ac0      	subs	r0, r0, r3
 800596e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005970:	b10b      	cbz	r3, 8005976 <__sflush_r+0x42>
 8005972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005974:	1ac0      	subs	r0, r0, r3
 8005976:	2300      	movs	r3, #0
 8005978:	4602      	mov	r2, r0
 800597a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800597c:	4628      	mov	r0, r5
 800597e:	6a21      	ldr	r1, [r4, #32]
 8005980:	47b0      	blx	r6
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	d106      	bne.n	8005996 <__sflush_r+0x62>
 8005988:	6829      	ldr	r1, [r5, #0]
 800598a:	291d      	cmp	r1, #29
 800598c:	d82c      	bhi.n	80059e8 <__sflush_r+0xb4>
 800598e:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <__sflush_r+0x100>)
 8005990:	40ca      	lsrs	r2, r1
 8005992:	07d6      	lsls	r6, r2, #31
 8005994:	d528      	bpl.n	80059e8 <__sflush_r+0xb4>
 8005996:	2200      	movs	r2, #0
 8005998:	6062      	str	r2, [r4, #4]
 800599a:	6922      	ldr	r2, [r4, #16]
 800599c:	04d9      	lsls	r1, r3, #19
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	d504      	bpl.n	80059ac <__sflush_r+0x78>
 80059a2:	1c42      	adds	r2, r0, #1
 80059a4:	d101      	bne.n	80059aa <__sflush_r+0x76>
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	b903      	cbnz	r3, 80059ac <__sflush_r+0x78>
 80059aa:	6560      	str	r0, [r4, #84]	; 0x54
 80059ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059ae:	602f      	str	r7, [r5, #0]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d0cb      	beq.n	800594c <__sflush_r+0x18>
 80059b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059b8:	4299      	cmp	r1, r3
 80059ba:	d002      	beq.n	80059c2 <__sflush_r+0x8e>
 80059bc:	4628      	mov	r0, r5
 80059be:	f000 f9d5 	bl	8005d6c <_free_r>
 80059c2:	2000      	movs	r0, #0
 80059c4:	6360      	str	r0, [r4, #52]	; 0x34
 80059c6:	e7c2      	b.n	800594e <__sflush_r+0x1a>
 80059c8:	6a21      	ldr	r1, [r4, #32]
 80059ca:	2301      	movs	r3, #1
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b0      	blx	r6
 80059d0:	1c41      	adds	r1, r0, #1
 80059d2:	d1c7      	bne.n	8005964 <__sflush_r+0x30>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0c4      	beq.n	8005964 <__sflush_r+0x30>
 80059da:	2b1d      	cmp	r3, #29
 80059dc:	d001      	beq.n	80059e2 <__sflush_r+0xae>
 80059de:	2b16      	cmp	r3, #22
 80059e0:	d101      	bne.n	80059e6 <__sflush_r+0xb2>
 80059e2:	602f      	str	r7, [r5, #0]
 80059e4:	e7b2      	b.n	800594c <__sflush_r+0x18>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	e7ae      	b.n	800594e <__sflush_r+0x1a>
 80059f0:	690f      	ldr	r7, [r1, #16]
 80059f2:	2f00      	cmp	r7, #0
 80059f4:	d0aa      	beq.n	800594c <__sflush_r+0x18>
 80059f6:	0793      	lsls	r3, r2, #30
 80059f8:	bf18      	it	ne
 80059fa:	2300      	movne	r3, #0
 80059fc:	680e      	ldr	r6, [r1, #0]
 80059fe:	bf08      	it	eq
 8005a00:	694b      	ldreq	r3, [r1, #20]
 8005a02:	1bf6      	subs	r6, r6, r7
 8005a04:	600f      	str	r7, [r1, #0]
 8005a06:	608b      	str	r3, [r1, #8]
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	dd9f      	ble.n	800594c <__sflush_r+0x18>
 8005a0c:	4633      	mov	r3, r6
 8005a0e:	463a      	mov	r2, r7
 8005a10:	4628      	mov	r0, r5
 8005a12:	6a21      	ldr	r1, [r4, #32]
 8005a14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a18:	47e0      	blx	ip
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	dc06      	bgt.n	8005a2c <__sflush_r+0xf8>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	e790      	b.n	800594e <__sflush_r+0x1a>
 8005a2c:	4407      	add	r7, r0
 8005a2e:	1a36      	subs	r6, r6, r0
 8005a30:	e7ea      	b.n	8005a08 <__sflush_r+0xd4>
 8005a32:	bf00      	nop
 8005a34:	20400001 	.word	0x20400001

08005a38 <_fflush_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	690b      	ldr	r3, [r1, #16]
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	b913      	cbnz	r3, 8005a48 <_fflush_r+0x10>
 8005a42:	2500      	movs	r5, #0
 8005a44:	4628      	mov	r0, r5
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	b118      	cbz	r0, 8005a52 <_fflush_r+0x1a>
 8005a4a:	6983      	ldr	r3, [r0, #24]
 8005a4c:	b90b      	cbnz	r3, 8005a52 <_fflush_r+0x1a>
 8005a4e:	f000 f887 	bl	8005b60 <__sinit>
 8005a52:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <_fflush_r+0x6c>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d11b      	bne.n	8005a90 <_fflush_r+0x58>
 8005a58:	686c      	ldr	r4, [r5, #4]
 8005a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0ef      	beq.n	8005a42 <_fflush_r+0xa>
 8005a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a64:	07d0      	lsls	r0, r2, #31
 8005a66:	d404      	bmi.n	8005a72 <_fflush_r+0x3a>
 8005a68:	0599      	lsls	r1, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_fflush_r+0x3a>
 8005a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6e:	f000 f915 	bl	8005c9c <__retarget_lock_acquire_recursive>
 8005a72:	4628      	mov	r0, r5
 8005a74:	4621      	mov	r1, r4
 8005a76:	f7ff ff5d 	bl	8005934 <__sflush_r>
 8005a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	07da      	lsls	r2, r3, #31
 8005a80:	d4e0      	bmi.n	8005a44 <_fflush_r+0xc>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d4dd      	bmi.n	8005a44 <_fflush_r+0xc>
 8005a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a8a:	f000 f908 	bl	8005c9e <__retarget_lock_release_recursive>
 8005a8e:	e7d9      	b.n	8005a44 <_fflush_r+0xc>
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <_fflush_r+0x70>)
 8005a92:	429c      	cmp	r4, r3
 8005a94:	d101      	bne.n	8005a9a <_fflush_r+0x62>
 8005a96:	68ac      	ldr	r4, [r5, #8]
 8005a98:	e7df      	b.n	8005a5a <_fflush_r+0x22>
 8005a9a:	4b04      	ldr	r3, [pc, #16]	; (8005aac <_fflush_r+0x74>)
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	bf08      	it	eq
 8005aa0:	68ec      	ldreq	r4, [r5, #12]
 8005aa2:	e7da      	b.n	8005a5a <_fflush_r+0x22>
 8005aa4:	08006804 	.word	0x08006804
 8005aa8:	08006824 	.word	0x08006824
 8005aac:	080067e4 	.word	0x080067e4

08005ab0 <std>:
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8005aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005abe:	6083      	str	r3, [r0, #8]
 8005ac0:	8181      	strh	r1, [r0, #12]
 8005ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ac4:	81c2      	strh	r2, [r0, #14]
 8005ac6:	6183      	str	r3, [r0, #24]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	2208      	movs	r2, #8
 8005acc:	305c      	adds	r0, #92	; 0x5c
 8005ace:	f7ff fddb 	bl	8005688 <memset>
 8005ad2:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <std+0x38>)
 8005ad4:	6224      	str	r4, [r4, #32]
 8005ad6:	6263      	str	r3, [r4, #36]	; 0x24
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <std+0x3c>)
 8005ada:	62a3      	str	r3, [r4, #40]	; 0x28
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <std+0x40>)
 8005ade:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <std+0x44>)
 8005ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ae4:	bd10      	pop	{r4, pc}
 8005ae6:	bf00      	nop
 8005ae8:	08006521 	.word	0x08006521
 8005aec:	08006543 	.word	0x08006543
 8005af0:	0800657b 	.word	0x0800657b
 8005af4:	0800659f 	.word	0x0800659f

08005af8 <_cleanup_r>:
 8005af8:	4901      	ldr	r1, [pc, #4]	; (8005b00 <_cleanup_r+0x8>)
 8005afa:	f000 b8af 	b.w	8005c5c <_fwalk_reent>
 8005afe:	bf00      	nop
 8005b00:	08005a39 	.word	0x08005a39

08005b04 <__sfmoreglue>:
 8005b04:	2268      	movs	r2, #104	; 0x68
 8005b06:	b570      	push	{r4, r5, r6, lr}
 8005b08:	1e4d      	subs	r5, r1, #1
 8005b0a:	4355      	muls	r5, r2
 8005b0c:	460e      	mov	r6, r1
 8005b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b12:	f000 f993 	bl	8005e3c <_malloc_r>
 8005b16:	4604      	mov	r4, r0
 8005b18:	b140      	cbz	r0, 8005b2c <__sfmoreglue+0x28>
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	e9c0 1600 	strd	r1, r6, [r0]
 8005b20:	300c      	adds	r0, #12
 8005b22:	60a0      	str	r0, [r4, #8]
 8005b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b28:	f7ff fdae 	bl	8005688 <memset>
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}

08005b30 <__sfp_lock_acquire>:
 8005b30:	4801      	ldr	r0, [pc, #4]	; (8005b38 <__sfp_lock_acquire+0x8>)
 8005b32:	f000 b8b3 	b.w	8005c9c <__retarget_lock_acquire_recursive>
 8005b36:	bf00      	nop
 8005b38:	20000225 	.word	0x20000225

08005b3c <__sfp_lock_release>:
 8005b3c:	4801      	ldr	r0, [pc, #4]	; (8005b44 <__sfp_lock_release+0x8>)
 8005b3e:	f000 b8ae 	b.w	8005c9e <__retarget_lock_release_recursive>
 8005b42:	bf00      	nop
 8005b44:	20000225 	.word	0x20000225

08005b48 <__sinit_lock_acquire>:
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <__sinit_lock_acquire+0x8>)
 8005b4a:	f000 b8a7 	b.w	8005c9c <__retarget_lock_acquire_recursive>
 8005b4e:	bf00      	nop
 8005b50:	20000226 	.word	0x20000226

08005b54 <__sinit_lock_release>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__sinit_lock_release+0x8>)
 8005b56:	f000 b8a2 	b.w	8005c9e <__retarget_lock_release_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	20000226 	.word	0x20000226

08005b60 <__sinit>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	4604      	mov	r4, r0
 8005b64:	f7ff fff0 	bl	8005b48 <__sinit_lock_acquire>
 8005b68:	69a3      	ldr	r3, [r4, #24]
 8005b6a:	b11b      	cbz	r3, 8005b74 <__sinit+0x14>
 8005b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b70:	f7ff bff0 	b.w	8005b54 <__sinit_lock_release>
 8005b74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b78:	6523      	str	r3, [r4, #80]	; 0x50
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <__sinit+0x68>)
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <__sinit+0x6c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	bf08      	it	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bf08      	it	eq
 8005b8c:	61a3      	streq	r3, [r4, #24]
 8005b8e:	f000 f81f 	bl	8005bd0 <__sfp>
 8005b92:	6060      	str	r0, [r4, #4]
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 f81b 	bl	8005bd0 <__sfp>
 8005b9a:	60a0      	str	r0, [r4, #8]
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 f817 	bl	8005bd0 <__sfp>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	60e0      	str	r0, [r4, #12]
 8005ba8:	6860      	ldr	r0, [r4, #4]
 8005baa:	f7ff ff81 	bl	8005ab0 <std>
 8005bae:	2201      	movs	r2, #1
 8005bb0:	2109      	movs	r1, #9
 8005bb2:	68a0      	ldr	r0, [r4, #8]
 8005bb4:	f7ff ff7c 	bl	8005ab0 <std>
 8005bb8:	2202      	movs	r2, #2
 8005bba:	2112      	movs	r1, #18
 8005bbc:	68e0      	ldr	r0, [r4, #12]
 8005bbe:	f7ff ff77 	bl	8005ab0 <std>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	61a3      	str	r3, [r4, #24]
 8005bc6:	e7d1      	b.n	8005b6c <__sinit+0xc>
 8005bc8:	080067e0 	.word	0x080067e0
 8005bcc:	08005af9 	.word	0x08005af9

08005bd0 <__sfp>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	4607      	mov	r7, r0
 8005bd4:	f7ff ffac 	bl	8005b30 <__sfp_lock_acquire>
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <__sfp+0x84>)
 8005bda:	681e      	ldr	r6, [r3, #0]
 8005bdc:	69b3      	ldr	r3, [r6, #24]
 8005bde:	b913      	cbnz	r3, 8005be6 <__sfp+0x16>
 8005be0:	4630      	mov	r0, r6
 8005be2:	f7ff ffbd 	bl	8005b60 <__sinit>
 8005be6:	3648      	adds	r6, #72	; 0x48
 8005be8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	d503      	bpl.n	8005bf8 <__sfp+0x28>
 8005bf0:	6833      	ldr	r3, [r6, #0]
 8005bf2:	b30b      	cbz	r3, 8005c38 <__sfp+0x68>
 8005bf4:	6836      	ldr	r6, [r6, #0]
 8005bf6:	e7f7      	b.n	8005be8 <__sfp+0x18>
 8005bf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bfc:	b9d5      	cbnz	r5, 8005c34 <__sfp+0x64>
 8005bfe:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <__sfp+0x88>)
 8005c00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c04:	60e3      	str	r3, [r4, #12]
 8005c06:	6665      	str	r5, [r4, #100]	; 0x64
 8005c08:	f000 f847 	bl	8005c9a <__retarget_lock_init_recursive>
 8005c0c:	f7ff ff96 	bl	8005b3c <__sfp_lock_release>
 8005c10:	2208      	movs	r2, #8
 8005c12:	4629      	mov	r1, r5
 8005c14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c1c:	6025      	str	r5, [r4, #0]
 8005c1e:	61a5      	str	r5, [r4, #24]
 8005c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c24:	f7ff fd30 	bl	8005688 <memset>
 8005c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c30:	4620      	mov	r0, r4
 8005c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c34:	3468      	adds	r4, #104	; 0x68
 8005c36:	e7d9      	b.n	8005bec <__sfp+0x1c>
 8005c38:	2104      	movs	r1, #4
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	f7ff ff62 	bl	8005b04 <__sfmoreglue>
 8005c40:	4604      	mov	r4, r0
 8005c42:	6030      	str	r0, [r6, #0]
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d1d5      	bne.n	8005bf4 <__sfp+0x24>
 8005c48:	f7ff ff78 	bl	8005b3c <__sfp_lock_release>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	e7ee      	b.n	8005c30 <__sfp+0x60>
 8005c52:	bf00      	nop
 8005c54:	080067e0 	.word	0x080067e0
 8005c58:	ffff0001 	.word	0xffff0001

08005c5c <_fwalk_reent>:
 8005c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c60:	4606      	mov	r6, r0
 8005c62:	4688      	mov	r8, r1
 8005c64:	2700      	movs	r7, #0
 8005c66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c6e:	f1b9 0901 	subs.w	r9, r9, #1
 8005c72:	d505      	bpl.n	8005c80 <_fwalk_reent+0x24>
 8005c74:	6824      	ldr	r4, [r4, #0]
 8005c76:	2c00      	cmp	r4, #0
 8005c78:	d1f7      	bne.n	8005c6a <_fwalk_reent+0xe>
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c80:	89ab      	ldrh	r3, [r5, #12]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d907      	bls.n	8005c96 <_fwalk_reent+0x3a>
 8005c86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	d003      	beq.n	8005c96 <_fwalk_reent+0x3a>
 8005c8e:	4629      	mov	r1, r5
 8005c90:	4630      	mov	r0, r6
 8005c92:	47c0      	blx	r8
 8005c94:	4307      	orrs	r7, r0
 8005c96:	3568      	adds	r5, #104	; 0x68
 8005c98:	e7e9      	b.n	8005c6e <_fwalk_reent+0x12>

08005c9a <__retarget_lock_init_recursive>:
 8005c9a:	4770      	bx	lr

08005c9c <__retarget_lock_acquire_recursive>:
 8005c9c:	4770      	bx	lr

08005c9e <__retarget_lock_release_recursive>:
 8005c9e:	4770      	bx	lr

08005ca0 <__swhatbuf_r>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	460e      	mov	r6, r1
 8005ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca8:	4614      	mov	r4, r2
 8005caa:	2900      	cmp	r1, #0
 8005cac:	461d      	mov	r5, r3
 8005cae:	b096      	sub	sp, #88	; 0x58
 8005cb0:	da08      	bge.n	8005cc4 <__swhatbuf_r+0x24>
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	061a      	lsls	r2, r3, #24
 8005cbc:	d410      	bmi.n	8005ce0 <__swhatbuf_r+0x40>
 8005cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc2:	e00e      	b.n	8005ce2 <__swhatbuf_r+0x42>
 8005cc4:	466a      	mov	r2, sp
 8005cc6:	f000 fc91 	bl	80065ec <_fstat_r>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	dbf1      	blt.n	8005cb2 <__swhatbuf_r+0x12>
 8005cce:	9a01      	ldr	r2, [sp, #4]
 8005cd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cd8:	425a      	negs	r2, r3
 8005cda:	415a      	adcs	r2, r3
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	e7ee      	b.n	8005cbe <__swhatbuf_r+0x1e>
 8005ce0:	2340      	movs	r3, #64	; 0x40
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	b016      	add	sp, #88	; 0x58
 8005ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cec <__smakebuf_r>:
 8005cec:	898b      	ldrh	r3, [r1, #12]
 8005cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cf0:	079d      	lsls	r5, r3, #30
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	d507      	bpl.n	8005d08 <__smakebuf_r+0x1c>
 8005cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	2301      	movs	r3, #1
 8005d02:	6163      	str	r3, [r4, #20]
 8005d04:	b002      	add	sp, #8
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	466a      	mov	r2, sp
 8005d0a:	ab01      	add	r3, sp, #4
 8005d0c:	f7ff ffc8 	bl	8005ca0 <__swhatbuf_r>
 8005d10:	9900      	ldr	r1, [sp, #0]
 8005d12:	4605      	mov	r5, r0
 8005d14:	4630      	mov	r0, r6
 8005d16:	f000 f891 	bl	8005e3c <_malloc_r>
 8005d1a:	b948      	cbnz	r0, 8005d30 <__smakebuf_r+0x44>
 8005d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d20:	059a      	lsls	r2, r3, #22
 8005d22:	d4ef      	bmi.n	8005d04 <__smakebuf_r+0x18>
 8005d24:	f023 0303 	bic.w	r3, r3, #3
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	e7e3      	b.n	8005cf8 <__smakebuf_r+0xc>
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <__smakebuf_r+0x7c>)
 8005d32:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	6020      	str	r0, [r4, #0]
 8005d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	9b00      	ldr	r3, [sp, #0]
 8005d40:	6120      	str	r0, [r4, #16]
 8005d42:	6163      	str	r3, [r4, #20]
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	b15b      	cbz	r3, 8005d60 <__smakebuf_r+0x74>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d4e:	f000 fc5f 	bl	8006610 <_isatty_r>
 8005d52:	b128      	cbz	r0, 8005d60 <__smakebuf_r+0x74>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f023 0303 	bic.w	r3, r3, #3
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	89a0      	ldrh	r0, [r4, #12]
 8005d62:	4305      	orrs	r5, r0
 8005d64:	81a5      	strh	r5, [r4, #12]
 8005d66:	e7cd      	b.n	8005d04 <__smakebuf_r+0x18>
 8005d68:	08005af9 	.word	0x08005af9

08005d6c <_free_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4605      	mov	r5, r0
 8005d70:	2900      	cmp	r1, #0
 8005d72:	d040      	beq.n	8005df6 <_free_r+0x8a>
 8005d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d78:	1f0c      	subs	r4, r1, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bfb8      	it	lt
 8005d7e:	18e4      	addlt	r4, r4, r3
 8005d80:	f000 fc76 	bl	8006670 <__malloc_lock>
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <_free_r+0x8c>)
 8005d86:	6813      	ldr	r3, [r2, #0]
 8005d88:	b933      	cbnz	r3, 8005d98 <_free_r+0x2c>
 8005d8a:	6063      	str	r3, [r4, #4]
 8005d8c:	6014      	str	r4, [r2, #0]
 8005d8e:	4628      	mov	r0, r5
 8005d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d94:	f000 bc72 	b.w	800667c <__malloc_unlock>
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	d908      	bls.n	8005dae <_free_r+0x42>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	1821      	adds	r1, r4, r0
 8005da0:	428b      	cmp	r3, r1
 8005da2:	bf01      	itttt	eq
 8005da4:	6819      	ldreq	r1, [r3, #0]
 8005da6:	685b      	ldreq	r3, [r3, #4]
 8005da8:	1809      	addeq	r1, r1, r0
 8005daa:	6021      	streq	r1, [r4, #0]
 8005dac:	e7ed      	b.n	8005d8a <_free_r+0x1e>
 8005dae:	461a      	mov	r2, r3
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	b10b      	cbz	r3, 8005db8 <_free_r+0x4c>
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	d9fa      	bls.n	8005dae <_free_r+0x42>
 8005db8:	6811      	ldr	r1, [r2, #0]
 8005dba:	1850      	adds	r0, r2, r1
 8005dbc:	42a0      	cmp	r0, r4
 8005dbe:	d10b      	bne.n	8005dd8 <_free_r+0x6c>
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	4401      	add	r1, r0
 8005dc4:	1850      	adds	r0, r2, r1
 8005dc6:	4283      	cmp	r3, r0
 8005dc8:	6011      	str	r1, [r2, #0]
 8005dca:	d1e0      	bne.n	8005d8e <_free_r+0x22>
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4401      	add	r1, r0
 8005dd2:	6011      	str	r1, [r2, #0]
 8005dd4:	6053      	str	r3, [r2, #4]
 8005dd6:	e7da      	b.n	8005d8e <_free_r+0x22>
 8005dd8:	d902      	bls.n	8005de0 <_free_r+0x74>
 8005dda:	230c      	movs	r3, #12
 8005ddc:	602b      	str	r3, [r5, #0]
 8005dde:	e7d6      	b.n	8005d8e <_free_r+0x22>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	1821      	adds	r1, r4, r0
 8005de4:	428b      	cmp	r3, r1
 8005de6:	bf01      	itttt	eq
 8005de8:	6819      	ldreq	r1, [r3, #0]
 8005dea:	685b      	ldreq	r3, [r3, #4]
 8005dec:	1809      	addeq	r1, r1, r0
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	6063      	str	r3, [r4, #4]
 8005df2:	6054      	str	r4, [r2, #4]
 8005df4:	e7cb      	b.n	8005d8e <_free_r+0x22>
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20000228 	.word	0x20000228

08005dfc <sbrk_aligned>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4e0e      	ldr	r6, [pc, #56]	; (8005e38 <sbrk_aligned+0x3c>)
 8005e00:	460c      	mov	r4, r1
 8005e02:	6831      	ldr	r1, [r6, #0]
 8005e04:	4605      	mov	r5, r0
 8005e06:	b911      	cbnz	r1, 8005e0e <sbrk_aligned+0x12>
 8005e08:	f000 fb7a 	bl	8006500 <_sbrk_r>
 8005e0c:	6030      	str	r0, [r6, #0]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 fb75 	bl	8006500 <_sbrk_r>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d00a      	beq.n	8005e30 <sbrk_aligned+0x34>
 8005e1a:	1cc4      	adds	r4, r0, #3
 8005e1c:	f024 0403 	bic.w	r4, r4, #3
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d007      	beq.n	8005e34 <sbrk_aligned+0x38>
 8005e24:	1a21      	subs	r1, r4, r0
 8005e26:	4628      	mov	r0, r5
 8005e28:	f000 fb6a 	bl	8006500 <_sbrk_r>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d101      	bne.n	8005e34 <sbrk_aligned+0x38>
 8005e30:	f04f 34ff 	mov.w	r4, #4294967295
 8005e34:	4620      	mov	r0, r4
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	2000022c 	.word	0x2000022c

08005e3c <_malloc_r>:
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	1ccd      	adds	r5, r1, #3
 8005e42:	f025 0503 	bic.w	r5, r5, #3
 8005e46:	3508      	adds	r5, #8
 8005e48:	2d0c      	cmp	r5, #12
 8005e4a:	bf38      	it	cc
 8005e4c:	250c      	movcc	r5, #12
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	4607      	mov	r7, r0
 8005e52:	db01      	blt.n	8005e58 <_malloc_r+0x1c>
 8005e54:	42a9      	cmp	r1, r5
 8005e56:	d905      	bls.n	8005e64 <_malloc_r+0x28>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4630      	mov	r0, r6
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	4e2e      	ldr	r6, [pc, #184]	; (8005f20 <_malloc_r+0xe4>)
 8005e66:	f000 fc03 	bl	8006670 <__malloc_lock>
 8005e6a:	6833      	ldr	r3, [r6, #0]
 8005e6c:	461c      	mov	r4, r3
 8005e6e:	bb34      	cbnz	r4, 8005ebe <_malloc_r+0x82>
 8005e70:	4629      	mov	r1, r5
 8005e72:	4638      	mov	r0, r7
 8005e74:	f7ff ffc2 	bl	8005dfc <sbrk_aligned>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	d14d      	bne.n	8005f1a <_malloc_r+0xde>
 8005e7e:	6834      	ldr	r4, [r6, #0]
 8005e80:	4626      	mov	r6, r4
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	d140      	bne.n	8005f08 <_malloc_r+0xcc>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	eb04 0803 	add.w	r8, r4, r3
 8005e90:	f000 fb36 	bl	8006500 <_sbrk_r>
 8005e94:	4580      	cmp	r8, r0
 8005e96:	d13a      	bne.n	8005f0e <_malloc_r+0xd2>
 8005e98:	6821      	ldr	r1, [r4, #0]
 8005e9a:	3503      	adds	r5, #3
 8005e9c:	1a6d      	subs	r5, r5, r1
 8005e9e:	f025 0503 	bic.w	r5, r5, #3
 8005ea2:	3508      	adds	r5, #8
 8005ea4:	2d0c      	cmp	r5, #12
 8005ea6:	bf38      	it	cc
 8005ea8:	250c      	movcc	r5, #12
 8005eaa:	4638      	mov	r0, r7
 8005eac:	4629      	mov	r1, r5
 8005eae:	f7ff ffa5 	bl	8005dfc <sbrk_aligned>
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d02b      	beq.n	8005f0e <_malloc_r+0xd2>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	442b      	add	r3, r5
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	e00e      	b.n	8005edc <_malloc_r+0xa0>
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	1b52      	subs	r2, r2, r5
 8005ec2:	d41e      	bmi.n	8005f02 <_malloc_r+0xc6>
 8005ec4:	2a0b      	cmp	r2, #11
 8005ec6:	d916      	bls.n	8005ef6 <_malloc_r+0xba>
 8005ec8:	1961      	adds	r1, r4, r5
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	6025      	str	r5, [r4, #0]
 8005ece:	bf18      	it	ne
 8005ed0:	6059      	strne	r1, [r3, #4]
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	bf08      	it	eq
 8005ed6:	6031      	streq	r1, [r6, #0]
 8005ed8:	5162      	str	r2, [r4, r5]
 8005eda:	604b      	str	r3, [r1, #4]
 8005edc:	4638      	mov	r0, r7
 8005ede:	f104 060b 	add.w	r6, r4, #11
 8005ee2:	f000 fbcb 	bl	800667c <__malloc_unlock>
 8005ee6:	f026 0607 	bic.w	r6, r6, #7
 8005eea:	1d23      	adds	r3, r4, #4
 8005eec:	1af2      	subs	r2, r6, r3
 8005eee:	d0b6      	beq.n	8005e5e <_malloc_r+0x22>
 8005ef0:	1b9b      	subs	r3, r3, r6
 8005ef2:	50a3      	str	r3, [r4, r2]
 8005ef4:	e7b3      	b.n	8005e5e <_malloc_r+0x22>
 8005ef6:	6862      	ldr	r2, [r4, #4]
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	bf0c      	ite	eq
 8005efc:	6032      	streq	r2, [r6, #0]
 8005efe:	605a      	strne	r2, [r3, #4]
 8005f00:	e7ec      	b.n	8005edc <_malloc_r+0xa0>
 8005f02:	4623      	mov	r3, r4
 8005f04:	6864      	ldr	r4, [r4, #4]
 8005f06:	e7b2      	b.n	8005e6e <_malloc_r+0x32>
 8005f08:	4634      	mov	r4, r6
 8005f0a:	6876      	ldr	r6, [r6, #4]
 8005f0c:	e7b9      	b.n	8005e82 <_malloc_r+0x46>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	4638      	mov	r0, r7
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	f000 fbb2 	bl	800667c <__malloc_unlock>
 8005f18:	e7a1      	b.n	8005e5e <_malloc_r+0x22>
 8005f1a:	6025      	str	r5, [r4, #0]
 8005f1c:	e7de      	b.n	8005edc <_malloc_r+0xa0>
 8005f1e:	bf00      	nop
 8005f20:	20000228 	.word	0x20000228

08005f24 <__sfputc_r>:
 8005f24:	6893      	ldr	r3, [r2, #8]
 8005f26:	b410      	push	{r4}
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	6093      	str	r3, [r2, #8]
 8005f2e:	da07      	bge.n	8005f40 <__sfputc_r+0x1c>
 8005f30:	6994      	ldr	r4, [r2, #24]
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	db01      	blt.n	8005f3a <__sfputc_r+0x16>
 8005f36:	290a      	cmp	r1, #10
 8005f38:	d102      	bne.n	8005f40 <__sfputc_r+0x1c>
 8005f3a:	bc10      	pop	{r4}
 8005f3c:	f7ff bc3a 	b.w	80057b4 <__swbuf_r>
 8005f40:	6813      	ldr	r3, [r2, #0]
 8005f42:	1c58      	adds	r0, r3, #1
 8005f44:	6010      	str	r0, [r2, #0]
 8005f46:	7019      	strb	r1, [r3, #0]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	bc10      	pop	{r4}
 8005f4c:	4770      	bx	lr

08005f4e <__sfputs_r>:
 8005f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f50:	4606      	mov	r6, r0
 8005f52:	460f      	mov	r7, r1
 8005f54:	4614      	mov	r4, r2
 8005f56:	18d5      	adds	r5, r2, r3
 8005f58:	42ac      	cmp	r4, r5
 8005f5a:	d101      	bne.n	8005f60 <__sfputs_r+0x12>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e007      	b.n	8005f70 <__sfputs_r+0x22>
 8005f60:	463a      	mov	r2, r7
 8005f62:	4630      	mov	r0, r6
 8005f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f68:	f7ff ffdc 	bl	8005f24 <__sfputc_r>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d1f3      	bne.n	8005f58 <__sfputs_r+0xa>
 8005f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f74 <_vfiprintf_r>:
 8005f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f78:	460d      	mov	r5, r1
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	4698      	mov	r8, r3
 8005f7e:	4606      	mov	r6, r0
 8005f80:	b09d      	sub	sp, #116	; 0x74
 8005f82:	b118      	cbz	r0, 8005f8c <_vfiprintf_r+0x18>
 8005f84:	6983      	ldr	r3, [r0, #24]
 8005f86:	b90b      	cbnz	r3, 8005f8c <_vfiprintf_r+0x18>
 8005f88:	f7ff fdea 	bl	8005b60 <__sinit>
 8005f8c:	4b89      	ldr	r3, [pc, #548]	; (80061b4 <_vfiprintf_r+0x240>)
 8005f8e:	429d      	cmp	r5, r3
 8005f90:	d11b      	bne.n	8005fca <_vfiprintf_r+0x56>
 8005f92:	6875      	ldr	r5, [r6, #4]
 8005f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f96:	07d9      	lsls	r1, r3, #31
 8005f98:	d405      	bmi.n	8005fa6 <_vfiprintf_r+0x32>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	059a      	lsls	r2, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_vfiprintf_r+0x32>
 8005fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fa2:	f7ff fe7b 	bl	8005c9c <__retarget_lock_acquire_recursive>
 8005fa6:	89ab      	ldrh	r3, [r5, #12]
 8005fa8:	071b      	lsls	r3, r3, #28
 8005faa:	d501      	bpl.n	8005fb0 <_vfiprintf_r+0x3c>
 8005fac:	692b      	ldr	r3, [r5, #16]
 8005fae:	b9eb      	cbnz	r3, 8005fec <_vfiprintf_r+0x78>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f7ff fc50 	bl	8005858 <__swsetup_r>
 8005fb8:	b1c0      	cbz	r0, 8005fec <_vfiprintf_r+0x78>
 8005fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fbc:	07dc      	lsls	r4, r3, #31
 8005fbe:	d50e      	bpl.n	8005fde <_vfiprintf_r+0x6a>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	b01d      	add	sp, #116	; 0x74
 8005fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fca:	4b7b      	ldr	r3, [pc, #492]	; (80061b8 <_vfiprintf_r+0x244>)
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	d101      	bne.n	8005fd4 <_vfiprintf_r+0x60>
 8005fd0:	68b5      	ldr	r5, [r6, #8]
 8005fd2:	e7df      	b.n	8005f94 <_vfiprintf_r+0x20>
 8005fd4:	4b79      	ldr	r3, [pc, #484]	; (80061bc <_vfiprintf_r+0x248>)
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	bf08      	it	eq
 8005fda:	68f5      	ldreq	r5, [r6, #12]
 8005fdc:	e7da      	b.n	8005f94 <_vfiprintf_r+0x20>
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	0598      	lsls	r0, r3, #22
 8005fe2:	d4ed      	bmi.n	8005fc0 <_vfiprintf_r+0x4c>
 8005fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe6:	f7ff fe5a 	bl	8005c9e <__retarget_lock_release_recursive>
 8005fea:	e7e9      	b.n	8005fc0 <_vfiprintf_r+0x4c>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ff6:	2330      	movs	r3, #48	; 0x30
 8005ff8:	f04f 0901 	mov.w	r9, #1
 8005ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006000:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80061c0 <_vfiprintf_r+0x24c>
 8006004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006008:	4623      	mov	r3, r4
 800600a:	469a      	mov	sl, r3
 800600c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006010:	b10a      	cbz	r2, 8006016 <_vfiprintf_r+0xa2>
 8006012:	2a25      	cmp	r2, #37	; 0x25
 8006014:	d1f9      	bne.n	800600a <_vfiprintf_r+0x96>
 8006016:	ebba 0b04 	subs.w	fp, sl, r4
 800601a:	d00b      	beq.n	8006034 <_vfiprintf_r+0xc0>
 800601c:	465b      	mov	r3, fp
 800601e:	4622      	mov	r2, r4
 8006020:	4629      	mov	r1, r5
 8006022:	4630      	mov	r0, r6
 8006024:	f7ff ff93 	bl	8005f4e <__sfputs_r>
 8006028:	3001      	adds	r0, #1
 800602a:	f000 80aa 	beq.w	8006182 <_vfiprintf_r+0x20e>
 800602e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006030:	445a      	add	r2, fp
 8006032:	9209      	str	r2, [sp, #36]	; 0x24
 8006034:	f89a 3000 	ldrb.w	r3, [sl]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80a2 	beq.w	8006182 <_vfiprintf_r+0x20e>
 800603e:	2300      	movs	r3, #0
 8006040:	f04f 32ff 	mov.w	r2, #4294967295
 8006044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006048:	f10a 0a01 	add.w	sl, sl, #1
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	9307      	str	r3, [sp, #28]
 8006050:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006054:	931a      	str	r3, [sp, #104]	; 0x68
 8006056:	4654      	mov	r4, sl
 8006058:	2205      	movs	r2, #5
 800605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605e:	4858      	ldr	r0, [pc, #352]	; (80061c0 <_vfiprintf_r+0x24c>)
 8006060:	f000 faf8 	bl	8006654 <memchr>
 8006064:	9a04      	ldr	r2, [sp, #16]
 8006066:	b9d8      	cbnz	r0, 80060a0 <_vfiprintf_r+0x12c>
 8006068:	06d1      	lsls	r1, r2, #27
 800606a:	bf44      	itt	mi
 800606c:	2320      	movmi	r3, #32
 800606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006072:	0713      	lsls	r3, r2, #28
 8006074:	bf44      	itt	mi
 8006076:	232b      	movmi	r3, #43	; 0x2b
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800607c:	f89a 3000 	ldrb.w	r3, [sl]
 8006080:	2b2a      	cmp	r3, #42	; 0x2a
 8006082:	d015      	beq.n	80060b0 <_vfiprintf_r+0x13c>
 8006084:	4654      	mov	r4, sl
 8006086:	2000      	movs	r0, #0
 8006088:	f04f 0c0a 	mov.w	ip, #10
 800608c:	9a07      	ldr	r2, [sp, #28]
 800608e:	4621      	mov	r1, r4
 8006090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006094:	3b30      	subs	r3, #48	; 0x30
 8006096:	2b09      	cmp	r3, #9
 8006098:	d94e      	bls.n	8006138 <_vfiprintf_r+0x1c4>
 800609a:	b1b0      	cbz	r0, 80060ca <_vfiprintf_r+0x156>
 800609c:	9207      	str	r2, [sp, #28]
 800609e:	e014      	b.n	80060ca <_vfiprintf_r+0x156>
 80060a0:	eba0 0308 	sub.w	r3, r0, r8
 80060a4:	fa09 f303 	lsl.w	r3, r9, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	46a2      	mov	sl, r4
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	e7d2      	b.n	8006056 <_vfiprintf_r+0xe2>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d19      	adds	r1, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9103      	str	r1, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfbb      	ittet	lt
 80060bc:	425b      	neglt	r3, r3
 80060be:	f042 0202 	orrlt.w	r2, r2, #2
 80060c2:	9307      	strge	r3, [sp, #28]
 80060c4:	9307      	strlt	r3, [sp, #28]
 80060c6:	bfb8      	it	lt
 80060c8:	9204      	strlt	r2, [sp, #16]
 80060ca:	7823      	ldrb	r3, [r4, #0]
 80060cc:	2b2e      	cmp	r3, #46	; 0x2e
 80060ce:	d10c      	bne.n	80060ea <_vfiprintf_r+0x176>
 80060d0:	7863      	ldrb	r3, [r4, #1]
 80060d2:	2b2a      	cmp	r3, #42	; 0x2a
 80060d4:	d135      	bne.n	8006142 <_vfiprintf_r+0x1ce>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3402      	adds	r4, #2
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	9203      	str	r2, [sp, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bfb8      	it	lt
 80060e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80061c4 <_vfiprintf_r+0x250>
 80060ee:	2203      	movs	r2, #3
 80060f0:	4650      	mov	r0, sl
 80060f2:	7821      	ldrb	r1, [r4, #0]
 80060f4:	f000 faae 	bl	8006654 <memchr>
 80060f8:	b140      	cbz	r0, 800610c <_vfiprintf_r+0x198>
 80060fa:	2340      	movs	r3, #64	; 0x40
 80060fc:	eba0 000a 	sub.w	r0, r0, sl
 8006100:	fa03 f000 	lsl.w	r0, r3, r0
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	3401      	adds	r4, #1
 8006108:	4303      	orrs	r3, r0
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006110:	2206      	movs	r2, #6
 8006112:	482d      	ldr	r0, [pc, #180]	; (80061c8 <_vfiprintf_r+0x254>)
 8006114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006118:	f000 fa9c 	bl	8006654 <memchr>
 800611c:	2800      	cmp	r0, #0
 800611e:	d03f      	beq.n	80061a0 <_vfiprintf_r+0x22c>
 8006120:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <_vfiprintf_r+0x258>)
 8006122:	bb1b      	cbnz	r3, 800616c <_vfiprintf_r+0x1f8>
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	3307      	adds	r3, #7
 8006128:	f023 0307 	bic.w	r3, r3, #7
 800612c:	3308      	adds	r3, #8
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006132:	443b      	add	r3, r7
 8006134:	9309      	str	r3, [sp, #36]	; 0x24
 8006136:	e767      	b.n	8006008 <_vfiprintf_r+0x94>
 8006138:	460c      	mov	r4, r1
 800613a:	2001      	movs	r0, #1
 800613c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006140:	e7a5      	b.n	800608e <_vfiprintf_r+0x11a>
 8006142:	2300      	movs	r3, #0
 8006144:	f04f 0c0a 	mov.w	ip, #10
 8006148:	4619      	mov	r1, r3
 800614a:	3401      	adds	r4, #1
 800614c:	9305      	str	r3, [sp, #20]
 800614e:	4620      	mov	r0, r4
 8006150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006154:	3a30      	subs	r2, #48	; 0x30
 8006156:	2a09      	cmp	r2, #9
 8006158:	d903      	bls.n	8006162 <_vfiprintf_r+0x1ee>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0c5      	beq.n	80060ea <_vfiprintf_r+0x176>
 800615e:	9105      	str	r1, [sp, #20]
 8006160:	e7c3      	b.n	80060ea <_vfiprintf_r+0x176>
 8006162:	4604      	mov	r4, r0
 8006164:	2301      	movs	r3, #1
 8006166:	fb0c 2101 	mla	r1, ip, r1, r2
 800616a:	e7f0      	b.n	800614e <_vfiprintf_r+0x1da>
 800616c:	ab03      	add	r3, sp, #12
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	462a      	mov	r2, r5
 8006172:	4630      	mov	r0, r6
 8006174:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <_vfiprintf_r+0x25c>)
 8006176:	a904      	add	r1, sp, #16
 8006178:	f3af 8000 	nop.w
 800617c:	4607      	mov	r7, r0
 800617e:	1c78      	adds	r0, r7, #1
 8006180:	d1d6      	bne.n	8006130 <_vfiprintf_r+0x1bc>
 8006182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006184:	07d9      	lsls	r1, r3, #31
 8006186:	d405      	bmi.n	8006194 <_vfiprintf_r+0x220>
 8006188:	89ab      	ldrh	r3, [r5, #12]
 800618a:	059a      	lsls	r2, r3, #22
 800618c:	d402      	bmi.n	8006194 <_vfiprintf_r+0x220>
 800618e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006190:	f7ff fd85 	bl	8005c9e <__retarget_lock_release_recursive>
 8006194:	89ab      	ldrh	r3, [r5, #12]
 8006196:	065b      	lsls	r3, r3, #25
 8006198:	f53f af12 	bmi.w	8005fc0 <_vfiprintf_r+0x4c>
 800619c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800619e:	e711      	b.n	8005fc4 <_vfiprintf_r+0x50>
 80061a0:	ab03      	add	r3, sp, #12
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	462a      	mov	r2, r5
 80061a6:	4630      	mov	r0, r6
 80061a8:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <_vfiprintf_r+0x25c>)
 80061aa:	a904      	add	r1, sp, #16
 80061ac:	f000 f882 	bl	80062b4 <_printf_i>
 80061b0:	e7e4      	b.n	800617c <_vfiprintf_r+0x208>
 80061b2:	bf00      	nop
 80061b4:	08006804 	.word	0x08006804
 80061b8:	08006824 	.word	0x08006824
 80061bc:	080067e4 	.word	0x080067e4
 80061c0:	08006844 	.word	0x08006844
 80061c4:	0800684a 	.word	0x0800684a
 80061c8:	0800684e 	.word	0x0800684e
 80061cc:	00000000 	.word	0x00000000
 80061d0:	08005f4f 	.word	0x08005f4f

080061d4 <_printf_common>:
 80061d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d8:	4616      	mov	r6, r2
 80061da:	4699      	mov	r9, r3
 80061dc:	688a      	ldr	r2, [r1, #8]
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	4607      	mov	r7, r0
 80061e2:	4293      	cmp	r3, r2
 80061e4:	bfb8      	it	lt
 80061e6:	4613      	movlt	r3, r2
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ee:	460c      	mov	r4, r1
 80061f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061f4:	b10a      	cbz	r2, 80061fa <_printf_common+0x26>
 80061f6:	3301      	adds	r3, #1
 80061f8:	6033      	str	r3, [r6, #0]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	0699      	lsls	r1, r3, #26
 80061fe:	bf42      	ittt	mi
 8006200:	6833      	ldrmi	r3, [r6, #0]
 8006202:	3302      	addmi	r3, #2
 8006204:	6033      	strmi	r3, [r6, #0]
 8006206:	6825      	ldr	r5, [r4, #0]
 8006208:	f015 0506 	ands.w	r5, r5, #6
 800620c:	d106      	bne.n	800621c <_printf_common+0x48>
 800620e:	f104 0a19 	add.w	sl, r4, #25
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	6832      	ldr	r2, [r6, #0]
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	42ab      	cmp	r3, r5
 800621a:	dc28      	bgt.n	800626e <_printf_common+0x9a>
 800621c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006220:	1e13      	subs	r3, r2, #0
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	bf18      	it	ne
 8006226:	2301      	movne	r3, #1
 8006228:	0692      	lsls	r2, r2, #26
 800622a:	d42d      	bmi.n	8006288 <_printf_common+0xb4>
 800622c:	4649      	mov	r1, r9
 800622e:	4638      	mov	r0, r7
 8006230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006234:	47c0      	blx	r8
 8006236:	3001      	adds	r0, #1
 8006238:	d020      	beq.n	800627c <_printf_common+0xa8>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	68e5      	ldr	r5, [r4, #12]
 800623e:	f003 0306 	and.w	r3, r3, #6
 8006242:	2b04      	cmp	r3, #4
 8006244:	bf18      	it	ne
 8006246:	2500      	movne	r5, #0
 8006248:	6832      	ldr	r2, [r6, #0]
 800624a:	f04f 0600 	mov.w	r6, #0
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	bf08      	it	eq
 8006252:	1aad      	subeq	r5, r5, r2
 8006254:	6922      	ldr	r2, [r4, #16]
 8006256:	bf08      	it	eq
 8006258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800625c:	4293      	cmp	r3, r2
 800625e:	bfc4      	itt	gt
 8006260:	1a9b      	subgt	r3, r3, r2
 8006262:	18ed      	addgt	r5, r5, r3
 8006264:	341a      	adds	r4, #26
 8006266:	42b5      	cmp	r5, r6
 8006268:	d11a      	bne.n	80062a0 <_printf_common+0xcc>
 800626a:	2000      	movs	r0, #0
 800626c:	e008      	b.n	8006280 <_printf_common+0xac>
 800626e:	2301      	movs	r3, #1
 8006270:	4652      	mov	r2, sl
 8006272:	4649      	mov	r1, r9
 8006274:	4638      	mov	r0, r7
 8006276:	47c0      	blx	r8
 8006278:	3001      	adds	r0, #1
 800627a:	d103      	bne.n	8006284 <_printf_common+0xb0>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	3501      	adds	r5, #1
 8006286:	e7c4      	b.n	8006212 <_printf_common+0x3e>
 8006288:	2030      	movs	r0, #48	; 0x30
 800628a:	18e1      	adds	r1, r4, r3
 800628c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006296:	4422      	add	r2, r4
 8006298:	3302      	adds	r3, #2
 800629a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800629e:	e7c5      	b.n	800622c <_printf_common+0x58>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4622      	mov	r2, r4
 80062a4:	4649      	mov	r1, r9
 80062a6:	4638      	mov	r0, r7
 80062a8:	47c0      	blx	r8
 80062aa:	3001      	adds	r0, #1
 80062ac:	d0e6      	beq.n	800627c <_printf_common+0xa8>
 80062ae:	3601      	adds	r6, #1
 80062b0:	e7d9      	b.n	8006266 <_printf_common+0x92>
	...

080062b4 <_printf_i>:
 80062b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	7e0f      	ldrb	r7, [r1, #24]
 80062ba:	4691      	mov	r9, r2
 80062bc:	2f78      	cmp	r7, #120	; 0x78
 80062be:	4680      	mov	r8, r0
 80062c0:	460c      	mov	r4, r1
 80062c2:	469a      	mov	sl, r3
 80062c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ca:	d807      	bhi.n	80062dc <_printf_i+0x28>
 80062cc:	2f62      	cmp	r7, #98	; 0x62
 80062ce:	d80a      	bhi.n	80062e6 <_printf_i+0x32>
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	f000 80d9 	beq.w	8006488 <_printf_i+0x1d4>
 80062d6:	2f58      	cmp	r7, #88	; 0x58
 80062d8:	f000 80a4 	beq.w	8006424 <_printf_i+0x170>
 80062dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062e4:	e03a      	b.n	800635c <_printf_i+0xa8>
 80062e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ea:	2b15      	cmp	r3, #21
 80062ec:	d8f6      	bhi.n	80062dc <_printf_i+0x28>
 80062ee:	a101      	add	r1, pc, #4	; (adr r1, 80062f4 <_printf_i+0x40>)
 80062f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f4:	0800634d 	.word	0x0800634d
 80062f8:	08006361 	.word	0x08006361
 80062fc:	080062dd 	.word	0x080062dd
 8006300:	080062dd 	.word	0x080062dd
 8006304:	080062dd 	.word	0x080062dd
 8006308:	080062dd 	.word	0x080062dd
 800630c:	08006361 	.word	0x08006361
 8006310:	080062dd 	.word	0x080062dd
 8006314:	080062dd 	.word	0x080062dd
 8006318:	080062dd 	.word	0x080062dd
 800631c:	080062dd 	.word	0x080062dd
 8006320:	0800646f 	.word	0x0800646f
 8006324:	08006391 	.word	0x08006391
 8006328:	08006451 	.word	0x08006451
 800632c:	080062dd 	.word	0x080062dd
 8006330:	080062dd 	.word	0x080062dd
 8006334:	08006491 	.word	0x08006491
 8006338:	080062dd 	.word	0x080062dd
 800633c:	08006391 	.word	0x08006391
 8006340:	080062dd 	.word	0x080062dd
 8006344:	080062dd 	.word	0x080062dd
 8006348:	08006459 	.word	0x08006459
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	1d1a      	adds	r2, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	602a      	str	r2, [r5, #0]
 8006354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635c:	2301      	movs	r3, #1
 800635e:	e0a4      	b.n	80064aa <_printf_i+0x1f6>
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	6829      	ldr	r1, [r5, #0]
 8006364:	0606      	lsls	r6, r0, #24
 8006366:	f101 0304 	add.w	r3, r1, #4
 800636a:	d50a      	bpl.n	8006382 <_printf_i+0xce>
 800636c:	680e      	ldr	r6, [r1, #0]
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	2e00      	cmp	r6, #0
 8006372:	da03      	bge.n	800637c <_printf_i+0xc8>
 8006374:	232d      	movs	r3, #45	; 0x2d
 8006376:	4276      	negs	r6, r6
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	230a      	movs	r3, #10
 800637e:	485e      	ldr	r0, [pc, #376]	; (80064f8 <_printf_i+0x244>)
 8006380:	e019      	b.n	80063b6 <_printf_i+0x102>
 8006382:	680e      	ldr	r6, [r1, #0]
 8006384:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	bf18      	it	ne
 800638c:	b236      	sxthne	r6, r6
 800638e:	e7ef      	b.n	8006370 <_printf_i+0xbc>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	1d19      	adds	r1, r3, #4
 8006396:	6029      	str	r1, [r5, #0]
 8006398:	0601      	lsls	r1, r0, #24
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0xec>
 800639c:	681e      	ldr	r6, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0xf2>
 80063a0:	0646      	lsls	r6, r0, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0xe8>
 80063a4:	881e      	ldrh	r6, [r3, #0]
 80063a6:	2f6f      	cmp	r7, #111	; 0x6f
 80063a8:	bf0c      	ite	eq
 80063aa:	2308      	moveq	r3, #8
 80063ac:	230a      	movne	r3, #10
 80063ae:	4852      	ldr	r0, [pc, #328]	; (80064f8 <_printf_i+0x244>)
 80063b0:	2100      	movs	r1, #0
 80063b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063b6:	6865      	ldr	r5, [r4, #4]
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	bfa8      	it	ge
 80063bc:	6821      	ldrge	r1, [r4, #0]
 80063be:	60a5      	str	r5, [r4, #8]
 80063c0:	bfa4      	itt	ge
 80063c2:	f021 0104 	bicge.w	r1, r1, #4
 80063c6:	6021      	strge	r1, [r4, #0]
 80063c8:	b90e      	cbnz	r6, 80063ce <_printf_i+0x11a>
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	d04d      	beq.n	800646a <_printf_i+0x1b6>
 80063ce:	4615      	mov	r5, r2
 80063d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80063d4:	fb03 6711 	mls	r7, r3, r1, r6
 80063d8:	5dc7      	ldrb	r7, [r0, r7]
 80063da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063de:	4637      	mov	r7, r6
 80063e0:	42bb      	cmp	r3, r7
 80063e2:	460e      	mov	r6, r1
 80063e4:	d9f4      	bls.n	80063d0 <_printf_i+0x11c>
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d10b      	bne.n	8006402 <_printf_i+0x14e>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	07de      	lsls	r6, r3, #31
 80063ee:	d508      	bpl.n	8006402 <_printf_i+0x14e>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	6861      	ldr	r1, [r4, #4]
 80063f4:	4299      	cmp	r1, r3
 80063f6:	bfde      	ittt	le
 80063f8:	2330      	movle	r3, #48	; 0x30
 80063fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006402:	1b52      	subs	r2, r2, r5
 8006404:	6122      	str	r2, [r4, #16]
 8006406:	464b      	mov	r3, r9
 8006408:	4621      	mov	r1, r4
 800640a:	4640      	mov	r0, r8
 800640c:	f8cd a000 	str.w	sl, [sp]
 8006410:	aa03      	add	r2, sp, #12
 8006412:	f7ff fedf 	bl	80061d4 <_printf_common>
 8006416:	3001      	adds	r0, #1
 8006418:	d14c      	bne.n	80064b4 <_printf_i+0x200>
 800641a:	f04f 30ff 	mov.w	r0, #4294967295
 800641e:	b004      	add	sp, #16
 8006420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006424:	4834      	ldr	r0, [pc, #208]	; (80064f8 <_printf_i+0x244>)
 8006426:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800642a:	6829      	ldr	r1, [r5, #0]
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006432:	6029      	str	r1, [r5, #0]
 8006434:	061d      	lsls	r5, r3, #24
 8006436:	d514      	bpl.n	8006462 <_printf_i+0x1ae>
 8006438:	07df      	lsls	r7, r3, #31
 800643a:	bf44      	itt	mi
 800643c:	f043 0320 	orrmi.w	r3, r3, #32
 8006440:	6023      	strmi	r3, [r4, #0]
 8006442:	b91e      	cbnz	r6, 800644c <_printf_i+0x198>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	2310      	movs	r3, #16
 800644e:	e7af      	b.n	80063b0 <_printf_i+0xfc>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	f043 0320 	orr.w	r3, r3, #32
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	2378      	movs	r3, #120	; 0x78
 800645a:	4828      	ldr	r0, [pc, #160]	; (80064fc <_printf_i+0x248>)
 800645c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006460:	e7e3      	b.n	800642a <_printf_i+0x176>
 8006462:	0659      	lsls	r1, r3, #25
 8006464:	bf48      	it	mi
 8006466:	b2b6      	uxthmi	r6, r6
 8006468:	e7e6      	b.n	8006438 <_printf_i+0x184>
 800646a:	4615      	mov	r5, r2
 800646c:	e7bb      	b.n	80063e6 <_printf_i+0x132>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	6826      	ldr	r6, [r4, #0]
 8006472:	1d18      	adds	r0, r3, #4
 8006474:	6961      	ldr	r1, [r4, #20]
 8006476:	6028      	str	r0, [r5, #0]
 8006478:	0635      	lsls	r5, r6, #24
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	d501      	bpl.n	8006482 <_printf_i+0x1ce>
 800647e:	6019      	str	r1, [r3, #0]
 8006480:	e002      	b.n	8006488 <_printf_i+0x1d4>
 8006482:	0670      	lsls	r0, r6, #25
 8006484:	d5fb      	bpl.n	800647e <_printf_i+0x1ca>
 8006486:	8019      	strh	r1, [r3, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	4615      	mov	r5, r2
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	e7ba      	b.n	8006406 <_printf_i+0x152>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	2100      	movs	r1, #0
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	602a      	str	r2, [r5, #0]
 8006498:	681d      	ldr	r5, [r3, #0]
 800649a:	6862      	ldr	r2, [r4, #4]
 800649c:	4628      	mov	r0, r5
 800649e:	f000 f8d9 	bl	8006654 <memchr>
 80064a2:	b108      	cbz	r0, 80064a8 <_printf_i+0x1f4>
 80064a4:	1b40      	subs	r0, r0, r5
 80064a6:	6060      	str	r0, [r4, #4]
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	2300      	movs	r3, #0
 80064ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b2:	e7a8      	b.n	8006406 <_printf_i+0x152>
 80064b4:	462a      	mov	r2, r5
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	47d0      	blx	sl
 80064be:	3001      	adds	r0, #1
 80064c0:	d0ab      	beq.n	800641a <_printf_i+0x166>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	079b      	lsls	r3, r3, #30
 80064c6:	d413      	bmi.n	80064f0 <_printf_i+0x23c>
 80064c8:	68e0      	ldr	r0, [r4, #12]
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	4298      	cmp	r0, r3
 80064ce:	bfb8      	it	lt
 80064d0:	4618      	movlt	r0, r3
 80064d2:	e7a4      	b.n	800641e <_printf_i+0x16a>
 80064d4:	2301      	movs	r3, #1
 80064d6:	4632      	mov	r2, r6
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	47d0      	blx	sl
 80064de:	3001      	adds	r0, #1
 80064e0:	d09b      	beq.n	800641a <_printf_i+0x166>
 80064e2:	3501      	adds	r5, #1
 80064e4:	68e3      	ldr	r3, [r4, #12]
 80064e6:	9903      	ldr	r1, [sp, #12]
 80064e8:	1a5b      	subs	r3, r3, r1
 80064ea:	42ab      	cmp	r3, r5
 80064ec:	dcf2      	bgt.n	80064d4 <_printf_i+0x220>
 80064ee:	e7eb      	b.n	80064c8 <_printf_i+0x214>
 80064f0:	2500      	movs	r5, #0
 80064f2:	f104 0619 	add.w	r6, r4, #25
 80064f6:	e7f5      	b.n	80064e4 <_printf_i+0x230>
 80064f8:	08006855 	.word	0x08006855
 80064fc:	08006866 	.word	0x08006866

08006500 <_sbrk_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	2300      	movs	r3, #0
 8006504:	4d05      	ldr	r5, [pc, #20]	; (800651c <_sbrk_r+0x1c>)
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	f7fc f896 	bl	800263c <_sbrk>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_sbrk_r+0x1a>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b103      	cbz	r3, 800651a <_sbrk_r+0x1a>
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	20000230 	.word	0x20000230

08006520 <__sread>:
 8006520:	b510      	push	{r4, lr}
 8006522:	460c      	mov	r4, r1
 8006524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006528:	f000 f8ae 	bl	8006688 <_read_r>
 800652c:	2800      	cmp	r0, #0
 800652e:	bfab      	itete	ge
 8006530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006532:	89a3      	ldrhlt	r3, [r4, #12]
 8006534:	181b      	addge	r3, r3, r0
 8006536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800653a:	bfac      	ite	ge
 800653c:	6563      	strge	r3, [r4, #84]	; 0x54
 800653e:	81a3      	strhlt	r3, [r4, #12]
 8006540:	bd10      	pop	{r4, pc}

08006542 <__swrite>:
 8006542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006546:	461f      	mov	r7, r3
 8006548:	898b      	ldrh	r3, [r1, #12]
 800654a:	4605      	mov	r5, r0
 800654c:	05db      	lsls	r3, r3, #23
 800654e:	460c      	mov	r4, r1
 8006550:	4616      	mov	r6, r2
 8006552:	d505      	bpl.n	8006560 <__swrite+0x1e>
 8006554:	2302      	movs	r3, #2
 8006556:	2200      	movs	r2, #0
 8006558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655c:	f000 f868 	bl	8006630 <_lseek_r>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	4632      	mov	r2, r6
 8006564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	4628      	mov	r0, r5
 800656c:	463b      	mov	r3, r7
 800656e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	f000 b817 	b.w	80065a8 <_write_r>

0800657a <__sseek>:
 800657a:	b510      	push	{r4, lr}
 800657c:	460c      	mov	r4, r1
 800657e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006582:	f000 f855 	bl	8006630 <_lseek_r>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	bf15      	itete	ne
 800658c:	6560      	strne	r0, [r4, #84]	; 0x54
 800658e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006596:	81a3      	strheq	r3, [r4, #12]
 8006598:	bf18      	it	ne
 800659a:	81a3      	strhne	r3, [r4, #12]
 800659c:	bd10      	pop	{r4, pc}

0800659e <__sclose>:
 800659e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a2:	f000 b813 	b.w	80065cc <_close_r>
	...

080065a8 <_write_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	2200      	movs	r2, #0
 80065b2:	4d05      	ldr	r5, [pc, #20]	; (80065c8 <_write_r+0x20>)
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fb fff3 	bl	80025a2 <_write>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_write_r+0x1e>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_write_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000230 	.word	0x20000230

080065cc <_close_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	2300      	movs	r3, #0
 80065d0:	4d05      	ldr	r5, [pc, #20]	; (80065e8 <_close_r+0x1c>)
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fb ffff 	bl	80025da <_close>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_close_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_close_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20000230 	.word	0x20000230

080065ec <_fstat_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	2300      	movs	r3, #0
 80065f0:	4d06      	ldr	r5, [pc, #24]	; (800660c <_fstat_r+0x20>)
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f7fb fff9 	bl	80025f0 <_fstat>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_fstat_r+0x1c>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b103      	cbz	r3, 8006608 <_fstat_r+0x1c>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	20000230 	.word	0x20000230

08006610 <_isatty_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	2300      	movs	r3, #0
 8006614:	4d05      	ldr	r5, [pc, #20]	; (800662c <_isatty_r+0x1c>)
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fb fff7 	bl	800260e <_isatty>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_isatty_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_isatty_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	20000230 	.word	0x20000230

08006630 <_lseek_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	4611      	mov	r1, r2
 8006638:	2200      	movs	r2, #0
 800663a:	4d05      	ldr	r5, [pc, #20]	; (8006650 <_lseek_r+0x20>)
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fb ffef 	bl	8002622 <_lseek>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_lseek_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_lseek_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20000230 	.word	0x20000230

08006654 <memchr>:
 8006654:	4603      	mov	r3, r0
 8006656:	b510      	push	{r4, lr}
 8006658:	b2c9      	uxtb	r1, r1
 800665a:	4402      	add	r2, r0
 800665c:	4293      	cmp	r3, r2
 800665e:	4618      	mov	r0, r3
 8006660:	d101      	bne.n	8006666 <memchr+0x12>
 8006662:	2000      	movs	r0, #0
 8006664:	e003      	b.n	800666e <memchr+0x1a>
 8006666:	7804      	ldrb	r4, [r0, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	428c      	cmp	r4, r1
 800666c:	d1f6      	bne.n	800665c <memchr+0x8>
 800666e:	bd10      	pop	{r4, pc}

08006670 <__malloc_lock>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__malloc_lock+0x8>)
 8006672:	f7ff bb13 	b.w	8005c9c <__retarget_lock_acquire_recursive>
 8006676:	bf00      	nop
 8006678:	20000224 	.word	0x20000224

0800667c <__malloc_unlock>:
 800667c:	4801      	ldr	r0, [pc, #4]	; (8006684 <__malloc_unlock+0x8>)
 800667e:	f7ff bb0e 	b.w	8005c9e <__retarget_lock_release_recursive>
 8006682:	bf00      	nop
 8006684:	20000224 	.word	0x20000224

08006688 <_read_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	2200      	movs	r2, #0
 8006692:	4d05      	ldr	r5, [pc, #20]	; (80066a8 <_read_r+0x20>)
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f7fb ff66 	bl	8002568 <_read>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_read_r+0x1e>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_read_r+0x1e>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	20000230 	.word	0x20000230

080066ac <_init>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	bf00      	nop
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr

080066b8 <_fini>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr
